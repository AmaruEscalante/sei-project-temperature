
memoria.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003d8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800104  00800104  00000470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1a  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000783  00000000  00000000  00000f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c8  00000000  00000000  000016e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000467  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cd  00000000  00000000  000020db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000023a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a4 e0       	ldi	r26, 0x04	; 4
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e8 ed       	ldi	r30, 0xD8	; 216
  8c:	f3 e0       	ldi	r31, 0x03	; 3
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
  9a:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  9e:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <shift10bits>:
#define MEMORY_SIZE 100

uint8_t count = 0x00;

// EEPROM Functions
void shift10bits(unsigned int data){
  a6:	9c 01       	movw	r18, r24
	PORTD |= (1 << SELECT); // señal  del selector en HIGH
  a8:	5a 9a       	sbi	0x0b, 2	; 11
  aa:	9a e0       	ldi	r25, 0x0A	; 10
	for(uint8_t count = 0; count < 10; count ++){ // bucle de 10 repeticiones
		PORTD &= ~(1 << CLK); // señal del clock en LOW
  ac:	5b 98       	cbi	0x0b, 3	; 11
		
		// while(sclk_Read() == 1)sclk_Write(0); // bucle para asegurar señal del clock en LOW

		if(data & 0x0200) PORTD |= (1 << MOSI); // escribimos el décimo bit  (0b 0000 00B0 0000 0000)
  ae:	31 ff       	sbrs	r19, 1
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <shift10bits+0x10>
  b2:	5c 9a       	sbi	0x0b, 4	; 11
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <shift10bits+0x12>
		else PORTD &= ~(1 << MOSI);
  b6:	5c 98       	cbi	0x0b, 4	; 11
		
		PORTD |= (1 << CLK);  // señal del clock en HIGH
  b8:	5b 9a       	sbi	0x0b, 3	; 11
		
		// while(sclk_Read() == 0)sclk_Write(1); // bucle para asegurar señal del clock en HIGH
		
		data <<= 1;             // rotamos la data hacia la izquierda para enviar el siguiente bit
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	91 50       	subi	r25, 0x01	; 1
uint8_t count = 0x00;

// EEPROM Functions
void shift10bits(unsigned int data){
	PORTD |= (1 << SELECT); // señal  del selector en HIGH
	for(uint8_t count = 0; count < 10; count ++){ // bucle de 10 repeticiones
  c0:	a9 f7       	brne	.-22     	; 0xac <shift10bits+0x6>
		
		// while(sclk_Read() == 0)sclk_Write(1); // bucle para asegurar señal del clock en HIGH
		
		data <<= 1;             // rotamos la data hacia la izquierda para enviar el siguiente bit
	}
	PORTD &= ~(1 << CLK); // señal del clock en LOW cuando acaba el for loop
  c2:	5b 98       	cbi	0x0b, 3	; 11
	PORTD &= ~(1 << MOSI);
  c4:	5c 98       	cbi	0x0b, 4	; 11
  c6:	08 95       	ret

000000c8 <shiftdata>:
}

void shiftdata(uint8_t data_write){
  c8:	98 e0       	ldi	r25, 0x08	; 8
	for(uint8_t count = 0; count < 8; count ++){
		PORTD &= ~(1 << CLK);  // señal del clock en LOW
  ca:	5b 98       	cbi	0x0b, 3	; 11
		
		//while(sclk_Read() == 1)sclk_Write(0);  // bucle para asegurar señal del clock en LOW
		
		if(data_write & 0x80)PORTD |= (1 << MOSI);       // escribimos el octavo bit  (0b B000 0000)
  cc:	88 23       	and	r24, r24
  ce:	14 f4       	brge	.+4      	; 0xd4 <shiftdata+0xc>
  d0:	5c 9a       	sbi	0x0b, 4	; 11
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <shiftdata+0xe>
		else PORTD &= ~(1 << MOSI);
  d4:	5c 98       	cbi	0x0b, 4	; 11
		
		PORTD |= (1 << CLK);  // señal del clock en HIGH
  d6:	5b 9a       	sbi	0x0b, 3	; 11
		
		// while(sclk_Read() == 0)sclk_Write(1); // bucle para asegurar señal del clock en HIGH
		
		data_write <<= 1;               // rotamos la data hacia la izquierda para enviar el siguiente bit
  d8:	88 0f       	add	r24, r24
  da:	91 50       	subi	r25, 0x01	; 1
	PORTD &= ~(1 << CLK); // señal del clock en LOW cuando acaba el for loop
	PORTD &= ~(1 << MOSI);
}

void shiftdata(uint8_t data_write){
	for(uint8_t count = 0; count < 8; count ++){
  dc:	b1 f7       	brne	.-20     	; 0xca <shiftdata+0x2>
		
		// while(sclk_Read() == 0)sclk_Write(1); // bucle para asegurar señal del clock en HIGH
		
		data_write <<= 1;               // rotamos la data hacia la izquierda para enviar el siguiente bit
	}
	PORTD &= ~(1 << CLK);
  de:	5b 98       	cbi	0x0b, 3	; 11
	PORTD &= ~(1 << MOSI);
  e0:	5c 98       	cbi	0x0b, 4	; 11
  e2:	08 95       	ret

000000e4 <getOutput>:
}


uint8_t getOutput(uint8_t address_local){
  e4:	27 e0       	ldi	r18, 0x07	; 7
  e6:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t response = 0x00;
  e8:	80 e0       	ldi	r24, 0x00	; 0
	for(uint8_t i = 0; i < 8; i++){
		PORTD &= ~(1 << CLK);
		//while( PORTD & (1<<CLK) ){PORTD &= ~(1 << CLK);}  // bucle para asegurar señal del clock en LOW
		PORTD |= (1 << CLK);
		//while(~(PORTD & (1<<CLK))){PORTD |= (1 << CLK);}
		if(PIND & (1 << MISO))response |= 1 << (7-i);
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	70 e0       	ldi	r23, 0x00	; 0


uint8_t getOutput(uint8_t address_local){
	uint8_t response = 0x00;
	for(uint8_t i = 0; i < 8; i++){
		PORTD &= ~(1 << CLK);
  ee:	5b 98       	cbi	0x0b, 3	; 11
		//while( PORTD & (1<<CLK) ){PORTD &= ~(1 << CLK);}  // bucle para asegurar señal del clock en LOW
		PORTD |= (1 << CLK);
  f0:	5b 9a       	sbi	0x0b, 3	; 11
		//while(~(PORTD & (1<<CLK))){PORTD |= (1 << CLK);}
		if(PIND & (1 << MISO))response |= 1 << (7-i);
  f2:	4d 9b       	sbis	0x09, 5	; 9
  f4:	08 c0       	rjmp	.+16     	; 0x106 <getOutput+0x22>
  f6:	ab 01       	movw	r20, r22
  f8:	02 2e       	mov	r0, r18
  fa:	02 c0       	rjmp	.+4      	; 0x100 <getOutput+0x1c>
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <getOutput+0x18>
 104:	84 2b       	or	r24, r20
 106:	21 50       	subi	r18, 0x01	; 1
 108:	31 09       	sbc	r19, r1
 10a:	88 f7       	brcc	.-30     	; 0xee <getOutput+0xa>
	}
	PORTD &= ~(1 << CLK);
 10c:	5b 98       	cbi	0x0b, 3	; 11
	PORTD &= ~(1 << SELECT);
 10e:	5a 98       	cbi	0x0b, 2	; 11
	return response;
}
 110:	08 95       	ret

00000112 <read_EEPROM>:

uint8_t read_EEPROM(uint8_t address)
{
 112:	cf 93       	push	r28
 114:	c8 2f       	mov	r28, r24
	//start bit = 1
	//read op code = 10
	//Address A6-A0
	unsigned int full_address = 0x0000;
	full_address = 1 << 9 | 10 << 7 | (address & 0b01111111);   // creamos el dato para enviar
	shift10bits(full_address); // Enviamos los 10 bits con el Op code y la direccion donde leer
 116:	8f 77       	andi	r24, 0x7F	; 127
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	97 60       	ori	r25, 0x07	; 7
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <shift10bits>
	return getOutput(address); // Leemos los bits del miso
 120:	8c 2f       	mov	r24, r28
 122:	0e 94 72 00 	call	0xe4	; 0xe4 <getOutput>
}
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <write_byte>:

void write_byte(uint8_t address_write,uint8_t data_write){
 12a:	cf 93       	push	r28
 12c:	c6 2f       	mov	r28, r22
	//Mascara para escribir 0b 0000 0010 1AAA AAAA
	unsigned int write_mask =  1 << 9 | 01 << 7  | (address_write & 0b01111111); // creamos el dato para enviar
	shift10bits(write_mask);    // Enviamos la data
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	80 68       	ori	r24, 0x80	; 128
 132:	92 60       	ori	r25, 0x02	; 2
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <shift10bits>
	shiftdata(data_write);
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 64 00 	call	0xc8	; 0xc8 <shiftdata>
	PORTD &= ~(1 << SELECT);         // Desactivamos el selector
 13e:	5a 98       	cbi	0x0b, 2	; 11
	PORTD |= (1 << SELECT);          // Activamos el check status
 140:	5a 9a       	sbi	0x0b, 2	; 11
	while((PIND && (1 << MISO)) == 0){};         // Bucle para esperar
 142:	89 b1       	in	r24, 0x09	; 9
 144:	88 23       	and	r24, r24
 146:	e9 f3       	breq	.-6      	; 0x142 <write_byte+0x18>
	PORTD &= ~(1 << SELECT);         // Terminamos el check status
 148:	5a 98       	cbi	0x0b, 2	; 11
	
}
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <EWEN>:
	// Start bit = 1
	// read op code = 00
	// Address A6-A0 A6=1 A5=1 A4-A0=X
	
	unsigned int data = 0x0260; // 0b 0000 0010 0110 0000
	shift10bits(data);        // Enviamos los 10 bits uno por uno con el orden de MSB
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	92 e0       	ldi	r25, 0x02	; 2
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <shift10bits>
	PORTD &= ~(1 << SELECT);    // Desactivamos el selector
 156:	5a 98       	cbi	0x0b, 2	; 11
 158:	08 95       	ret

0000015a <EWDS>:
void EWDS()
{
	// Mode x8 , Start bit=1, Read OpCode=00, Address A6-A0 A6=0 A5=0
	
	unsigned int data = 0x0200; // 0b 0000 0010 0000 0000
	shift10bits(data);          // Send data to disable writing and erasing
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	92 e0       	ldi	r25, 0x02	; 2
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <shift10bits>
	PORTD &= ~(1 << SELECT);    // Selector is isabled
 162:	5a 98       	cbi	0x0b, 2	; 11
 164:	08 95       	ret

00000166 <UART_Init>:
}

// USART Functions
void UART_Init(unsigned int ubrr)
{
	UCSR0A = (1<<U2X0); // Se coloca a doble velocidad
 166:	22 e0       	ldi	r18, 0x02	; 2
 168:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B = (1<<TXCIE0| 1<<TXEN0|1<<RXCIE0|1<<RXEN0); //Se habilita interrupción por RX, se habilita el RX, se habilita el TX
 16c:	28 ed       	ldi	r18, 0xD8	; 216
 16e:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (0<<UMSEL00)|(0<<UPM00)|(0<<USBS0)|(3<<UCSZ00); //Asincrono. Sin bit de paridad. Se coloca 1 bit de parada, 8 bits de datos
 172:	26 e0       	ldi	r18, 0x06	; 6
 174:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UBRR0H = (unsigned char)(ubrr>>8);
 178:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)ubrr; //Se coloca los baudios 9600
 17c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 180:	08 95       	ret

00000182 <UART_Transmit>:
}

void UART_Transmit(unsigned char dato_tx)
{
	while(!(UCSR0A & (1<<UDRE0)));
 182:	e0 ec       	ldi	r30, 0xC0	; 192
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	90 81       	ld	r25, Z
 188:	95 ff       	sbrs	r25, 5
 18a:	fd cf       	rjmp	.-6      	; 0x186 <UART_Transmit+0x4>
	UDR0 = dato_tx;
 18c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 190:	08 95       	ret

00000192 <main>:
}

int main(void)
{
	
	UART_Init(MY_UBRR);
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 b3 00 	call	0x166	; 0x166 <UART_Init>
	DDRD |= (1 << MOSI) | (1 << CLK) | (1 << SELECT); // MOSI, CLK, SELECT(CS) SALIDAS
 19a:	8a b1       	in	r24, 0x0a	; 10
 19c:	8c 61       	ori	r24, 0x1C	; 28
 19e:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PIND5); // MISO ENTRADA
 1a0:	55 98       	cbi	0x0a, 5	; 10
	
	PORTD &= ~(1 << CLK); // clk = 0
 1a2:	5b 98       	cbi	0x0b, 3	; 11
	
	// LEDs
	DDRD |= (1 << 6);
 1a4:	56 9a       	sbi	0x0a, 6	; 10
	UART_Transmit('1');
 1a6:	81 e3       	ldi	r24, 0x31	; 49
 1a8:	0e 94 c1 00 	call	0x182	; 0x182 <UART_Transmit>
	UART_Transmit('2');
 1ac:	82 e3       	ldi	r24, 0x32	; 50
 1ae:	0e 94 c1 00 	call	0x182	; 0x182 <UART_Transmit>
	
    while (1) 
    {	
		
		EWEN();
		write_byte(count, rand() % (30 + 1 - 10) + 10 );
 1b2:	c5 e1       	ldi	r28, 0x15	; 21
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
	UART_Transmit('2');
	
    while (1) 
    {	
		
		EWEN();
 1b6:	0e 94 a7 00 	call	0x14e	; 0x14e <EWEN>
		write_byte(count, rand() % (30 + 1 - 10) + 10 );
 1ba:	0e 94 77 01 	call	0x2ee	; 0x2ee <rand>
 1be:	be 01       	movw	r22, r28
 1c0:	0e 94 03 01 	call	0x206	; 0x206 <__divmodhi4>
 1c4:	6a e0       	ldi	r22, 0x0A	; 10
 1c6:	68 0f       	add	r22, r24
 1c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1cc:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
		EWDS();
 1d0:	0e 94 ad 00 	call	0x15a	; 0x15a <EWDS>
		
		
		UART_Transmit('H');
 1d4:	88 e4       	ldi	r24, 0x48	; 72
 1d6:	0e 94 c1 00 	call	0x182	; 0x182 <UART_Transmit>
		UART_Transmit('I');
 1da:	89 e4       	ldi	r24, 0x49	; 73
 1dc:	0e 94 c1 00 	call	0x182	; 0x182 <UART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	2f e3       	ldi	r18, 0x3F	; 63
 1e2:	82 e4       	ldi	r24, 0x42	; 66
 1e4:	9f e0       	ldi	r25, 0x0F	; 15
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x54>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x5e>
 1f0:	00 00       	nop
		
		_delay_ms(5000);
		read_EEPROM(count);
 1f2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1f6:	0e 94 89 00 	call	0x112	; 0x112 <read_EEPROM>
	    count++;
 1fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 204:	d8 cf       	rjmp	.-80     	; 0x1b6 <main+0x24>

00000206 <__divmodhi4>:
 206:	97 fb       	bst	r25, 7
 208:	07 2e       	mov	r0, r23
 20a:	16 f4       	brtc	.+4      	; 0x210 <__divmodhi4+0xa>
 20c:	00 94       	com	r0
 20e:	07 d0       	rcall	.+14     	; 0x21e <__divmodhi4_neg1>
 210:	77 fd       	sbrc	r23, 7
 212:	09 d0       	rcall	.+18     	; 0x226 <__divmodhi4_neg2>
 214:	0e 94 17 01 	call	0x22e	; 0x22e <__udivmodhi4>
 218:	07 fc       	sbrc	r0, 7
 21a:	05 d0       	rcall	.+10     	; 0x226 <__divmodhi4_neg2>
 21c:	3e f4       	brtc	.+14     	; 0x22c <__divmodhi4_exit>

0000021e <__divmodhi4_neg1>:
 21e:	90 95       	com	r25
 220:	81 95       	neg	r24
 222:	9f 4f       	sbci	r25, 0xFF	; 255
 224:	08 95       	ret

00000226 <__divmodhi4_neg2>:
 226:	70 95       	com	r23
 228:	61 95       	neg	r22
 22a:	7f 4f       	sbci	r23, 0xFF	; 255

0000022c <__divmodhi4_exit>:
 22c:	08 95       	ret

0000022e <__udivmodhi4>:
 22e:	aa 1b       	sub	r26, r26
 230:	bb 1b       	sub	r27, r27
 232:	51 e1       	ldi	r21, 0x11	; 17
 234:	07 c0       	rjmp	.+14     	; 0x244 <__udivmodhi4_ep>

00000236 <__udivmodhi4_loop>:
 236:	aa 1f       	adc	r26, r26
 238:	bb 1f       	adc	r27, r27
 23a:	a6 17       	cp	r26, r22
 23c:	b7 07       	cpc	r27, r23
 23e:	10 f0       	brcs	.+4      	; 0x244 <__udivmodhi4_ep>
 240:	a6 1b       	sub	r26, r22
 242:	b7 0b       	sbc	r27, r23

00000244 <__udivmodhi4_ep>:
 244:	88 1f       	adc	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	5a 95       	dec	r21
 24a:	a9 f7       	brne	.-22     	; 0x236 <__udivmodhi4_loop>
 24c:	80 95       	com	r24
 24e:	90 95       	com	r25
 250:	bc 01       	movw	r22, r24
 252:	cd 01       	movw	r24, r26
 254:	08 95       	ret

00000256 <do_rand>:
 256:	8f 92       	push	r8
 258:	9f 92       	push	r9
 25a:	af 92       	push	r10
 25c:	bf 92       	push	r11
 25e:	cf 92       	push	r12
 260:	df 92       	push	r13
 262:	ef 92       	push	r14
 264:	ff 92       	push	r15
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	ec 01       	movw	r28, r24
 26c:	68 81       	ld	r22, Y
 26e:	79 81       	ldd	r23, Y+1	; 0x01
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	9b 81       	ldd	r25, Y+3	; 0x03
 274:	61 15       	cp	r22, r1
 276:	71 05       	cpc	r23, r1
 278:	81 05       	cpc	r24, r1
 27a:	91 05       	cpc	r25, r1
 27c:	21 f4       	brne	.+8      	; 0x286 <do_rand+0x30>
 27e:	64 e2       	ldi	r22, 0x24	; 36
 280:	79 ed       	ldi	r23, 0xD9	; 217
 282:	8b e5       	ldi	r24, 0x5B	; 91
 284:	97 e0       	ldi	r25, 0x07	; 7
 286:	2d e1       	ldi	r18, 0x1D	; 29
 288:	33 ef       	ldi	r19, 0xF3	; 243
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	0e 94 87 01 	call	0x30e	; 0x30e <__divmodsi4>
 292:	49 01       	movw	r8, r18
 294:	5a 01       	movw	r10, r20
 296:	9b 01       	movw	r18, r22
 298:	ac 01       	movw	r20, r24
 29a:	a7 ea       	ldi	r26, 0xA7	; 167
 29c:	b1 e4       	ldi	r27, 0x41	; 65
 29e:	0e 94 a6 01 	call	0x34c	; 0x34c <__muluhisi3>
 2a2:	6b 01       	movw	r12, r22
 2a4:	7c 01       	movw	r14, r24
 2a6:	ac ee       	ldi	r26, 0xEC	; 236
 2a8:	b4 ef       	ldi	r27, 0xF4	; 244
 2aa:	a5 01       	movw	r20, r10
 2ac:	94 01       	movw	r18, r8
 2ae:	0e 94 b4 01 	call	0x368	; 0x368 <__mulohisi3>
 2b2:	dc 01       	movw	r26, r24
 2b4:	cb 01       	movw	r24, r22
 2b6:	8c 0d       	add	r24, r12
 2b8:	9d 1d       	adc	r25, r13
 2ba:	ae 1d       	adc	r26, r14
 2bc:	bf 1d       	adc	r27, r15
 2be:	b7 ff       	sbrs	r27, 7
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <do_rand+0x72>
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	a1 09       	sbc	r26, r1
 2c6:	b0 48       	sbci	r27, 0x80	; 128
 2c8:	88 83       	st	Y, r24
 2ca:	99 83       	std	Y+1, r25	; 0x01
 2cc:	aa 83       	std	Y+2, r26	; 0x02
 2ce:	bb 83       	std	Y+3, r27	; 0x03
 2d0:	9f 77       	andi	r25, 0x7F	; 127
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	ff 90       	pop	r15
 2d8:	ef 90       	pop	r14
 2da:	df 90       	pop	r13
 2dc:	cf 90       	pop	r12
 2de:	bf 90       	pop	r11
 2e0:	af 90       	pop	r10
 2e2:	9f 90       	pop	r9
 2e4:	8f 90       	pop	r8
 2e6:	08 95       	ret

000002e8 <rand_r>:
 2e8:	0e 94 2b 01 	call	0x256	; 0x256 <do_rand>
 2ec:	08 95       	ret

000002ee <rand>:
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 2b 01 	call	0x256	; 0x256 <do_rand>
 2f6:	08 95       	ret

000002f8 <srand>:
 2f8:	a0 e0       	ldi	r26, 0x00	; 0
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 300:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 304:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 308:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 30c:	08 95       	ret

0000030e <__divmodsi4>:
 30e:	05 2e       	mov	r0, r21
 310:	97 fb       	bst	r25, 7
 312:	1e f4       	brtc	.+6      	; 0x31a <__divmodsi4+0xc>
 314:	00 94       	com	r0
 316:	0e 94 9e 01 	call	0x33c	; 0x33c <__negsi2>
 31a:	57 fd       	sbrc	r21, 7
 31c:	07 d0       	rcall	.+14     	; 0x32c <__divmodsi4_neg2>
 31e:	0e 94 b9 01 	call	0x372	; 0x372 <__udivmodsi4>
 322:	07 fc       	sbrc	r0, 7
 324:	03 d0       	rcall	.+6      	; 0x32c <__divmodsi4_neg2>
 326:	4e f4       	brtc	.+18     	; 0x33a <__divmodsi4_exit>
 328:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__negsi2>

0000032c <__divmodsi4_neg2>:
 32c:	50 95       	com	r21
 32e:	40 95       	com	r20
 330:	30 95       	com	r19
 332:	21 95       	neg	r18
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	4f 4f       	sbci	r20, 0xFF	; 255
 338:	5f 4f       	sbci	r21, 0xFF	; 255

0000033a <__divmodsi4_exit>:
 33a:	08 95       	ret

0000033c <__negsi2>:
 33c:	90 95       	com	r25
 33e:	80 95       	com	r24
 340:	70 95       	com	r23
 342:	61 95       	neg	r22
 344:	7f 4f       	sbci	r23, 0xFF	; 255
 346:	8f 4f       	sbci	r24, 0xFF	; 255
 348:	9f 4f       	sbci	r25, 0xFF	; 255
 34a:	08 95       	ret

0000034c <__muluhisi3>:
 34c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__umulhisi3>
 350:	a5 9f       	mul	r26, r21
 352:	90 0d       	add	r25, r0
 354:	b4 9f       	mul	r27, r20
 356:	90 0d       	add	r25, r0
 358:	a4 9f       	mul	r26, r20
 35a:	80 0d       	add	r24, r0
 35c:	91 1d       	adc	r25, r1
 35e:	11 24       	eor	r1, r1
 360:	08 95       	ret

00000362 <__mulshisi3>:
 362:	b7 ff       	sbrs	r27, 7
 364:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__muluhisi3>

00000368 <__mulohisi3>:
 368:	0e 94 a6 01 	call	0x34c	; 0x34c <__muluhisi3>
 36c:	82 1b       	sub	r24, r18
 36e:	93 0b       	sbc	r25, r19
 370:	08 95       	ret

00000372 <__udivmodsi4>:
 372:	a1 e2       	ldi	r26, 0x21	; 33
 374:	1a 2e       	mov	r1, r26
 376:	aa 1b       	sub	r26, r26
 378:	bb 1b       	sub	r27, r27
 37a:	fd 01       	movw	r30, r26
 37c:	0d c0       	rjmp	.+26     	; 0x398 <__udivmodsi4_ep>

0000037e <__udivmodsi4_loop>:
 37e:	aa 1f       	adc	r26, r26
 380:	bb 1f       	adc	r27, r27
 382:	ee 1f       	adc	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	a2 17       	cp	r26, r18
 388:	b3 07       	cpc	r27, r19
 38a:	e4 07       	cpc	r30, r20
 38c:	f5 07       	cpc	r31, r21
 38e:	20 f0       	brcs	.+8      	; 0x398 <__udivmodsi4_ep>
 390:	a2 1b       	sub	r26, r18
 392:	b3 0b       	sbc	r27, r19
 394:	e4 0b       	sbc	r30, r20
 396:	f5 0b       	sbc	r31, r21

00000398 <__udivmodsi4_ep>:
 398:	66 1f       	adc	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	88 1f       	adc	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	1a 94       	dec	r1
 3a2:	69 f7       	brne	.-38     	; 0x37e <__udivmodsi4_loop>
 3a4:	60 95       	com	r22
 3a6:	70 95       	com	r23
 3a8:	80 95       	com	r24
 3aa:	90 95       	com	r25
 3ac:	9b 01       	movw	r18, r22
 3ae:	ac 01       	movw	r20, r24
 3b0:	bd 01       	movw	r22, r26
 3b2:	cf 01       	movw	r24, r30
 3b4:	08 95       	ret

000003b6 <__umulhisi3>:
 3b6:	a2 9f       	mul	r26, r18
 3b8:	b0 01       	movw	r22, r0
 3ba:	b3 9f       	mul	r27, r19
 3bc:	c0 01       	movw	r24, r0
 3be:	a3 9f       	mul	r26, r19
 3c0:	70 0d       	add	r23, r0
 3c2:	81 1d       	adc	r24, r1
 3c4:	11 24       	eor	r1, r1
 3c6:	91 1d       	adc	r25, r1
 3c8:	b2 9f       	mul	r27, r18
 3ca:	70 0d       	add	r23, r0
 3cc:	81 1d       	adc	r24, r1
 3ce:	11 24       	eor	r1, r1
 3d0:	91 1d       	adc	r25, r1
 3d2:	08 95       	ret

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
