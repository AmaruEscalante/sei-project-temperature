
Psoc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a9  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002a9  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000002a9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d12  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079b  00000000  00000000  0000105a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000373  00000000  00000000  000017f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000222  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ff  00000000  00000000  00001e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001ee  000001ee  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.I2C_setCallbacks 00000012  000001be  000001be  00000272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.I2C_init 00000012  000001d0  000001d0  00000284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_24 000000ac  000000ce  000000ce  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.I2C_req  00000002  00800105  00800105  000002a9  2**0
                  ALLOC
 18 .bss.I2C_recv 00000002  00800107  00800107  000002a9  2**0
                  ALLOC
 19 .text.I2C_received 00000006  000001e2  000001e2  00000296  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.I2C_requested 00000030  0000017a  0000017a  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.setup   00000014  000001aa  000001aa  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    00000006  000001e8  000001e8  0000029c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .data.temp_data 00000003  00800102  000001f2  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .bss.counter  00000001  00800109  00800109  000002a9  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
   8:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
   c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  10:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  14:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  18:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  1c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  20:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  24:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  28:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  2c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  30:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  34:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  38:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  3c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  40:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  44:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  48:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  4c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  50:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  54:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  58:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  5c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <_etext>
  64:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 02       	muls	r16, r17
  6c:	80 01       	movw	r16, r0
  6e:	02 01       	movw	r0, r4
  70:	05 00       	.word	0x0005	; ????
  72:	01 f2       	breq	.-128    	; 0xfffffff4 <__eeprom_end+0xff7efff4>
  74:	01 05       	cpc	r16, r1
  76:	01 0a       	sbc	r0, r17
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  c6:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

000001ee <__bad_interrupt>:
 1ee:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.I2C_setCallbacks:

000001be <I2C_setCallbacks>:
static void (*I2C_recv)(uint8_t);
static void (*I2C_req)();

void I2C_setCallbacks(void (*recv)(uint8_t), void (*req)())
{
  I2C_recv = recv;
 1be:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <I2C_recv+0x1>
 1c2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <I2C_recv>
  I2C_req = req;
 1c6:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <I2C_req+0x1>
 1ca:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <I2C_req>
 1ce:	08 95       	ret

Disassembly of section .text.I2C_init:

000001d0 <I2C_init>:
}

void I2C_init(uint8_t address)
{
  cli();
 1d0:	f8 94       	cli
  // load address into TWI address register
  TWAR = address << 1;
 1d2:	88 0f       	add	r24, r24
 1d4:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
  // set the TWCR to enable address matching and enable TWI, clear TWINT, enable TWI interrupt
  TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
 1d8:	85 ec       	ldi	r24, 0xC5	; 197
 1da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  sei();
 1de:	78 94       	sei
 1e0:	08 95       	ret

Disassembly of section .text.__vector_24:

000000ce <__vector_24>:
  TWAR = 0;
  sei();
}

ISR(TWI_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	4f 93       	push	r20
  de:	5f 93       	push	r21
  e0:	6f 93       	push	r22
  e2:	7f 93       	push	r23
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
  switch(TW_STATUS)
  f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  f4:	88 7f       	andi	r24, 0xF8	; 248
  f6:	80 38       	cpi	r24, 0x80	; 128
  f8:	49 f0       	breq	.+18     	; 0x10c <__vector_24+0x3e>
  fa:	18 f4       	brcc	.+6      	; 0x102 <__vector_24+0x34>
  fc:	88 23       	and	r24, r24
  fe:	19 f1       	breq	.+70     	; 0x146 <__vector_24+0x78>
 100:	28 c0       	rjmp	.+80     	; 0x152 <__vector_24+0x84>
 102:	88 3a       	cpi	r24, 0xA8	; 168
 104:	71 f0       	breq	.+28     	; 0x122 <__vector_24+0x54>
 106:	88 3b       	cpi	r24, 0xB8	; 184
 108:	a9 f0       	breq	.+42     	; 0x134 <__vector_24+0x66>
 10a:	23 c0       	rjmp	.+70     	; 0x152 <__vector_24+0x84>
  {
    case TW_SR_DATA_ACK:
      // received data from master, call the receive callback
      I2C_recv(TWDR); 
 10c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 110:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <I2C_recv>
 114:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <I2C_recv+0x1>
 118:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 11a:	85 ec       	ldi	r24, 0xC5	; 197
 11c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      break;
 120:	1b c0       	rjmp	.+54     	; 0x158 <__vector_24+0x8a>
    case TW_ST_SLA_ACK:
      // master is requesting data, call the request callback
      I2C_req();
 122:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <I2C_req>
 126:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <I2C_req+0x1>
 12a:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 12c:	85 ec       	ldi	r24, 0xC5	; 197
 12e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      break;
 132:	12 c0       	rjmp	.+36     	; 0x158 <__vector_24+0x8a>
    case TW_ST_DATA_ACK:
      // master is requesting data, call the request callback
      I2C_req();
 134:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <I2C_req>
 138:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <I2C_req+0x1>
 13c:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 13e:	85 ec       	ldi	r24, 0xC5	; 197
 140:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      break;
 144:	09 c0       	rjmp	.+18     	; 0x158 <__vector_24+0x8a>
    case TW_BUS_ERROR:
      // some sort of erroneous state, prepare TWI to be readdressed
      TWCR = 0;
 146:	ec eb       	ldi	r30, 0xBC	; 188
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	10 82       	st	Z, r1
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN); 
 14c:	85 ec       	ldi	r24, 0xC5	; 197
 14e:	80 83       	st	Z, r24
      break;
 150:	03 c0       	rjmp	.+6      	; 0x158 <__vector_24+0x8a>
    default:
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 152:	85 ec       	ldi	r24, 0xC5	; 197
 154:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      break;
  }
} 
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	bf 91       	pop	r27
 15e:	af 91       	pop	r26
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	7f 91       	pop	r23
 166:	6f 91       	pop	r22
 168:	5f 91       	pop	r21
 16a:	4f 91       	pop	r20
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

Disassembly of section .text.I2C_received:

000001e2 <I2C_received>:

uint8_t temp_data[3] = {0x30,0x40,0x50};

void I2C_received(uint8_t received_data)
{
	command = received_data;
 1e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e6:	08 95       	ret

Disassembly of section .text.I2C_requested:

0000017a <I2C_requested>:
}

void I2C_requested()
{
	if (command == 0x1C) {
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17e:	8c 31       	cpi	r24, 0x1C	; 28
 180:	99 f4       	brne	.+38     	; 0x1a8 <I2C_requested+0x2e>
		if (counter == 3){
 182:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <counter>
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	11 f4       	brne	.+4      	; 0x18e <I2C_requested+0x14>
			counter = 0;
 18a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <counter>
		}
		I2C_transmitByte(temp_data[counter]);
 18e:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <counter>
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ee 5f       	subi	r30, 0xFE	; 254
 196:	fe 4f       	sbci	r31, 0xFE	; 254
 198:	80 81       	ld	r24, Z
void I2C_stop(void);
void I2C_setCallbacks(void (*recv)(uint8_t), void (*req)());

inline void __attribute__((always_inline)) I2C_transmitByte(uint8_t data)
{
  TWDR = data;
 19a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		counter++;
 19e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <counter>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <counter>
 1a8:	08 95       	ret

Disassembly of section .text.setup:

000001aa <setup>:
}

void setup()
{
	// set received/requested callbacks
	I2C_setCallbacks(I2C_received, I2C_requested);
 1aa:	6d eb       	ldi	r22, 0xBD	; 189
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	81 ef       	ldi	r24, 0xF1	; 241
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 df 00 	call	0x1be	; 0x1be <I2C_setCallbacks>

	// init I2C
	I2C_init(I2C_ADDR);
 1b6:	80 e2       	ldi	r24, 0x20	; 32
 1b8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_init>
 1bc:	08 95       	ret

Disassembly of section .text.main:

000001e8 <main>:
}

int main()
{
	setup();
 1e8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <setup>
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <main+0x4>
