
memTemp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000009f6  00000a8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800102  00800102  00000a8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000abc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001324  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b05  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b48  00000000  00000000  00002a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  000035e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000654  00000000  00000000  000038fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000679  00000000  00000000  00003f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000045c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 01 02 	call	0x402	; 0x402 <main>
  9e:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DS1621_Init>:
#include <stdint.h>
#include "I2CMaster.h"

void DS1621_Init(void)
{
	TWI_Start();
  a6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <TWI_Start>
	TWI_RegisterSelect(DS1621, ACCESS_CONFIG);
  aa:	6c ea       	ldi	r22, 0xAC	; 172
  ac:	88 e4       	ldi	r24, 0x48	; 72
  ae:	0e 94 0a 01 	call	0x214	; 0x214 <TWI_RegisterSelect>
	TWI_Write(0x03); // LSB (1SHOT) set to 1 = 1-shot mode conversions and POL = 1
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	0e 94 4f 01 	call	0x29e	; 0x29e <TWI_Write>
	
	TWI_Stop();
  b8:	0e 94 06 01 	call	0x20c	; 0x20c <TWI_Stop>
  bc:	08 95       	ret

000000be <readTemperature>:
}

char readTemperature(void)
{
  be:	cf 93       	push	r28
	char temperatureMSB;
	char temperatureLSB;
	
	TWI_Start();
  c0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <TWI_Start>
	TWI_RegisterSelect(DS1621, START_CONVERT_T);
  c4:	6e ee       	ldi	r22, 0xEE	; 238
  c6:	88 e4       	ldi	r24, 0x48	; 72
  c8:	0e 94 0a 01 	call	0x214	; 0x214 <TWI_RegisterSelect>
	// No further data is required
	
	TWI_Repeat_Start();
  cc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_Repeat_Start>
	TWI_RegisterSelect(DS1621, READ_TEMPERATURE);
  d0:	6a ea       	ldi	r22, 0xAA	; 170
  d2:	88 e4       	ldi	r24, 0x48	; 72
  d4:	0e 94 0a 01 	call	0x214	; 0x214 <TWI_RegisterSelect>
	TWI_Repeat_Start();
  d8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_Repeat_Start>
	temperatureMSB = TWI_Read(DS1621, NACK); // ACK not required
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	88 e4       	ldi	r24, 0x48	; 72
  e0:	0e 94 27 01 	call	0x24e	; 0x24e <TWI_Read>
  e4:	c8 2f       	mov	r28, r24
	temperatureLSB = TWI_Read(DS1621, NACK); // ACK not required
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	88 e4       	ldi	r24, 0x48	; 72
  ea:	0e 94 27 01 	call	0x24e	; 0x24e <TWI_Read>
	
	TWI_Stop();
  ee:	0e 94 06 01 	call	0x20c	; 0x20c <TWI_Stop>
	
	return temperatureMSB;
}
  f2:	8c 2f       	mov	r24, r28
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <shift10bits>:
 */ 

#include "eeprom.h"

// EEPROM Functions
void shift10bits(unsigned int data){
  f8:	9c 01       	movw	r18, r24
	PORTD |= (1 << SELECT); // señal  del selector en HIGH
  fa:	5e 9a       	sbi	0x0b, 6	; 11
  fc:	9a e0       	ldi	r25, 0x0A	; 10
	for(uint8_t count = 0; count < 10; count ++){ // bucle de 10 repeticiones
		PORTD &= ~(1 << CLK); // señal del clock en LOW
  fe:	5b 98       	cbi	0x0b, 3	; 11
		if(data & 0x0200) PORTD |= (1 << MOSI); // escribimos el décimo bit  (0b 0000 00B0 0000 0000)
 100:	31 ff       	sbrs	r19, 1
 102:	02 c0       	rjmp	.+4      	; 0x108 <shift10bits+0x10>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	01 c0       	rjmp	.+2      	; 0x10a <shift10bits+0x12>
		else PORTD &= ~(1 << MOSI);
 108:	5c 98       	cbi	0x0b, 4	; 11
		PORTD |= (1 << CLK);  // señal del clock en HIGH
 10a:	5b 9a       	sbi	0x0b, 3	; 11
		data <<= 1;             // rotamos la data hacia la izquierda para enviar el siguiente bit
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	91 50       	subi	r25, 0x01	; 1
#include "eeprom.h"

// EEPROM Functions
void shift10bits(unsigned int data){
	PORTD |= (1 << SELECT); // señal  del selector en HIGH
	for(uint8_t count = 0; count < 10; count ++){ // bucle de 10 repeticiones
 112:	a9 f7       	brne	.-22     	; 0xfe <shift10bits+0x6>
		if(data & 0x0200) PORTD |= (1 << MOSI); // escribimos el décimo bit  (0b 0000 00B0 0000 0000)
		else PORTD &= ~(1 << MOSI);
		PORTD |= (1 << CLK);  // señal del clock en HIGH
		data <<= 1;             // rotamos la data hacia la izquierda para enviar el siguiente bit
	}
	PORTD &= ~(1 << CLK); // señal del clock en LOW cuando acaba el for loop
 114:	5b 98       	cbi	0x0b, 3	; 11
	PORTD &= ~(1 << MOSI);
 116:	5c 98       	cbi	0x0b, 4	; 11
 118:	08 95       	ret

0000011a <shiftdata>:
}

void shiftdata(uint8_t data_write){
 11a:	98 e0       	ldi	r25, 0x08	; 8
	for(uint8_t count = 0; count < 8; count ++){
		PORTD &= ~(1 << CLK);  // señal del clock en LOW
 11c:	5b 98       	cbi	0x0b, 3	; 11
		
		if(data_write & 0x80)PORTD |= (1 << MOSI);       // escribimos el octavo bit  (0b B000 0000)
 11e:	88 23       	and	r24, r24
 120:	14 f4       	brge	.+4      	; 0x126 <shiftdata+0xc>
 122:	5c 9a       	sbi	0x0b, 4	; 11
 124:	01 c0       	rjmp	.+2      	; 0x128 <shiftdata+0xe>
		else PORTD &= ~(1 << MOSI);
 126:	5c 98       	cbi	0x0b, 4	; 11
		
		PORTD |= (1 << CLK);  // señal del clock en HIGH
 128:	5b 9a       	sbi	0x0b, 3	; 11
		
		data_write <<= 1;               // rotamos la data hacia la izquierda para enviar el siguiente bit
 12a:	88 0f       	add	r24, r24
 12c:	91 50       	subi	r25, 0x01	; 1
	PORTD &= ~(1 << CLK); // señal del clock en LOW cuando acaba el for loop
	PORTD &= ~(1 << MOSI);
}

void shiftdata(uint8_t data_write){
	for(uint8_t count = 0; count < 8; count ++){
 12e:	b1 f7       	brne	.-20     	; 0x11c <shiftdata+0x2>
		
		PORTD |= (1 << CLK);  // señal del clock en HIGH
		
		data_write <<= 1;               // rotamos la data hacia la izquierda para enviar el siguiente bit
	}
	PORTD &= ~(1 << CLK);
 130:	5b 98       	cbi	0x0b, 3	; 11
	PORTD &= ~(1 << MOSI);
 132:	5c 98       	cbi	0x0b, 4	; 11
 134:	08 95       	ret

00000136 <getOutput>:
}


uint8_t getOutput(uint8_t address_local){
 136:	27 e0       	ldi	r18, 0x07	; 7
 138:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t response = 0x00;
 13a:	80 e0       	ldi	r24, 0x00	; 0
	for(uint8_t i = 0; i < 8; i++){
		PORTD &= ~(1 << CLK);
		PORTD |= (1 << CLK);
		if(PIND & (1 << MISO))response |= 1 << (7-i);
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	70 e0       	ldi	r23, 0x00	; 0


uint8_t getOutput(uint8_t address_local){
	uint8_t response = 0x00;
	for(uint8_t i = 0; i < 8; i++){
		PORTD &= ~(1 << CLK);
 140:	5b 98       	cbi	0x0b, 3	; 11
		PORTD |= (1 << CLK);
 142:	5b 9a       	sbi	0x0b, 3	; 11
		if(PIND & (1 << MISO))response |= 1 << (7-i);
 144:	4d 9b       	sbis	0x09, 5	; 9
 146:	08 c0       	rjmp	.+16     	; 0x158 <getOutput+0x22>
 148:	ab 01       	movw	r20, r22
 14a:	02 2e       	mov	r0, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <getOutput+0x1c>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <getOutput+0x18>
 156:	84 2b       	or	r24, r20
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	31 09       	sbc	r19, r1
 15c:	88 f7       	brcc	.-30     	; 0x140 <getOutput+0xa>
	}
	PORTD &= ~(1 << CLK);
 15e:	5b 98       	cbi	0x0b, 3	; 11
	PORTD &= ~(1 << SELECT);
 160:	5e 98       	cbi	0x0b, 6	; 11
	return response;
}
 162:	08 95       	ret

00000164 <read_EEPROM>:

uint8_t read_EEPROM(uint8_t address)
{
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
	//start bit = 1
	//read op code = 10
	//Address A6-A0
	unsigned int full_address = 0x0000;
	full_address = 1 << 9 | 10 << 7 | (address & 0b01111111);   // creamos el dato para enviar
	shift10bits(full_address); // Enviamos los 10 bits con el Op code y la direccion donde leer
 168:	8f 77       	andi	r24, 0x7F	; 127
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	97 60       	ori	r25, 0x07	; 7
 16e:	0e 94 7c 00 	call	0xf8	; 0xf8 <shift10bits>
	return getOutput(address); // Leemos los bits del miso
 172:	8c 2f       	mov	r24, r28
 174:	0e 94 9b 00 	call	0x136	; 0x136 <getOutput>
}
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <write_byte>:

void write_byte(uint8_t address_write,uint8_t data_write){
 17c:	cf 93       	push	r28
 17e:	c6 2f       	mov	r28, r22
	//Mascara para escribir 0b 0000 0010 1AAA AAAA
	unsigned int write_mask =  1 << 9 | 01 << 7  | (address_write & 0b01111111); // creamos el dato para enviar
	shift10bits(write_mask);    // Enviamos la data
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	80 68       	ori	r24, 0x80	; 128
 184:	92 60       	ori	r25, 0x02	; 2
 186:	0e 94 7c 00 	call	0xf8	; 0xf8 <shift10bits>
	shiftdata(data_write);
 18a:	8c 2f       	mov	r24, r28
 18c:	0e 94 8d 00 	call	0x11a	; 0x11a <shiftdata>
	PORTD &= ~(1 << SELECT);         // Desactivamos el selector
 190:	5e 98       	cbi	0x0b, 6	; 11
	PORTD |= (1 << SELECT);          // Activamos el check status
 192:	5e 9a       	sbi	0x0b, 6	; 11
	while((PIND && (1 << MISO)) == 0){};         // Bucle para esperar
 194:	89 b1       	in	r24, 0x09	; 9
 196:	88 23       	and	r24, r24
 198:	e9 f3       	breq	.-6      	; 0x194 <write_byte+0x18>
	PORTD &= ~(1 << SELECT);         // Terminamos el check status
 19a:	5e 98       	cbi	0x0b, 6	; 11
	
}
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <EWEN>:
	// Start bit = 1
	// read op code = 00
	// Address A6-A0 A6=1 A5=1 A4-A0=X
	
	unsigned int data = 0x0260; // 0b 0000 0010 0110 0000
	shift10bits(data);        // Enviamos los 10 bits uno por uno con el orden de MSB
 1a0:	80 e6       	ldi	r24, 0x60	; 96
 1a2:	92 e0       	ldi	r25, 0x02	; 2
 1a4:	0e 94 7c 00 	call	0xf8	; 0xf8 <shift10bits>
	PORTD &= ~(1 << SELECT);    // Desactivamos el selector
 1a8:	5e 98       	cbi	0x0b, 6	; 11
 1aa:	08 95       	ret

000001ac <EWDS>:
void EWDS()
{
	// Mode x8 , Start bit=1, Read OpCode=00, Address A6-A0 A6=0 A5=0
	
	unsigned int data = 0x0200; // 0b 0000 0010 0000 0000
	shift10bits(data);          // Send data to disable writing and erasing
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	92 e0       	ldi	r25, 0x02	; 2
 1b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <shift10bits>
	PORTD &= ~(1 << SELECT);    // Selector is disabled
 1b4:	5e 98       	cbi	0x0b, 6	; 11
 1b6:	08 95       	ret

000001b8 <eraseAll>:
}

void eraseAll(){
	unsigned int data = 0x0240; // 0b 0000 0010 0100 0000
	shift10bits(data);          // Send data to erase all
 1b8:	80 e4       	ldi	r24, 0x40	; 64
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	0e 94 7c 00 	call	0xf8	; 0xf8 <shift10bits>
	PORTD &= ~(1 << SELECT);    // Selector is disabled
 1c0:	5e 98       	cbi	0x0b, 6	; 11
 1c2:	08 95       	ret

000001c4 <TWI_init>:
	//PORTD = 0x04;
}

void TWI_init()
{
	TWCR &= ~(1<<TWEA | (1<<TWIE)); // Clear TWEA and TWIE from slave mode
 1c4:	ec eb       	ldi	r30, 0xBC	; 188
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	8e 7b       	andi	r24, 0xBE	; 190
 1cc:	80 83       	st	Z, r24
	TWCR |= (1<<TWEN); // Enable I2C protocol
 1ce:	80 81       	ld	r24, Z
 1d0:	84 60       	ori	r24, 0x04	; 4
 1d2:	80 83       	st	Z, r24
	TWSR = 0x00; // Prescaler = 1
 1d4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 0x0C; // Bit Rate = 12 -> 1M/(16+2*12*1) = 25K
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 1de:	08 95       	ret

000001e0 <TWI_Start>:
}

void TWI_Start()
{
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWSTA) | (1<<TWEN);
 1e0:	84 ee       	ldi	r24, 0xE4	; 228
 1e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));
 1e6:	ec eb       	ldi	r30, 0xBC	; 188
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	88 23       	and	r24, r24
 1ee:	ec f7       	brge	.-6      	; 0x1ea <TWI_Start+0xa>
	if((TWSR & 0xF8) != 0x08)
 1f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1f4:	08 95       	ret

000001f6 <TWI_Repeat_Start>:
	}
}

void TWI_Repeat_Start()
{
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWSTA) | (1<< TWEN);
 1f6:	84 ee       	ldi	r24, 0xE4	; 228
 1f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));
 1fc:	ec eb       	ldi	r30, 0xBC	; 188
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	88 23       	and	r24, r24
 204:	ec f7       	brge	.-6      	; 0x200 <TWI_Repeat_Start+0xa>
	if((TWSR & 0xF8) != 0x10)
 206:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 20a:	08 95       	ret

0000020c <TWI_Stop>:
	}
}

void TWI_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
 20c:	84 e9       	ldi	r24, 0x94	; 148
 20e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 212:	08 95       	ret

00000214 <TWI_RegisterSelect>:
}

void TWI_RegisterSelect(uint8_t addr, uint8_t reg)
{
	TWDR = (addr<<1) | 0x00; // Last bit = 0 (Write)
 214:	88 0f       	add	r24, r24
 216:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 21a:	84 e8       	ldi	r24, 0x84	; 132
 21c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));
 220:	ec eb       	ldi	r30, 0xBC	; 188
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	88 23       	and	r24, r24
 228:	ec f7       	brge	.-6      	; 0x224 <TWI_RegisterSelect+0x10>
	if((TWSR & 0xF8) != 0x18)
 22a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 22e:	88 7f       	andi	r24, 0xF8	; 248
 230:	88 31       	cpi	r24, 0x18	; 24
 232:	61 f4       	brne	.+24     	; 0x24c <TWI_RegisterSelect+0x38>
		Error();
	}
	else
	{
		Success();
		TWDR = reg; // Register to Write
 234:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR = (1<<TWINT) | (1<<TWEN);
 238:	84 e8       	ldi	r24, 0x84	; 132
 23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR&(1<<TWINT)));
 23e:	ec eb       	ldi	r30, 0xBC	; 188
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	88 23       	and	r24, r24
 246:	ec f7       	brge	.-6      	; 0x242 <TWI_RegisterSelect+0x2e>
		if((TWSR & 0xF8) != 0x28)
 248:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 24c:	08 95       	ret

0000024e <TWI_Read>:
	}
}

int TWI_Read(uint8_t addr, uint8_t N_ACK)
{
	TWDR = (addr<<1) | 0x01; // Last bit = 1 (Read)
 24e:	88 0f       	add	r24, r24
 250:	81 60       	ori	r24, 0x01	; 1
 252:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 256:	84 e8       	ldi	r24, 0x84	; 132
 258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));
 25c:	ec eb       	ldi	r30, 0xBC	; 188
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	88 23       	and	r24, r24
 264:	ec f7       	brge	.-6      	; 0x260 <TWI_Read+0x12>
	if((TWSR & 0xF8) != 0x40)
 266:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 26a:	88 7f       	andi	r24, 0xF8	; 248
 26c:	80 34       	cpi	r24, 0x40	; 64
 26e:	99 f4       	brne	.+38     	; 0x296 <TWI_Read+0x48>
		Error();
	}
	else
	{
		Success();
		TWCR = (1<<TWINT) | (1<<TWEN) | (N_ACK<<TWEA);
 270:	20 e4       	ldi	r18, 0x40	; 64
 272:	62 9f       	mul	r22, r18
 274:	c0 01       	movw	r24, r0
 276:	11 24       	eor	r1, r1
 278:	84 68       	ori	r24, 0x84	; 132
 27a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR&(1<<TWINT)));
 27e:	ec eb       	ldi	r30, 0xBC	; 188
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 23       	and	r24, r24
 286:	ec f7       	brge	.-6      	; 0x282 <TWI_Read+0x34>

		if(N_ACK == 1) // Read Again
 288:	61 30       	cpi	r22, 0x01	; 1
 28a:	19 f4       	brne	.+6      	; 0x292 <TWI_Read+0x44>
		{
			if((TWSR & 0xF8) != 0x50)
 28c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 290:	02 c0       	rjmp	.+4      	; 0x296 <TWI_Read+0x48>
			}

		}
		else
		{
			if((TWSR & 0xF8) != 0x58)
 292:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
				Success();
			}
		}
	}

	return(TWDR);
 296:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	08 95       	ret

0000029e <TWI_Write>:

void TWI_Write(uint8_t data)
{
	TWDR = data; // Write data on previous selected register
 29e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 2a2:	84 e8       	ldi	r24, 0x84	; 132
 2a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR&(1<<TWINT)));
 2a8:	ec eb       	ldi	r30, 0xBC	; 188
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	88 23       	and	r24, r24
 2b0:	ec f7       	brge	.-6      	; 0x2ac <TWI_Write+0xe>
	if((TWSR & 0xF8) != 0x28)
 2b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2b6:	08 95       	ret

000002b8 <__vector_24>:
  TWAR = 0;
  sei();
}

ISR(TWI_vect)
{
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	2f 93       	push	r18
 2c4:	3f 93       	push	r19
 2c6:	4f 93       	push	r20
 2c8:	5f 93       	push	r21
 2ca:	6f 93       	push	r22
 2cc:	7f 93       	push	r23
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	af 93       	push	r26
 2d4:	bf 93       	push	r27
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
  switch(TW_STATUS)
 2da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2de:	88 7f       	andi	r24, 0xF8	; 248
 2e0:	80 38       	cpi	r24, 0x80	; 128
 2e2:	49 f0       	breq	.+18     	; 0x2f6 <__vector_24+0x3e>
 2e4:	18 f4       	brcc	.+6      	; 0x2ec <__vector_24+0x34>
 2e6:	88 23       	and	r24, r24
 2e8:	19 f1       	breq	.+70     	; 0x330 <__vector_24+0x78>
 2ea:	28 c0       	rjmp	.+80     	; 0x33c <__vector_24+0x84>
 2ec:	88 3a       	cpi	r24, 0xA8	; 168
 2ee:	71 f0       	breq	.+28     	; 0x30c <__vector_24+0x54>
 2f0:	88 3b       	cpi	r24, 0xB8	; 184
 2f2:	a9 f0       	breq	.+42     	; 0x31e <__vector_24+0x66>
 2f4:	23 c0       	rjmp	.+70     	; 0x33c <__vector_24+0x84>
  {
    case TW_SR_DATA_ACK:
      // received data from master, call the receive callback
      I2C_recv(TWDR); 
 2f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2fa:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <I2C_recv>
 2fe:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <I2C_recv+0x1>
 302:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 304:	85 ec       	ldi	r24, 0xC5	; 197
 306:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;
 30a:	1b c0       	rjmp	.+54     	; 0x342 <__vector_24+0x8a>
    case TW_ST_SLA_ACK:
      // master is requesting data, call the request callback
      I2C_req();
 30c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 310:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_end+0x1>
 314:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 316:	85 ec       	ldi	r24, 0xC5	; 197
 318:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;
 31c:	12 c0       	rjmp	.+36     	; 0x342 <__vector_24+0x8a>
    case TW_ST_DATA_ACK:
      // master is requesting data, call the request callback
      I2C_req();
 31e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 322:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_end+0x1>
 326:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 328:	85 ec       	ldi	r24, 0xC5	; 197
 32a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;
 32e:	09 c0       	rjmp	.+18     	; 0x342 <__vector_24+0x8a>
    case TW_BUS_ERROR:
      // some sort of erroneous state, prepare TWI to be readdressed
      TWCR = 0;
 330:	ec eb       	ldi	r30, 0xBC	; 188
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	10 82       	st	Z, r1
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN); 
 336:	85 ec       	ldi	r24, 0xC5	; 197
 338:	80 83       	st	Z, r24
      break;
 33a:	03 c0       	rjmp	.+6      	; 0x342 <__vector_24+0x8a>
    default:
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 33c:	85 ec       	ldi	r24, 0xC5	; 197
 33e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      break;
  }
} 
 342:	ff 91       	pop	r31
 344:	ef 91       	pop	r30
 346:	bf 91       	pop	r27
 348:	af 91       	pop	r26
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	7f 91       	pop	r23
 350:	6f 91       	pop	r22
 352:	5f 91       	pop	r21
 354:	4f 91       	pop	r20
 356:	3f 91       	pop	r19
 358:	2f 91       	pop	r18
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <SR_Interrupt_init>:
			data_counter = 0;
		}

	}
	
}
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 36a:	8d bb       	out	0x1d, r24	; 29
 36c:	08 95       	ret

0000036e <timerInit>:
 36e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 372:	8d e0       	ldi	r24, 0x0D	; 13
 374:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 378:	ef e6       	ldi	r30, 0x6F	; 111
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	80 83       	st	Z, r24
 382:	83 e1       	ldi	r24, 0x13	; 19
 384:	93 e1       	ldi	r25, 0x13	; 19
 386:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 38a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 38e:	08 95       	ret

00000390 <__vector_11>:
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	8f 93       	push	r24
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <minute_flag>
 3a2:	8f 91       	pop	r24
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <__vector_1>:

ISR(INT0_vect){
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	2f 93       	push	r18
 3ba:	3f 93       	push	r19
 3bc:	4f 93       	push	r20
 3be:	5f 93       	push	r21
 3c0:	6f 93       	push	r22
 3c2:	7f 93       	push	r23
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
 3c8:	af 93       	push	r26
 3ca:	bf 93       	push	r27
 3cc:	ef 93       	push	r30
 3ce:	ff 93       	push	r31
	
	if ((PIND & (1 << SR)) == 2)
 3d0:	89 b1       	in	r24, 0x09	; 9
		I2C_init(I2C_ADDR);
		TIMSK1 &= ~(1<<OCIE1A);
		
	} else
	{
		TWI_init();
 3d2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <TWI_init>
		TIMSK1 |= (1<<OCIE1A);
 3d6:	ef e6       	ldi	r30, 0x6F	; 111
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	80 83       	st	Z, r24
	}
	
}
 3e0:	ff 91       	pop	r31
 3e2:	ef 91       	pop	r30
 3e4:	bf 91       	pop	r27
 3e6:	af 91       	pop	r26
 3e8:	9f 91       	pop	r25
 3ea:	8f 91       	pop	r24
 3ec:	7f 91       	pop	r23
 3ee:	6f 91       	pop	r22
 3f0:	5f 91       	pop	r21
 3f2:	4f 91       	pop	r20
 3f4:	3f 91       	pop	r19
 3f6:	2f 91       	pop	r18
 3f8:	0f 90       	pop	r0
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	0f 90       	pop	r0
 3fe:	1f 90       	pop	r1
 400:	18 95       	reti

00000402 <main>:



int main(void)
{	
	TWI_init();
 402:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <TWI_init>
	DS1621_Init();
 406:	0e 94 53 00 	call	0xa6	; 0xa6 <DS1621_Init>
	
	
	DDRD |= (1 << MOSI) | (1 << CLK) | (1 << SELECT); // MOSI, CLK, SELECT(CS) SALIDAS
 40a:	8a b1       	in	r24, 0x0a	; 10
 40c:	88 65       	ori	r24, 0x58	; 88
 40e:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1 << PIND5) | (1<<SR)); // MISO ENTRADA	
 410:	8a b1       	in	r24, 0x0a	; 10
 412:	8b 7d       	andi	r24, 0xDB	; 219
 414:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << CLK); // clk = 0
 416:	5b 98       	cbi	0x0b, 3	; 11
		
	SR_Interrupt_init();
 418:	0e 94 b2 01 	call	0x364	; 0x364 <SR_Interrupt_init>

	// LEDs
	DDRD |= (1 << 6);
 41c:	56 9a       	sbi	0x0a, 6	; 10
		
	sei();
 41e:	78 94       	sei
	timerInit();
 420:	0e 94 b7 01 	call	0x36e	; 0x36e <timerInit>
	
	// EEPROM start
	EWEN();	
 424:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <EWEN>
	eraseAll();	
 428:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <eraseAll>
	EWDS();
 42c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <EWDS>
		
		if(minute_flag)
		{
			char temperature;
			uint8_t hundred_count;
			PORTD ^= (1<<PIND6);
 430:	00 e4       	ldi	r16, 0x40	; 64
	EWDS();
	
	while (1)
	{
		
		if(minute_flag)
 432:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <minute_flag>
 436:	88 23       	and	r24, r24
 438:	f1 f3       	breq	.-4      	; 0x436 <main+0x34>
		{
			char temperature;
			uint8_t hundred_count;
			PORTD ^= (1<<PIND6);
 43a:	8b b1       	in	r24, 0x0b	; 11
 43c:	80 27       	eor	r24, r16
 43e:	8b b9       	out	0x0b, r24	; 11
			temperature = readTemperature(); // Leer temperatura
 440:	0e 94 5f 00 	call	0xbe	; 0xbe <readTemperature>
 444:	c8 2f       	mov	r28, r24
	
			uint8_t entero, decimal; // promedio
			float conthist; //
	
			hundred_count = read_EEPROM(MEMORY_SIZE); // Contador de cuantas veces se llego a 100 datos guardados
 446:	83 e6       	ldi	r24, 0x63	; 99
 448:	0e 94 b2 00 	call	0x164	; 0x164 <read_EEPROM>
 44c:	d8 2f       	mov	r29, r24
			conthist =  (((float)hundred_count*100) + (float)count); // contador historico
 44e:	10 91 0c 01 	lds	r17, 0x010C	; 0x80010c <count>
 452:	68 2f       	mov	r22, r24
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__floatunsisf>
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	48 ec       	ldi	r20, 0xC8	; 200
 464:	52 e4       	ldi	r21, 0x42	; 66
 466:	0e 94 8c 04 	call	0x918	; 0x918 <__mulsf3>
 46a:	6b 01       	movw	r12, r22
 46c:	7c 01       	movw	r14, r24
 46e:	61 2f       	mov	r22, r17
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__floatunsisf>
 47a:	9b 01       	movw	r18, r22
 47c:	ac 01       	movw	r20, r24
 47e:	c7 01       	movw	r24, r14
 480:	b6 01       	movw	r22, r12
 482:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__addsf3>
 486:	6b 01       	movw	r12, r22
 488:	7c 01       	movw	r14, r24
	
			if (hundred_count == 0 && count == 0)promedio = (float)temperature;
 48a:	d1 11       	cpse	r29, r1
 48c:	11 c0       	rjmp	.+34     	; 0x4b0 <main+0xae>
 48e:	11 11       	cpse	r17, r1
 490:	0f c0       	rjmp	.+30     	; 0x4b0 <main+0xae>
 492:	6c 2f       	mov	r22, r28
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__floatunsisf>
 49e:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <promedio>
 4a2:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <promedio+0x1>
 4a6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <promedio+0x2>
 4aa:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <promedio+0x3>
 4ae:	32 c0       	rjmp	.+100    	; 0x514 <main+0x112>
			else promedio = ((float)temperature + promedio*conthist )/ (conthist+1);
 4b0:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <promedio>
 4b4:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <promedio+0x1>
 4b8:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <promedio+0x2>
 4bc:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <promedio+0x3>
 4c0:	c7 01       	movw	r24, r14
 4c2:	b6 01       	movw	r22, r12
 4c4:	0e 94 8c 04 	call	0x918	; 0x918 <__mulsf3>
 4c8:	4b 01       	movw	r8, r22
 4ca:	5c 01       	movw	r10, r24
 4cc:	6c 2f       	mov	r22, r28
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__floatunsisf>
 4d8:	9b 01       	movw	r18, r22
 4da:	ac 01       	movw	r20, r24
 4dc:	c5 01       	movw	r24, r10
 4de:	b4 01       	movw	r22, r8
 4e0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__addsf3>
 4e4:	4b 01       	movw	r8, r22
 4e6:	5c 01       	movw	r10, r24
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	40 e8       	ldi	r20, 0x80	; 128
 4ee:	5f e3       	ldi	r21, 0x3F	; 63
 4f0:	c7 01       	movw	r24, r14
 4f2:	b6 01       	movw	r22, r12
 4f4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__addsf3>
 4f8:	9b 01       	movw	r18, r22
 4fa:	ac 01       	movw	r20, r24
 4fc:	c5 01       	movw	r24, r10
 4fe:	b4 01       	movw	r22, r8
 500:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__divsf3>
 504:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <promedio>
 508:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <promedio+0x1>
 50c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <promedio+0x2>
 510:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <promedio+0x3>
	
			entero = (uint8_t)promedio; // obtenemos el numero
 514:	80 90 07 01 	lds	r8, 0x0107	; 0x800107 <promedio>
 518:	90 90 08 01 	lds	r9, 0x0108	; 0x800108 <promedio+0x1>
 51c:	a0 90 09 01 	lds	r10, 0x0109	; 0x800109 <promedio+0x2>
 520:	b0 90 0a 01 	lds	r11, 0x010A	; 0x80010a <promedio+0x3>
 524:	c5 01       	movw	r24, r10
 526:	b4 01       	movw	r22, r8
 528:	0e 94 cf 03 	call	0x79e	; 0x79e <__fixunssfsi>
 52c:	16 2f       	mov	r17, r22
			decimal = (promedio - (float)entero) * 100;
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__floatunsisf>
 538:	9b 01       	movw	r18, r22
 53a:	ac 01       	movw	r20, r24
 53c:	c5 01       	movw	r24, r10
 53e:	b4 01       	movw	r22, r8
 540:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__subsf3>
 544:	20 e0       	ldi	r18, 0x00	; 0
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	48 ec       	ldi	r20, 0xC8	; 200
 54a:	52 e4       	ldi	r21, 0x42	; 66
 54c:	0e 94 8c 04 	call	0x918	; 0x918 <__mulsf3>
 550:	0e 94 cf 03 	call	0x79e	; 0x79e <__fixunssfsi>
 554:	b6 2e       	mov	r11, r22
	
			EWEN();
 556:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <EWEN>
	
			if (temperature > maxTemp){
 55a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <maxTemp>
 55e:	8c 17       	cp	r24, r28
 560:	68 f4       	brcc	.+26     	; 0x57c <main+0x17a>
				write_byte(MEMORY_SIZE+1, temperature); // Almacenando temperatura maxima
 562:	6c 2f       	mov	r22, r28
 564:	84 e6       	ldi	r24, 0x64	; 100
 566:	0e 94 be 00 	call	0x17c	; 0x17c <write_byte>
				write_byte(MEMORY_SIZE+2, conthist);
 56a:	c7 01       	movw	r24, r14
 56c:	b6 01       	movw	r22, r12
 56e:	0e 94 cf 03 	call	0x79e	; 0x79e <__fixunssfsi>
 572:	85 e6       	ldi	r24, 0x65	; 101
 574:	0e 94 be 00 	call	0x17c	; 0x17c <write_byte>
				maxTemp = temperature;
 578:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <maxTemp>
			}
	
			if (temperature < minTemp){
 57c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 580:	c8 17       	cp	r28, r24
 582:	68 f4       	brcc	.+26     	; 0x59e <main+0x19c>
				write_byte(MEMORY_SIZE+3, temperature); // Almacenando temperatura minima
 584:	6c 2f       	mov	r22, r28
 586:	86 e6       	ldi	r24, 0x66	; 102
 588:	0e 94 be 00 	call	0x17c	; 0x17c <write_byte>
				write_byte(MEMORY_SIZE+4, conthist);    // Almacenando tiempo
 58c:	c7 01       	movw	r24, r14
 58e:	b6 01       	movw	r22, r12
 590:	0e 94 cf 03 	call	0x79e	; 0x79e <__fixunssfsi>
 594:	87 e6       	ldi	r24, 0x67	; 103
 596:	0e 94 be 00 	call	0x17c	; 0x17c <write_byte>
				minTemp = temperature;
 59a:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
			}
	
			write_byte(MEMORY_SIZE+5,entero);
 59e:	61 2f       	mov	r22, r17
 5a0:	88 e6       	ldi	r24, 0x68	; 104
 5a2:	0e 94 be 00 	call	0x17c	; 0x17c <write_byte>
			write_byte(MEMORY_SIZE+6,decimal);
 5a6:	6b 2d       	mov	r22, r11
 5a8:	89 e6       	ldi	r24, 0x69	; 105
 5aa:	0e 94 be 00 	call	0x17c	; 0x17c <write_byte>
	
			write_byte(count, temperature); // Almacenar temperatura
 5ae:	6c 2f       	mov	r22, r28
 5b0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <count>
 5b4:	0e 94 be 00 	call	0x17c	; 0x17c <write_byte>
	
			count++;
 5b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <count>
 5bc:	8f 5f       	subi	r24, 0xFF	; 255
			if(count >= MEMORY_SIZE){
 5be:	83 36       	cpi	r24, 0x63	; 99
 5c0:	18 f4       	brcc	.+6      	; 0x5c8 <main+0x1c6>
			write_byte(MEMORY_SIZE+5,entero);
			write_byte(MEMORY_SIZE+6,decimal);
	
			write_byte(count, temperature); // Almacenar temperatura
	
			count++;
 5c2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <count>
 5c6:	07 c0       	rjmp	.+14     	; 0x5d6 <main+0x1d4>
			if(count >= MEMORY_SIZE){
				count = 0;
 5c8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <count>
				hundred_count++;
				write_byte(MEMORY_SIZE, hundred_count);
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	6d 0f       	add	r22, r29
 5d0:	83 e6       	ldi	r24, 0x63	; 99
 5d2:	0e 94 be 00 	call	0x17c	; 0x17c <write_byte>
			}
			EWDS();
 5d6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <EWDS>

			minute_flag = false;
 5da:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <minute_flag>
 5de:	29 cf       	rjmp	.-430    	; 0x432 <main+0x30>

000005e0 <__subsf3>:
 5e0:	50 58       	subi	r21, 0x80	; 128

000005e2 <__addsf3>:
 5e2:	bb 27       	eor	r27, r27
 5e4:	aa 27       	eor	r26, r26
 5e6:	0e 94 08 03 	call	0x610	; 0x610 <__addsf3x>
 5ea:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_round>
 5ee:	0e 94 44 04 	call	0x888	; 0x888 <__fp_pscA>
 5f2:	38 f0       	brcs	.+14     	; 0x602 <__addsf3+0x20>
 5f4:	0e 94 4b 04 	call	0x896	; 0x896 <__fp_pscB>
 5f8:	20 f0       	brcs	.+8      	; 0x602 <__addsf3+0x20>
 5fa:	39 f4       	brne	.+14     	; 0x60a <__addsf3+0x28>
 5fc:	9f 3f       	cpi	r25, 0xFF	; 255
 5fe:	19 f4       	brne	.+6      	; 0x606 <__addsf3+0x24>
 600:	26 f4       	brtc	.+8      	; 0x60a <__addsf3+0x28>
 602:	0c 94 41 04 	jmp	0x882	; 0x882 <__fp_nan>
 606:	0e f4       	brtc	.+2      	; 0x60a <__addsf3+0x28>
 608:	e0 95       	com	r30
 60a:	e7 fb       	bst	r30, 7
 60c:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>

00000610 <__addsf3x>:
 610:	e9 2f       	mov	r30, r25
 612:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_split3>
 616:	58 f3       	brcs	.-42     	; 0x5ee <__addsf3+0xc>
 618:	ba 17       	cp	r27, r26
 61a:	62 07       	cpc	r22, r18
 61c:	73 07       	cpc	r23, r19
 61e:	84 07       	cpc	r24, r20
 620:	95 07       	cpc	r25, r21
 622:	20 f0       	brcs	.+8      	; 0x62c <__addsf3x+0x1c>
 624:	79 f4       	brne	.+30     	; 0x644 <__addsf3x+0x34>
 626:	a6 f5       	brtc	.+104    	; 0x690 <__addsf3x+0x80>
 628:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_zero>
 62c:	0e f4       	brtc	.+2      	; 0x630 <__addsf3x+0x20>
 62e:	e0 95       	com	r30
 630:	0b 2e       	mov	r0, r27
 632:	ba 2f       	mov	r27, r26
 634:	a0 2d       	mov	r26, r0
 636:	0b 01       	movw	r0, r22
 638:	b9 01       	movw	r22, r18
 63a:	90 01       	movw	r18, r0
 63c:	0c 01       	movw	r0, r24
 63e:	ca 01       	movw	r24, r20
 640:	a0 01       	movw	r20, r0
 642:	11 24       	eor	r1, r1
 644:	ff 27       	eor	r31, r31
 646:	59 1b       	sub	r21, r25
 648:	99 f0       	breq	.+38     	; 0x670 <__addsf3x+0x60>
 64a:	59 3f       	cpi	r21, 0xF9	; 249
 64c:	50 f4       	brcc	.+20     	; 0x662 <__addsf3x+0x52>
 64e:	50 3e       	cpi	r21, 0xE0	; 224
 650:	68 f1       	brcs	.+90     	; 0x6ac <__addsf3x+0x9c>
 652:	1a 16       	cp	r1, r26
 654:	f0 40       	sbci	r31, 0x00	; 0
 656:	a2 2f       	mov	r26, r18
 658:	23 2f       	mov	r18, r19
 65a:	34 2f       	mov	r19, r20
 65c:	44 27       	eor	r20, r20
 65e:	58 5f       	subi	r21, 0xF8	; 248
 660:	f3 cf       	rjmp	.-26     	; 0x648 <__addsf3x+0x38>
 662:	46 95       	lsr	r20
 664:	37 95       	ror	r19
 666:	27 95       	ror	r18
 668:	a7 95       	ror	r26
 66a:	f0 40       	sbci	r31, 0x00	; 0
 66c:	53 95       	inc	r21
 66e:	c9 f7       	brne	.-14     	; 0x662 <__addsf3x+0x52>
 670:	7e f4       	brtc	.+30     	; 0x690 <__addsf3x+0x80>
 672:	1f 16       	cp	r1, r31
 674:	ba 0b       	sbc	r27, r26
 676:	62 0b       	sbc	r22, r18
 678:	73 0b       	sbc	r23, r19
 67a:	84 0b       	sbc	r24, r20
 67c:	ba f0       	brmi	.+46     	; 0x6ac <__addsf3x+0x9c>
 67e:	91 50       	subi	r25, 0x01	; 1
 680:	a1 f0       	breq	.+40     	; 0x6aa <__addsf3x+0x9a>
 682:	ff 0f       	add	r31, r31
 684:	bb 1f       	adc	r27, r27
 686:	66 1f       	adc	r22, r22
 688:	77 1f       	adc	r23, r23
 68a:	88 1f       	adc	r24, r24
 68c:	c2 f7       	brpl	.-16     	; 0x67e <__addsf3x+0x6e>
 68e:	0e c0       	rjmp	.+28     	; 0x6ac <__addsf3x+0x9c>
 690:	ba 0f       	add	r27, r26
 692:	62 1f       	adc	r22, r18
 694:	73 1f       	adc	r23, r19
 696:	84 1f       	adc	r24, r20
 698:	48 f4       	brcc	.+18     	; 0x6ac <__addsf3x+0x9c>
 69a:	87 95       	ror	r24
 69c:	77 95       	ror	r23
 69e:	67 95       	ror	r22
 6a0:	b7 95       	ror	r27
 6a2:	f7 95       	ror	r31
 6a4:	9e 3f       	cpi	r25, 0xFE	; 254
 6a6:	08 f0       	brcs	.+2      	; 0x6aa <__addsf3x+0x9a>
 6a8:	b0 cf       	rjmp	.-160    	; 0x60a <__addsf3+0x28>
 6aa:	93 95       	inc	r25
 6ac:	88 0f       	add	r24, r24
 6ae:	08 f0       	brcs	.+2      	; 0x6b2 <__addsf3x+0xa2>
 6b0:	99 27       	eor	r25, r25
 6b2:	ee 0f       	add	r30, r30
 6b4:	97 95       	ror	r25
 6b6:	87 95       	ror	r24
 6b8:	08 95       	ret

000006ba <__divsf3>:
 6ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__divsf3x>
 6be:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_round>
 6c2:	0e 94 4b 04 	call	0x896	; 0x896 <__fp_pscB>
 6c6:	58 f0       	brcs	.+22     	; 0x6de <__divsf3+0x24>
 6c8:	0e 94 44 04 	call	0x888	; 0x888 <__fp_pscA>
 6cc:	40 f0       	brcs	.+16     	; 0x6de <__divsf3+0x24>
 6ce:	29 f4       	brne	.+10     	; 0x6da <__divsf3+0x20>
 6d0:	5f 3f       	cpi	r21, 0xFF	; 255
 6d2:	29 f0       	breq	.+10     	; 0x6de <__divsf3+0x24>
 6d4:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
 6d8:	51 11       	cpse	r21, r1
 6da:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_szero>
 6de:	0c 94 41 04 	jmp	0x882	; 0x882 <__fp_nan>

000006e2 <__divsf3x>:
 6e2:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_split3>
 6e6:	68 f3       	brcs	.-38     	; 0x6c2 <__divsf3+0x8>

000006e8 <__divsf3_pse>:
 6e8:	99 23       	and	r25, r25
 6ea:	b1 f3       	breq	.-20     	; 0x6d8 <__divsf3+0x1e>
 6ec:	55 23       	and	r21, r21
 6ee:	91 f3       	breq	.-28     	; 0x6d4 <__divsf3+0x1a>
 6f0:	95 1b       	sub	r25, r21
 6f2:	55 0b       	sbc	r21, r21
 6f4:	bb 27       	eor	r27, r27
 6f6:	aa 27       	eor	r26, r26
 6f8:	62 17       	cp	r22, r18
 6fa:	73 07       	cpc	r23, r19
 6fc:	84 07       	cpc	r24, r20
 6fe:	38 f0       	brcs	.+14     	; 0x70e <__divsf3_pse+0x26>
 700:	9f 5f       	subi	r25, 0xFF	; 255
 702:	5f 4f       	sbci	r21, 0xFF	; 255
 704:	22 0f       	add	r18, r18
 706:	33 1f       	adc	r19, r19
 708:	44 1f       	adc	r20, r20
 70a:	aa 1f       	adc	r26, r26
 70c:	a9 f3       	breq	.-22     	; 0x6f8 <__divsf3_pse+0x10>
 70e:	35 d0       	rcall	.+106    	; 0x77a <__divsf3_pse+0x92>
 710:	0e 2e       	mov	r0, r30
 712:	3a f0       	brmi	.+14     	; 0x722 <__divsf3_pse+0x3a>
 714:	e0 e8       	ldi	r30, 0x80	; 128
 716:	32 d0       	rcall	.+100    	; 0x77c <__divsf3_pse+0x94>
 718:	91 50       	subi	r25, 0x01	; 1
 71a:	50 40       	sbci	r21, 0x00	; 0
 71c:	e6 95       	lsr	r30
 71e:	00 1c       	adc	r0, r0
 720:	ca f7       	brpl	.-14     	; 0x714 <__divsf3_pse+0x2c>
 722:	2b d0       	rcall	.+86     	; 0x77a <__divsf3_pse+0x92>
 724:	fe 2f       	mov	r31, r30
 726:	29 d0       	rcall	.+82     	; 0x77a <__divsf3_pse+0x92>
 728:	66 0f       	add	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	88 1f       	adc	r24, r24
 72e:	bb 1f       	adc	r27, r27
 730:	26 17       	cp	r18, r22
 732:	37 07       	cpc	r19, r23
 734:	48 07       	cpc	r20, r24
 736:	ab 07       	cpc	r26, r27
 738:	b0 e8       	ldi	r27, 0x80	; 128
 73a:	09 f0       	breq	.+2      	; 0x73e <__divsf3_pse+0x56>
 73c:	bb 0b       	sbc	r27, r27
 73e:	80 2d       	mov	r24, r0
 740:	bf 01       	movw	r22, r30
 742:	ff 27       	eor	r31, r31
 744:	93 58       	subi	r25, 0x83	; 131
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	3a f0       	brmi	.+14     	; 0x758 <__divsf3_pse+0x70>
 74a:	9e 3f       	cpi	r25, 0xFE	; 254
 74c:	51 05       	cpc	r21, r1
 74e:	78 f0       	brcs	.+30     	; 0x76e <__divsf3_pse+0x86>
 750:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
 754:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_szero>
 758:	5f 3f       	cpi	r21, 0xFF	; 255
 75a:	e4 f3       	brlt	.-8      	; 0x754 <__divsf3_pse+0x6c>
 75c:	98 3e       	cpi	r25, 0xE8	; 232
 75e:	d4 f3       	brlt	.-12     	; 0x754 <__divsf3_pse+0x6c>
 760:	86 95       	lsr	r24
 762:	77 95       	ror	r23
 764:	67 95       	ror	r22
 766:	b7 95       	ror	r27
 768:	f7 95       	ror	r31
 76a:	9f 5f       	subi	r25, 0xFF	; 255
 76c:	c9 f7       	brne	.-14     	; 0x760 <__divsf3_pse+0x78>
 76e:	88 0f       	add	r24, r24
 770:	91 1d       	adc	r25, r1
 772:	96 95       	lsr	r25
 774:	87 95       	ror	r24
 776:	97 f9       	bld	r25, 7
 778:	08 95       	ret
 77a:	e1 e0       	ldi	r30, 0x01	; 1
 77c:	66 0f       	add	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	bb 1f       	adc	r27, r27
 784:	62 17       	cp	r22, r18
 786:	73 07       	cpc	r23, r19
 788:	84 07       	cpc	r24, r20
 78a:	ba 07       	cpc	r27, r26
 78c:	20 f0       	brcs	.+8      	; 0x796 <__divsf3_pse+0xae>
 78e:	62 1b       	sub	r22, r18
 790:	73 0b       	sbc	r23, r19
 792:	84 0b       	sbc	r24, r20
 794:	ba 0b       	sbc	r27, r26
 796:	ee 1f       	adc	r30, r30
 798:	88 f7       	brcc	.-30     	; 0x77c <__divsf3_pse+0x94>
 79a:	e0 95       	com	r30
 79c:	08 95       	ret

0000079e <__fixunssfsi>:
 79e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_splitA>
 7a2:	88 f0       	brcs	.+34     	; 0x7c6 <__fixunssfsi+0x28>
 7a4:	9f 57       	subi	r25, 0x7F	; 127
 7a6:	98 f0       	brcs	.+38     	; 0x7ce <__fixunssfsi+0x30>
 7a8:	b9 2f       	mov	r27, r25
 7aa:	99 27       	eor	r25, r25
 7ac:	b7 51       	subi	r27, 0x17	; 23
 7ae:	b0 f0       	brcs	.+44     	; 0x7dc <__fixunssfsi+0x3e>
 7b0:	e1 f0       	breq	.+56     	; 0x7ea <__fixunssfsi+0x4c>
 7b2:	66 0f       	add	r22, r22
 7b4:	77 1f       	adc	r23, r23
 7b6:	88 1f       	adc	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	1a f0       	brmi	.+6      	; 0x7c2 <__fixunssfsi+0x24>
 7bc:	ba 95       	dec	r27
 7be:	c9 f7       	brne	.-14     	; 0x7b2 <__fixunssfsi+0x14>
 7c0:	14 c0       	rjmp	.+40     	; 0x7ea <__fixunssfsi+0x4c>
 7c2:	b1 30       	cpi	r27, 0x01	; 1
 7c4:	91 f0       	breq	.+36     	; 0x7ea <__fixunssfsi+0x4c>
 7c6:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_zero>
 7ca:	b1 e0       	ldi	r27, 0x01	; 1
 7cc:	08 95       	ret
 7ce:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_zero>
 7d2:	67 2f       	mov	r22, r23
 7d4:	78 2f       	mov	r23, r24
 7d6:	88 27       	eor	r24, r24
 7d8:	b8 5f       	subi	r27, 0xF8	; 248
 7da:	39 f0       	breq	.+14     	; 0x7ea <__fixunssfsi+0x4c>
 7dc:	b9 3f       	cpi	r27, 0xF9	; 249
 7de:	cc f3       	brlt	.-14     	; 0x7d2 <__fixunssfsi+0x34>
 7e0:	86 95       	lsr	r24
 7e2:	77 95       	ror	r23
 7e4:	67 95       	ror	r22
 7e6:	b3 95       	inc	r27
 7e8:	d9 f7       	brne	.-10     	; 0x7e0 <__fixunssfsi+0x42>
 7ea:	3e f4       	brtc	.+14     	; 0x7fa <__fixunssfsi+0x5c>
 7ec:	90 95       	com	r25
 7ee:	80 95       	com	r24
 7f0:	70 95       	com	r23
 7f2:	61 95       	neg	r22
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255
 7f6:	8f 4f       	sbci	r24, 0xFF	; 255
 7f8:	9f 4f       	sbci	r25, 0xFF	; 255
 7fa:	08 95       	ret

000007fc <__floatunsisf>:
 7fc:	e8 94       	clt
 7fe:	09 c0       	rjmp	.+18     	; 0x812 <__floatsisf+0x12>

00000800 <__floatsisf>:
 800:	97 fb       	bst	r25, 7
 802:	3e f4       	brtc	.+14     	; 0x812 <__floatsisf+0x12>
 804:	90 95       	com	r25
 806:	80 95       	com	r24
 808:	70 95       	com	r23
 80a:	61 95       	neg	r22
 80c:	7f 4f       	sbci	r23, 0xFF	; 255
 80e:	8f 4f       	sbci	r24, 0xFF	; 255
 810:	9f 4f       	sbci	r25, 0xFF	; 255
 812:	99 23       	and	r25, r25
 814:	a9 f0       	breq	.+42     	; 0x840 <__floatsisf+0x40>
 816:	f9 2f       	mov	r31, r25
 818:	96 e9       	ldi	r25, 0x96	; 150
 81a:	bb 27       	eor	r27, r27
 81c:	93 95       	inc	r25
 81e:	f6 95       	lsr	r31
 820:	87 95       	ror	r24
 822:	77 95       	ror	r23
 824:	67 95       	ror	r22
 826:	b7 95       	ror	r27
 828:	f1 11       	cpse	r31, r1
 82a:	f8 cf       	rjmp	.-16     	; 0x81c <__floatsisf+0x1c>
 82c:	fa f4       	brpl	.+62     	; 0x86c <__floatsisf+0x6c>
 82e:	bb 0f       	add	r27, r27
 830:	11 f4       	brne	.+4      	; 0x836 <__floatsisf+0x36>
 832:	60 ff       	sbrs	r22, 0
 834:	1b c0       	rjmp	.+54     	; 0x86c <__floatsisf+0x6c>
 836:	6f 5f       	subi	r22, 0xFF	; 255
 838:	7f 4f       	sbci	r23, 0xFF	; 255
 83a:	8f 4f       	sbci	r24, 0xFF	; 255
 83c:	9f 4f       	sbci	r25, 0xFF	; 255
 83e:	16 c0       	rjmp	.+44     	; 0x86c <__floatsisf+0x6c>
 840:	88 23       	and	r24, r24
 842:	11 f0       	breq	.+4      	; 0x848 <__floatsisf+0x48>
 844:	96 e9       	ldi	r25, 0x96	; 150
 846:	11 c0       	rjmp	.+34     	; 0x86a <__floatsisf+0x6a>
 848:	77 23       	and	r23, r23
 84a:	21 f0       	breq	.+8      	; 0x854 <__floatsisf+0x54>
 84c:	9e e8       	ldi	r25, 0x8E	; 142
 84e:	87 2f       	mov	r24, r23
 850:	76 2f       	mov	r23, r22
 852:	05 c0       	rjmp	.+10     	; 0x85e <__floatsisf+0x5e>
 854:	66 23       	and	r22, r22
 856:	71 f0       	breq	.+28     	; 0x874 <__floatsisf+0x74>
 858:	96 e8       	ldi	r25, 0x86	; 134
 85a:	86 2f       	mov	r24, r22
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	60 e0       	ldi	r22, 0x00	; 0
 860:	2a f0       	brmi	.+10     	; 0x86c <__floatsisf+0x6c>
 862:	9a 95       	dec	r25
 864:	66 0f       	add	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	88 1f       	adc	r24, r24
 86a:	da f7       	brpl	.-10     	; 0x862 <__floatsisf+0x62>
 86c:	88 0f       	add	r24, r24
 86e:	96 95       	lsr	r25
 870:	87 95       	ror	r24
 872:	97 f9       	bld	r25, 7
 874:	08 95       	ret

00000876 <__fp_inf>:
 876:	97 f9       	bld	r25, 7
 878:	9f 67       	ori	r25, 0x7F	; 127
 87a:	80 e8       	ldi	r24, 0x80	; 128
 87c:	70 e0       	ldi	r23, 0x00	; 0
 87e:	60 e0       	ldi	r22, 0x00	; 0
 880:	08 95       	ret

00000882 <__fp_nan>:
 882:	9f ef       	ldi	r25, 0xFF	; 255
 884:	80 ec       	ldi	r24, 0xC0	; 192
 886:	08 95       	ret

00000888 <__fp_pscA>:
 888:	00 24       	eor	r0, r0
 88a:	0a 94       	dec	r0
 88c:	16 16       	cp	r1, r22
 88e:	17 06       	cpc	r1, r23
 890:	18 06       	cpc	r1, r24
 892:	09 06       	cpc	r0, r25
 894:	08 95       	ret

00000896 <__fp_pscB>:
 896:	00 24       	eor	r0, r0
 898:	0a 94       	dec	r0
 89a:	12 16       	cp	r1, r18
 89c:	13 06       	cpc	r1, r19
 89e:	14 06       	cpc	r1, r20
 8a0:	05 06       	cpc	r0, r21
 8a2:	08 95       	ret

000008a4 <__fp_round>:
 8a4:	09 2e       	mov	r0, r25
 8a6:	03 94       	inc	r0
 8a8:	00 0c       	add	r0, r0
 8aa:	11 f4       	brne	.+4      	; 0x8b0 <__fp_round+0xc>
 8ac:	88 23       	and	r24, r24
 8ae:	52 f0       	brmi	.+20     	; 0x8c4 <__fp_round+0x20>
 8b0:	bb 0f       	add	r27, r27
 8b2:	40 f4       	brcc	.+16     	; 0x8c4 <__fp_round+0x20>
 8b4:	bf 2b       	or	r27, r31
 8b6:	11 f4       	brne	.+4      	; 0x8bc <__fp_round+0x18>
 8b8:	60 ff       	sbrs	r22, 0
 8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <__fp_round+0x20>
 8bc:	6f 5f       	subi	r22, 0xFF	; 255
 8be:	7f 4f       	sbci	r23, 0xFF	; 255
 8c0:	8f 4f       	sbci	r24, 0xFF	; 255
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	08 95       	ret

000008c6 <__fp_split3>:
 8c6:	57 fd       	sbrc	r21, 7
 8c8:	90 58       	subi	r25, 0x80	; 128
 8ca:	44 0f       	add	r20, r20
 8cc:	55 1f       	adc	r21, r21
 8ce:	59 f0       	breq	.+22     	; 0x8e6 <__fp_splitA+0x10>
 8d0:	5f 3f       	cpi	r21, 0xFF	; 255
 8d2:	71 f0       	breq	.+28     	; 0x8f0 <__fp_splitA+0x1a>
 8d4:	47 95       	ror	r20

000008d6 <__fp_splitA>:
 8d6:	88 0f       	add	r24, r24
 8d8:	97 fb       	bst	r25, 7
 8da:	99 1f       	adc	r25, r25
 8dc:	61 f0       	breq	.+24     	; 0x8f6 <__fp_splitA+0x20>
 8de:	9f 3f       	cpi	r25, 0xFF	; 255
 8e0:	79 f0       	breq	.+30     	; 0x900 <__stack+0x1>
 8e2:	87 95       	ror	r24
 8e4:	08 95       	ret
 8e6:	12 16       	cp	r1, r18
 8e8:	13 06       	cpc	r1, r19
 8ea:	14 06       	cpc	r1, r20
 8ec:	55 1f       	adc	r21, r21
 8ee:	f2 cf       	rjmp	.-28     	; 0x8d4 <__fp_split3+0xe>
 8f0:	46 95       	lsr	r20
 8f2:	f1 df       	rcall	.-30     	; 0x8d6 <__fp_splitA>
 8f4:	08 c0       	rjmp	.+16     	; 0x906 <__stack+0x7>
 8f6:	16 16       	cp	r1, r22
 8f8:	17 06       	cpc	r1, r23
 8fa:	18 06       	cpc	r1, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	f1 cf       	rjmp	.-30     	; 0x8e2 <__fp_splitA+0xc>
 900:	86 95       	lsr	r24
 902:	71 05       	cpc	r23, r1
 904:	61 05       	cpc	r22, r1
 906:	08 94       	sec
 908:	08 95       	ret

0000090a <__fp_zero>:
 90a:	e8 94       	clt

0000090c <__fp_szero>:
 90c:	bb 27       	eor	r27, r27
 90e:	66 27       	eor	r22, r22
 910:	77 27       	eor	r23, r23
 912:	cb 01       	movw	r24, r22
 914:	97 f9       	bld	r25, 7
 916:	08 95       	ret

00000918 <__mulsf3>:
 918:	0e 94 9f 04 	call	0x93e	; 0x93e <__mulsf3x>
 91c:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_round>
 920:	0e 94 44 04 	call	0x888	; 0x888 <__fp_pscA>
 924:	38 f0       	brcs	.+14     	; 0x934 <__mulsf3+0x1c>
 926:	0e 94 4b 04 	call	0x896	; 0x896 <__fp_pscB>
 92a:	20 f0       	brcs	.+8      	; 0x934 <__mulsf3+0x1c>
 92c:	95 23       	and	r25, r21
 92e:	11 f0       	breq	.+4      	; 0x934 <__mulsf3+0x1c>
 930:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
 934:	0c 94 41 04 	jmp	0x882	; 0x882 <__fp_nan>
 938:	11 24       	eor	r1, r1
 93a:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_szero>

0000093e <__mulsf3x>:
 93e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_split3>
 942:	70 f3       	brcs	.-36     	; 0x920 <__mulsf3+0x8>

00000944 <__mulsf3_pse>:
 944:	95 9f       	mul	r25, r21
 946:	c1 f3       	breq	.-16     	; 0x938 <__mulsf3+0x20>
 948:	95 0f       	add	r25, r21
 94a:	50 e0       	ldi	r21, 0x00	; 0
 94c:	55 1f       	adc	r21, r21
 94e:	62 9f       	mul	r22, r18
 950:	f0 01       	movw	r30, r0
 952:	72 9f       	mul	r23, r18
 954:	bb 27       	eor	r27, r27
 956:	f0 0d       	add	r31, r0
 958:	b1 1d       	adc	r27, r1
 95a:	63 9f       	mul	r22, r19
 95c:	aa 27       	eor	r26, r26
 95e:	f0 0d       	add	r31, r0
 960:	b1 1d       	adc	r27, r1
 962:	aa 1f       	adc	r26, r26
 964:	64 9f       	mul	r22, r20
 966:	66 27       	eor	r22, r22
 968:	b0 0d       	add	r27, r0
 96a:	a1 1d       	adc	r26, r1
 96c:	66 1f       	adc	r22, r22
 96e:	82 9f       	mul	r24, r18
 970:	22 27       	eor	r18, r18
 972:	b0 0d       	add	r27, r0
 974:	a1 1d       	adc	r26, r1
 976:	62 1f       	adc	r22, r18
 978:	73 9f       	mul	r23, r19
 97a:	b0 0d       	add	r27, r0
 97c:	a1 1d       	adc	r26, r1
 97e:	62 1f       	adc	r22, r18
 980:	83 9f       	mul	r24, r19
 982:	a0 0d       	add	r26, r0
 984:	61 1d       	adc	r22, r1
 986:	22 1f       	adc	r18, r18
 988:	74 9f       	mul	r23, r20
 98a:	33 27       	eor	r19, r19
 98c:	a0 0d       	add	r26, r0
 98e:	61 1d       	adc	r22, r1
 990:	23 1f       	adc	r18, r19
 992:	84 9f       	mul	r24, r20
 994:	60 0d       	add	r22, r0
 996:	21 1d       	adc	r18, r1
 998:	82 2f       	mov	r24, r18
 99a:	76 2f       	mov	r23, r22
 99c:	6a 2f       	mov	r22, r26
 99e:	11 24       	eor	r1, r1
 9a0:	9f 57       	subi	r25, 0x7F	; 127
 9a2:	50 40       	sbci	r21, 0x00	; 0
 9a4:	9a f0       	brmi	.+38     	; 0x9cc <__mulsf3_pse+0x88>
 9a6:	f1 f0       	breq	.+60     	; 0x9e4 <__mulsf3_pse+0xa0>
 9a8:	88 23       	and	r24, r24
 9aa:	4a f0       	brmi	.+18     	; 0x9be <__mulsf3_pse+0x7a>
 9ac:	ee 0f       	add	r30, r30
 9ae:	ff 1f       	adc	r31, r31
 9b0:	bb 1f       	adc	r27, r27
 9b2:	66 1f       	adc	r22, r22
 9b4:	77 1f       	adc	r23, r23
 9b6:	88 1f       	adc	r24, r24
 9b8:	91 50       	subi	r25, 0x01	; 1
 9ba:	50 40       	sbci	r21, 0x00	; 0
 9bc:	a9 f7       	brne	.-22     	; 0x9a8 <__mulsf3_pse+0x64>
 9be:	9e 3f       	cpi	r25, 0xFE	; 254
 9c0:	51 05       	cpc	r21, r1
 9c2:	80 f0       	brcs	.+32     	; 0x9e4 <__mulsf3_pse+0xa0>
 9c4:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_inf>
 9c8:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_szero>
 9cc:	5f 3f       	cpi	r21, 0xFF	; 255
 9ce:	e4 f3       	brlt	.-8      	; 0x9c8 <__mulsf3_pse+0x84>
 9d0:	98 3e       	cpi	r25, 0xE8	; 232
 9d2:	d4 f3       	brlt	.-12     	; 0x9c8 <__mulsf3_pse+0x84>
 9d4:	86 95       	lsr	r24
 9d6:	77 95       	ror	r23
 9d8:	67 95       	ror	r22
 9da:	b7 95       	ror	r27
 9dc:	f7 95       	ror	r31
 9de:	e7 95       	ror	r30
 9e0:	9f 5f       	subi	r25, 0xFF	; 255
 9e2:	c1 f7       	brne	.-16     	; 0x9d4 <__mulsf3_pse+0x90>
 9e4:	fe 2b       	or	r31, r30
 9e6:	88 0f       	add	r24, r24
 9e8:	91 1d       	adc	r25, r1
 9ea:	96 95       	lsr	r25
 9ec:	87 95       	ror	r24
 9ee:	97 f9       	bld	r25, 7
 9f0:	08 95       	ret

000009f2 <_exit>:
 9f2:	f8 94       	cli

000009f4 <__stop_program>:
 9f4:	ff cf       	rjmp	.-2      	; 0x9f4 <__stop_program>
