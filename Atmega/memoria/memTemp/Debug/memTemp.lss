
memTemp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000460  000004f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000460  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000004f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e06  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000890  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007cf  00000000  00000000  00001cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  000024a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052a  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f7  00000000  00000000  00002bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000031b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0d 02 	call	0x41a	; 0x41a <main>
  9e:	0c 94 2e 02 	jmp	0x45c	; 0x45c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <shift10bits>:
	}
}

void TWI_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
  a6:	9c 01       	movw	r18, r24
  a8:	5a 9a       	sbi	0x0b, 2	; 11
  aa:	9a e0       	ldi	r25, 0x0A	; 10
  ac:	5b 98       	cbi	0x0b, 3	; 11
  ae:	31 ff       	sbrs	r19, 1
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <shift10bits+0x10>
  b2:	5c 9a       	sbi	0x0b, 4	; 11
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <shift10bits+0x12>
  b6:	5c 98       	cbi	0x0b, 4	; 11
  b8:	5b 9a       	sbi	0x0b, 3	; 11
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	91 50       	subi	r25, 0x01	; 1
  c0:	a9 f7       	brne	.-22     	; 0xac <shift10bits+0x6>
  c2:	5b 98       	cbi	0x0b, 3	; 11
  c4:	5c 98       	cbi	0x0b, 4	; 11
  c6:	08 95       	ret

000000c8 <shiftdata>:
  c8:	98 e0       	ldi	r25, 0x08	; 8
  ca:	5b 98       	cbi	0x0b, 3	; 11
  cc:	88 23       	and	r24, r24
  ce:	14 f4       	brge	.+4      	; 0xd4 <shiftdata+0xc>
  d0:	5c 9a       	sbi	0x0b, 4	; 11
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <shiftdata+0xe>
  d4:	5c 98       	cbi	0x0b, 4	; 11
  d6:	5b 9a       	sbi	0x0b, 3	; 11
  d8:	88 0f       	add	r24, r24
  da:	91 50       	subi	r25, 0x01	; 1
  dc:	b1 f7       	brne	.-20     	; 0xca <shiftdata+0x2>
  de:	5b 98       	cbi	0x0b, 3	; 11
  e0:	5c 98       	cbi	0x0b, 4	; 11
  e2:	08 95       	ret

000000e4 <getOutput>:
  e4:	27 e0       	ldi	r18, 0x07	; 7
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	5b 98       	cbi	0x0b, 3	; 11
  f0:	5b 9a       	sbi	0x0b, 3	; 11
  f2:	4d 9b       	sbis	0x09, 5	; 9
  f4:	08 c0       	rjmp	.+16     	; 0x106 <getOutput+0x22>
  f6:	ab 01       	movw	r20, r22
  f8:	02 2e       	mov	r0, r18
  fa:	02 c0       	rjmp	.+4      	; 0x100 <getOutput+0x1c>
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <getOutput+0x18>
 104:	84 2b       	or	r24, r20
 106:	21 50       	subi	r18, 0x01	; 1
 108:	31 09       	sbc	r19, r1
 10a:	88 f7       	brcc	.-30     	; 0xee <getOutput+0xa>
 10c:	5b 98       	cbi	0x0b, 3	; 11
 10e:	5a 98       	cbi	0x0b, 2	; 11
 110:	08 95       	ret

00000112 <read_EEPROM>:
 112:	cf 93       	push	r28
 114:	c8 2f       	mov	r28, r24
 116:	8f 77       	andi	r24, 0x7F	; 127
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	97 60       	ori	r25, 0x07	; 7
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <shift10bits>
 120:	8c 2f       	mov	r24, r28
 122:	0e 94 72 00 	call	0xe4	; 0xe4 <getOutput>
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <write_byte>:
 12a:	cf 93       	push	r28
 12c:	c6 2f       	mov	r28, r22
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	80 68       	ori	r24, 0x80	; 128
 132:	92 60       	ori	r25, 0x02	; 2
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <shift10bits>
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 64 00 	call	0xc8	; 0xc8 <shiftdata>
 13e:	5a 98       	cbi	0x0b, 2	; 11
 140:	5a 9a       	sbi	0x0b, 2	; 11
 142:	89 b1       	in	r24, 0x09	; 9
 144:	88 23       	and	r24, r24
 146:	e9 f3       	breq	.-6      	; 0x142 <write_byte+0x18>
 148:	5a 98       	cbi	0x0b, 2	; 11
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <EWEN>:
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	92 e0       	ldi	r25, 0x02	; 2
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <shift10bits>
 156:	5a 98       	cbi	0x0b, 2	; 11
 158:	08 95       	ret

0000015a <EWDS>:
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	92 e0       	ldi	r25, 0x02	; 2
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <shift10bits>
 162:	5a 98       	cbi	0x0b, 2	; 11
 164:	08 95       	ret

00000166 <timerInit>:
 166:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 16a:	8d e0       	ldi	r24, 0x0D	; 13
 16c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 170:	ef e6       	ldi	r30, 0x6F	; 111
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	82 60       	ori	r24, 0x02	; 2
 178:	80 83       	st	Z, r24
 17a:	83 e1       	ldi	r24, 0x13	; 19
 17c:	93 e1       	ldi	r25, 0x13	; 19
 17e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 182:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 186:	08 95       	ret

00000188 <TWI_init>:
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 18e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 198:	08 95       	ret

0000019a <TWI_Start>:
 19a:	84 ee       	ldi	r24, 0xE4	; 228
 19c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1a0:	ec eb       	ldi	r30, 0xBC	; 188
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	88 23       	and	r24, r24
 1a8:	ec f7       	brge	.-6      	; 0x1a4 <TWI_Start+0xa>
 1aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1ae:	08 95       	ret

000001b0 <TWI_Repeat_Start>:
 1b0:	84 ee       	ldi	r24, 0xE4	; 228
 1b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1b6:	ec eb       	ldi	r30, 0xBC	; 188
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	88 23       	and	r24, r24
 1be:	ec f7       	brge	.-6      	; 0x1ba <TWI_Repeat_Start+0xa>
 1c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1c4:	08 95       	ret

000001c6 <TWI_RegisterSelect>:
}

void TWI_RegisterSelect(uint8_t addr, uint8_t reg)
{
	TWDR = (addr<<1) | 0x00; // Last bit = 0 (Write)
 1c6:	88 0f       	add	r24, r24
 1c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 1cc:	84 e8       	ldi	r24, 0x84	; 132
 1ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR&(1<<TWINT)));
 1d2:	ec eb       	ldi	r30, 0xBC	; 188
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	88 23       	and	r24, r24
 1da:	ec f7       	brge	.-6      	; 0x1d6 <TWI_RegisterSelect+0x10>
	if((TWSR & 0xF8) != 0x18)
 1dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1e0:	88 7f       	andi	r24, 0xF8	; 248
 1e2:	88 31       	cpi	r24, 0x18	; 24
 1e4:	61 f4       	brne	.+24     	; 0x1fe <TWI_RegisterSelect+0x38>
		Error();
	}
	else
	{
		Success();
		TWDR = reg; // Register to Write
 1e6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
		TWCR = (1<<TWINT) | (1<<TWEN);
 1ea:	84 e8       	ldi	r24, 0x84	; 132
 1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(!(TWCR&(1<<TWINT)));
 1f0:	ec eb       	ldi	r30, 0xBC	; 188
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	88 23       	and	r24, r24
 1f8:	ec f7       	brge	.-6      	; 0x1f4 <TWI_RegisterSelect+0x2e>
		if((TWSR & 0xF8) != 0x28)
 1fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1fe:	08 95       	ret

00000200 <TWI_Read>:
	}
}

int TWI_Read(uint8_t addr, uint8_t N_ACK)
{
	TWDR = (addr<<1) | 0x01; // Last bit = 1 (Read)
 200:	88 0f       	add	r24, r24
 202:	81 60       	ori	r24, 0x01	; 1
 204:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 208:	84 e8       	ldi	r24, 0x84	; 132
 20a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR&(1<<TWINT)));
 20e:	ec eb       	ldi	r30, 0xBC	; 188
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	88 23       	and	r24, r24
 216:	ec f7       	brge	.-6      	; 0x212 <TWI_Read+0x12>
	if((TWSR & 0xF8) != 0x40)
 218:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 21c:	88 7f       	andi	r24, 0xF8	; 248
 21e:	80 34       	cpi	r24, 0x40	; 64
 220:	99 f4       	brne	.+38     	; 0x248 <TWI_Read+0x48>
		Error();
	}
	else
	{
		Success();
		TWCR = (1<<TWINT) | (1<<TWEN) | (N_ACK<<TWEA);
 222:	20 e4       	ldi	r18, 0x40	; 64
 224:	62 9f       	mul	r22, r18
 226:	c0 01       	movw	r24, r0
 228:	11 24       	eor	r1, r1
 22a:	84 68       	ori	r24, 0x84	; 132
 22c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(!(TWCR&(1<<TWINT)));
 230:	ec eb       	ldi	r30, 0xBC	; 188
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	88 23       	and	r24, r24
 238:	ec f7       	brge	.-6      	; 0x234 <TWI_Read+0x34>

		if(N_ACK == 1) // Read Again
 23a:	61 30       	cpi	r22, 0x01	; 1
 23c:	19 f4       	brne	.+6      	; 0x244 <TWI_Read+0x44>
		{
			if((TWSR & 0xF8) != 0x50)
 23e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 242:	02 c0       	rjmp	.+4      	; 0x248 <TWI_Read+0x48>
			}

		}
		else
		{
			if((TWSR & 0xF8) != 0x58)
 244:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
				Success();
			}
		}
	}

	return(TWDR);
 248:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	08 95       	ret

00000250 <TWI_Write>:

void TWI_Write(uint8_t data)
{
	TWDR = data; // Write data on previous selected register
 250:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 254:	84 e8       	ldi	r24, 0x84	; 132
 256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR&(1<<TWINT)));
 25a:	ec eb       	ldi	r30, 0xBC	; 188
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	88 23       	and	r24, r24
 262:	ec f7       	brge	.-6      	; 0x25e <TWI_Write+0xe>
	if((TWSR & 0xF8) != 0x28)
 264:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 268:	08 95       	ret

0000026a <DS1621_Init>:

}

void DS1621_Init()
{
	TWI_Start();
 26a:	0e 94 cd 00 	call	0x19a	; 0x19a <TWI_Start>
	TWI_RegisterSelect(DS1621, ACCESS_CONFIG);
 26e:	6c ea       	ldi	r22, 0xAC	; 172
 270:	88 e4       	ldi	r24, 0x48	; 72
 272:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <TWI_RegisterSelect>
	TWI_Write(0x03); // LSB (1SHOT) set to 1 = 1-shot mode conversions and POL = 1
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	0e 94 28 01 	call	0x250	; 0x250 <TWI_Write>
	}
}

void TWI_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
 27c:	84 e9       	ldi	r24, 0x94	; 148
 27e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 282:	08 95       	ret

00000284 <readTemperature>:
	
	TWI_Stop();
}

char readTemperature()
{
 284:	cf 93       	push	r28
	char temperatureMSB;
	char temperatureLSB;
	
	TWI_Start();
 286:	0e 94 cd 00 	call	0x19a	; 0x19a <TWI_Start>
	TWI_RegisterSelect(DS1621, START_CONVERT_T);
 28a:	6e ee       	ldi	r22, 0xEE	; 238
 28c:	88 e4       	ldi	r24, 0x48	; 72
 28e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <TWI_RegisterSelect>
	// No further data is required
	
	TWI_Repeat_Start();
 292:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <TWI_Repeat_Start>
	TWI_RegisterSelect(DS1621, READ_TEMPERATURE);
 296:	6a ea       	ldi	r22, 0xAA	; 170
 298:	88 e4       	ldi	r24, 0x48	; 72
 29a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <TWI_RegisterSelect>
	TWI_Repeat_Start();
 29e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <TWI_Repeat_Start>
	temperatureMSB = TWI_Read(DS1621, NACK); // ACK not required
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	88 e4       	ldi	r24, 0x48	; 72
 2a6:	0e 94 00 01 	call	0x200	; 0x200 <TWI_Read>
 2aa:	c8 2f       	mov	r28, r24
	temperatureLSB = TWI_Read(DS1621, NACK); // ACK not required
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	88 e4       	ldi	r24, 0x48	; 72
 2b0:	0e 94 00 01 	call	0x200	; 0x200 <TWI_Read>
	}
}

void TWI_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
 2b4:	84 e9       	ldi	r24, 0x94	; 148
 2b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	temperatureLSB = TWI_Read(DS1621, NACK); // ACK not required
	
	TWI_Stop();
	
	return temperatureMSB;
}
 2ba:	8c 2f       	mov	r24, r28
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
	char temperature;
	uint8_t temp;
	PORTD ^= (1<<PIND6);
 2e6:	9b b1       	in	r25, 0x0b	; 11
 2e8:	80 e4       	ldi	r24, 0x40	; 64
 2ea:	89 27       	eor	r24, r25
 2ec:	8b b9       	out	0x0b, r24	; 11
	temperature = readTemperature();
 2ee:	0e 94 42 01 	call	0x284	; 0x284 <readTemperature>
 2f2:	c8 2f       	mov	r28, r24
	EWEN();
 2f4:	0e 94 a7 00 	call	0x14e	; 0x14e <EWEN>
	
	if (temperature > maxTemp){
 2f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2fc:	8c 17       	cp	r24, r28
 2fe:	a0 f4       	brcc	.+40     	; 0x328 <__vector_11+0x68>
		temp = read_EEPROM(MEMORY_SIZE) +1;
 300:	84 e6       	ldi	r24, 0x64	; 100
 302:	0e 94 89 00 	call	0x112	; 0x112 <read_EEPROM>
 306:	d8 2f       	mov	r29, r24
		write_byte(MEMORY_SIZE+1, temperature); // Almacenando temperatura maxima
 308:	6c 2f       	mov	r22, r28
 30a:	85 e6       	ldi	r24, 0x65	; 101
 30c:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
		write_byte(MEMORY_SIZE+2, ((int)count+1)*(int)temp);
 310:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	6d 0f       	add	r22, r29
 318:	68 9f       	mul	r22, r24
 31a:	60 0d       	add	r22, r0
 31c:	11 24       	eor	r1, r1
 31e:	86 e6       	ldi	r24, 0x66	; 102
 320:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
		maxTemp = temperature;
 324:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__data_end>
	}
	if (temperature < minTemp){
 328:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 32c:	c8 17       	cp	r28, r24
 32e:	a0 f4       	brcc	.+40     	; 0x358 <__vector_11+0x98>
		temp = read_EEPROM(MEMORY_SIZE) +1;
 330:	84 e6       	ldi	r24, 0x64	; 100
 332:	0e 94 89 00 	call	0x112	; 0x112 <read_EEPROM>
 336:	d8 2f       	mov	r29, r24
		write_byte(MEMORY_SIZE+3, temperature); // Almacenando temperatura minima
 338:	6c 2f       	mov	r22, r28
 33a:	87 e6       	ldi	r24, 0x67	; 103
 33c:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
		write_byte(MEMORY_SIZE+4, ((int)count+1)*(int)temp); // Almacenando tiempo
 340:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	6d 0f       	add	r22, r29
 348:	68 9f       	mul	r22, r24
 34a:	60 0d       	add	r22, r0
 34c:	11 24       	eor	r1, r1
 34e:	88 e6       	ldi	r24, 0x68	; 104
 350:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
		minTemp = temperature;
 354:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
	}
		
	write_byte(count, temperature); // Almacenar temperatura
 358:	6c 2f       	mov	r22, r28
 35a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 35e:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	count++;
 362:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 366:	8f 5f       	subi	r24, 0xFF	; 255
	if (count >= MEMORY_SIZE){
 368:	84 36       	cpi	r24, 0x64	; 100
 36a:	18 f4       	brcc	.+6      	; 0x372 <__vector_11+0xb2>
		write_byte(MEMORY_SIZE+4, ((int)count+1)*(int)temp); // Almacenando tiempo
		minTemp = temperature;
	}
		
	write_byte(count, temperature); // Almacenar temperatura
	count++;
 36c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <count>
 370:	0a c0       	rjmp	.+20     	; 0x386 <__vector_11+0xc6>
	if (count >= MEMORY_SIZE){
		count = 0;
 372:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count>
		temp = read_EEPROM(MEMORY_SIZE);
 376:	84 e6       	ldi	r24, 0x64	; 100
 378:	0e 94 89 00 	call	0x112	; 0x112 <read_EEPROM>
		write_byte(MEMORY_SIZE, temp+1);	
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	68 0f       	add	r22, r24
 380:	84 e6       	ldi	r24, 0x64	; 100
 382:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	}
	
	EWDS();
 386:	0e 94 ad 00 	call	0x15a	; 0x15a <EWDS>
}
 38a:	ff 91       	pop	r31
 38c:	ef 91       	pop	r30
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	bf 91       	pop	r27
 394:	af 91       	pop	r26
 396:	9f 91       	pop	r25
 398:	8f 91       	pop	r24
 39a:	7f 91       	pop	r23
 39c:	6f 91       	pop	r22
 39e:	5f 91       	pop	r21
 3a0:	4f 91       	pop	r20
 3a2:	3f 91       	pop	r19
 3a4:	2f 91       	pop	r18
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <readhundredtemp>:
	}
}


void readhundredtemp()
{
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
	char temperature;
	uint8_t contar = 0;
	
	
	// verificar si ya tiene 100 datos
	contar = read_EEPROM(MEMORY_SIZE); // direccion del contador de cuantas veces se llego a 100 datos
 3b4:	84 e6       	ldi	r24, 0x64	; 100
 3b6:	0e 94 89 00 	call	0x112	; 0x112 <read_EEPROM>
 3ba:	c8 2f       	mov	r28, r24
	if(contar > 0){
 3bc:	81 11       	cpse	r24, r1
 3be:	05 c0       	rjmp	.+10     	; 0x3ca <readhundredtemp+0x1a>
		// If there aren't 100 data, read all temperature saved until the moment
		
		contar = 0; // antiguo a reciente
		//contar = count; // reciente a antiguo
		
		for(uint8_t i = 0; i < count; i++)
 3c0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 3c4:	81 11       	cpse	r24, r1
 3c6:	1a c0       	rjmp	.+52     	; 0x3fc <readhundredtemp+0x4c>
 3c8:	25 c0       	rjmp	.+74     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	contar = read_EEPROM(MEMORY_SIZE); // direccion del contador de cuantas veces se llego a 100 datos
	if(contar > 0){
		// If the memory have already saved more than 100 data.
		
		// Elegir entre ultimo a reciente o de reciente a ultimo valor guardado
		contar = (count + 1 >= MEMORY_SIZE)? 0: count + 1; // de mas antiguo a reciente
 3ca:	c0 91 03 01 	lds	r28, 0x0103	; 0x800103 <count>
 3ce:	8c 2f       	mov	r24, r28
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	84 36       	cpi	r24, 0x64	; 100
 3d6:	91 05       	cpc	r25, r1
 3d8:	d4 f4       	brge	.+52     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3da:	cf 5f       	subi	r28, 0xFF	; 255
 3dc:	19 c0       	rjmp	.+50     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		//contar = ((count - 1 < 0) || (count - 1 >= MEMORY_SIZE))? MEMORY_SIZE - 1: count; // de mas reciente a antiguo
		
		for(uint8_t i = 0; i < MEMORY_SIZE; i++)
		{
			temperature = read_EEPROM(contar);
 3de:	8c 2f       	mov	r24, r28
 3e0:	0e 94 89 00 	call	0x112	; 0x112 <read_EEPROM>
		
			// Write program to use temperature;
			
			
			// Elegir entre ultimo a reciente o de reciente a ultimo valor guardado
			contar = (contar + 1 >= MEMORY_SIZE)? 0: contar + 1; // de mas antiguo a reciente
 3e4:	8c 2f       	mov	r24, r28
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	84 36       	cpi	r24, 0x64	; 100
 3ec:	91 05       	cpc	r25, r1
 3ee:	14 f4       	brge	.+4      	; 0x3f4 <readhundredtemp+0x44>
 3f0:	cf 5f       	subi	r28, 0xFF	; 255
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <readhundredtemp+0x46>
 3f4:	c0 e0       	ldi	r28, 0x00	; 0
 3f6:	d1 50       	subi	r29, 0x01	; 1
		
		// Elegir entre ultimo a reciente o de reciente a ultimo valor guardado
		contar = (count + 1 >= MEMORY_SIZE)? 0: count + 1; // de mas antiguo a reciente
		//contar = ((count - 1 < 0) || (count - 1 >= MEMORY_SIZE))? MEMORY_SIZE - 1: count; // de mas reciente a antiguo
		
		for(uint8_t i = 0; i < MEMORY_SIZE; i++)
 3f8:	91 f7       	brne	.-28     	; 0x3de <readhundredtemp+0x2e>
 3fa:	0c c0       	rjmp	.+24     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		contar = 0; // antiguo a reciente
		//contar = count; // reciente a antiguo
		
		for(uint8_t i = 0; i < count; i++)
		{
			temperature = read_EEPROM(contar);
 3fc:	8c 2f       	mov	r24, r28
 3fe:	0e 94 89 00 	call	0x112	; 0x112 <read_EEPROM>
			
			// Write program to use temperature
			
			contar++; // antiguo a reciente
 402:	cf 5f       	subi	r28, 0xFF	; 255
		// If there aren't 100 data, read all temperature saved until the moment
		
		contar = 0; // antiguo a reciente
		//contar = count; // reciente a antiguo
		
		for(uint8_t i = 0; i < count; i++)
 404:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count>
 408:	c8 17       	cp	r28, r24
 40a:	c0 f3       	brcs	.-16     	; 0x3fc <readhundredtemp+0x4c>
 40c:	03 c0       	rjmp	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	contar = read_EEPROM(MEMORY_SIZE); // direccion del contador de cuantas veces se llego a 100 datos
	if(contar > 0){
		// If the memory have already saved more than 100 data.
		
		// Elegir entre ultimo a reciente o de reciente a ultimo valor guardado
		contar = (count + 1 >= MEMORY_SIZE)? 0: count + 1; // de mas antiguo a reciente
 40e:	c0 e0       	ldi	r28, 0x00	; 0
	}
}


void readhundredtemp()
{
 410:	d4 e6       	ldi	r29, 0x64	; 100
 412:	e5 cf       	rjmp	.-54     	; 0x3de <readhundredtemp+0x2e>
			//contar--;  // reciente a antiguo
		}	
		
	}
	
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <main>:

void readhundredtemp();

int main(void)
{	
	TWI_init();
 41a:	0e 94 c4 00 	call	0x188	; 0x188 <TWI_init>
	DS1621_Init();
 41e:	0e 94 35 01 	call	0x26a	; 0x26a <DS1621_Init>
	
	DDRD |= (1 << MOSI) | (1 << CLK) | (1 << SELECT); // MOSI, CLK, SELECT(CS) SALIDAS
 422:	8a b1       	in	r24, 0x0a	; 10
 424:	8c 61       	ori	r24, 0x1C	; 28
 426:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PIND5); // MISO ENTRADA
 428:	55 98       	cbi	0x0a, 5	; 10
	
	PORTD &= ~(1 << CLK); // clk = 0
 42a:	5b 98       	cbi	0x0b, 3	; 11
	
	// LEDs
	DDRD |= (1 << 6);
 42c:	56 9a       	sbi	0x0a, 6	; 10
		
	sei();
 42e:	78 94       	sei
	timerInit();
 430:	0e 94 b3 00 	call	0x166	; 0x166 <timerInit>
	
	EWEN();
 434:	0e 94 a7 00 	call	0x14e	; 0x14e <EWEN>
	
	write_byte(MEMORY_SIZE, 0x00);
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	84 e6       	ldi	r24, 0x64	; 100
 43c:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	
	EWDS();
 440:	0e 94 ad 00 	call	0x15a	; 0x15a <EWDS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 444:	2f ef       	ldi	r18, 0xFF	; 255
 446:	8a e1       	ldi	r24, 0x1A	; 26
 448:	97 eb       	ldi	r25, 0xB7	; 183
 44a:	21 50       	subi	r18, 0x01	; 1
 44c:	80 40       	sbci	r24, 0x00	; 0
 44e:	90 40       	sbci	r25, 0x00	; 0
 450:	e1 f7       	brne	.-8      	; 0x44a <main+0x30>
 452:	00 c0       	rjmp	.+0      	; 0x454 <main+0x3a>
 454:	00 00       	nop
	
	while (1)
	{
		
		_delay_ms(60000);
		readhundredtemp();
 456:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <readhundredtemp>
 45a:	f4 cf       	rjmp	.-24     	; 0x444 <main+0x2a>

0000045c <_exit>:
 45c:	f8 94       	cli

0000045e <__stop_program>:
 45e:	ff cf       	rjmp	.-2      	; 0x45e <__stop_program>
