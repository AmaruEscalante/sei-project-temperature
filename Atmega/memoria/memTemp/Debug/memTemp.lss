
memTemp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000bc6  00000c5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000077  00800104  00800104  00000c5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001494  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6b  00000000  00000000  000022b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b96  00000000  00000000  00002d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  000038b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064b  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae5  00000000  00000000  00004293  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00004d78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 37       	cpi	r26, 0x7B	; 123
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9c 03 	call	0x738	; 0x738 <main>
  9e:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <crc_calculate>:
uint8_t crc_calculate(uint8_t datos[], int len){
	uint8_t crc_value = 0x00;	
	uint8_t temp  = 0x00;
	uint8_t sum = 0x00;
	
	for(int i=0; i<len; i++)
  a6:	16 16       	cp	r1, r22
  a8:	17 06       	cpc	r1, r23
  aa:	a4 f4       	brge	.+40     	; 0xd4 <crc_calculate+0x2e>
		for (uint8_t j=0; j<8; j++)
		{
			sum = (crc_value ^ temp) & 0x01; //xor
			crc_value >>= 1; // shift right
			if (sum)
			crc_value ^= key; // xor
  ac:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
  b0:	fc 01       	movw	r30, r24
  b2:	68 0f       	add	r22, r24
  b4:	79 1f       	adc	r23, r25
  b6:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t temp  = 0x00;
	uint8_t sum = 0x00;
	
	for(int i=0; i<len; i++)
	{
		temp = datos[i];
  b8:	21 91       	ld	r18, Z+
  ba:	98 e0       	ldi	r25, 0x08	; 8
		
		for (uint8_t j=0; j<8; j++)
		{
			sum = (crc_value ^ temp) & 0x01; //xor
  bc:	38 2f       	mov	r19, r24
  be:	32 27       	eor	r19, r18
			crc_value >>= 1; // shift right
  c0:	86 95       	lsr	r24
			if (sum)
  c2:	30 fd       	sbrc	r19, 0
			crc_value ^= key; // xor
  c4:	84 27       	eor	r24, r20
			temp >>= 1; // shift right
  c6:	26 95       	lsr	r18
  c8:	91 50       	subi	r25, 0x01	; 1
	
	for(int i=0; i<len; i++)
	{
		temp = datos[i];
		
		for (uint8_t j=0; j<8; j++)
  ca:	c1 f7       	brne	.-16     	; 0xbc <crc_calculate+0x16>
uint8_t crc_calculate(uint8_t datos[], int len){
	uint8_t crc_value = 0x00;	
	uint8_t temp  = 0x00;
	uint8_t sum = 0x00;
	
	for(int i=0; i<len; i++)
  cc:	e6 17       	cp	r30, r22
  ce:	f7 07       	cpc	r31, r23
  d0:	99 f7       	brne	.-26     	; 0xb8 <crc_calculate+0x12>
  d2:	08 95       	ret

// polynomial
uint8_t key = 0x8C; // 1000 1100 -> x^7 + x^3 + x^2

uint8_t crc_calculate(uint8_t datos[], int len){
	uint8_t crc_value = 0x00;	
  d4:	80 e0       	ldi	r24, 0x00	; 0
			temp >>= 1; // shift right
		}
	}
	
	return crc_value;
}
  d6:	08 95       	ret

000000d8 <I2C_setCallbacks>:
{
  // clear acknowledge and enable bits
  cli();
  TWCR = 0;
  TWAR = 0;
  sei();
  d8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <I2C_recv+0x1>
  dc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <I2C_recv>
  e0:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
  e4:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
  e8:	08 95       	ret

000000ea <I2C_init>:
  ea:	f8 94       	cli
  ec:	88 0f       	add	r24, r24
  ee:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
  f2:	85 ec       	ldi	r24, 0xC5	; 197
  f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  f8:	78 94       	sei
  fa:	08 95       	ret

000000fc <__vector_24>:
}

ISR(TWI_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	4f 93       	push	r20
 10c:	5f 93       	push	r21
 10e:	6f 93       	push	r22
 110:	7f 93       	push	r23
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
  switch(TW_STATUS)
 11e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 122:	88 7f       	andi	r24, 0xF8	; 248
 124:	80 38       	cpi	r24, 0x80	; 128
 126:	49 f0       	breq	.+18     	; 0x13a <__vector_24+0x3e>
 128:	18 f4       	brcc	.+6      	; 0x130 <__vector_24+0x34>
 12a:	88 23       	and	r24, r24
 12c:	19 f1       	breq	.+70     	; 0x174 <__vector_24+0x78>
 12e:	28 c0       	rjmp	.+80     	; 0x180 <__vector_24+0x84>
 130:	88 3a       	cpi	r24, 0xA8	; 168
 132:	71 f0       	breq	.+28     	; 0x150 <__vector_24+0x54>
 134:	88 3b       	cpi	r24, 0xB8	; 184
 136:	a9 f0       	breq	.+42     	; 0x162 <__vector_24+0x66>
 138:	23 c0       	rjmp	.+70     	; 0x180 <__vector_24+0x84>
  {
    case TW_SR_DATA_ACK:
      // received data from master, call the receive callback
      I2C_recv(TWDR); 
 13a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 13e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <I2C_recv>
 142:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <I2C_recv+0x1>
 146:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 148:	85 ec       	ldi	r24, 0xC5	; 197
 14a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
      break;
 14e:	1b c0       	rjmp	.+54     	; 0x186 <__vector_24+0x8a>
    case TW_ST_SLA_ACK:
      // master is requesting data, call the request callback
      I2C_req();
 150:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 154:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <__data_end+0x1>
 158:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 15a:	85 ec       	ldi	r24, 0xC5	; 197
 15c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
      break;
 160:	12 c0       	rjmp	.+36     	; 0x186 <__vector_24+0x8a>
    case TW_ST_DATA_ACK:
      // master is requesting data, call the request callback
      I2C_req();
 162:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 166:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <__data_end+0x1>
 16a:	09 95       	icall
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 16c:	85 ec       	ldi	r24, 0xC5	; 197
 16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
      break;
 172:	09 c0       	rjmp	.+18     	; 0x186 <__vector_24+0x8a>
    case TW_BUS_ERROR:
      // some sort of erroneous state, prepare TWI to be readdressed
      TWCR = 0;
 174:	ec eb       	ldi	r30, 0xBC	; 188
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	10 82       	st	Z, r1
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN); 
 17a:	85 ec       	ldi	r24, 0xC5	; 197
 17c:	80 83       	st	Z, r24
      break;
 17e:	03 c0       	rjmp	.+6      	; 0x186 <__vector_24+0x8a>
    default:
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 180:	85 ec       	ldi	r24, 0xC5	; 197
 182:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
      break;
  }
} 
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <I2C_received>:
	}
}

void TWI_Stop()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 1a8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <command>
 1ac:	08 95       	ret

000001ae <SR_Interrupt_init>:
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 1b4:	8d bb       	out	0x1d, r24	; 29
 1b6:	08 95       	ret

000001b8 <shift10bits>:
 1b8:	9c 01       	movw	r18, r24
 1ba:	5e 9a       	sbi	0x0b, 6	; 11
 1bc:	9a e0       	ldi	r25, 0x0A	; 10
 1be:	5b 98       	cbi	0x0b, 3	; 11
 1c0:	31 ff       	sbrs	r19, 1
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <shift10bits+0x10>
 1c4:	5c 9a       	sbi	0x0b, 4	; 11
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <shift10bits+0x12>
 1c8:	5c 98       	cbi	0x0b, 4	; 11
 1ca:	5b 9a       	sbi	0x0b, 3	; 11
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	91 50       	subi	r25, 0x01	; 1
 1d4:	a1 f7       	brne	.-24     	; 0x1be <shift10bits+0x6>
 1d6:	5b 98       	cbi	0x0b, 3	; 11
 1d8:	5c 98       	cbi	0x0b, 4	; 11
 1da:	08 95       	ret

000001dc <shiftdata>:
 1dc:	98 e0       	ldi	r25, 0x08	; 8
 1de:	5b 98       	cbi	0x0b, 3	; 11
 1e0:	88 23       	and	r24, r24
 1e2:	14 f4       	brge	.+4      	; 0x1e8 <shiftdata+0xc>
 1e4:	5c 9a       	sbi	0x0b, 4	; 11
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <shiftdata+0xe>
 1e8:	5c 98       	cbi	0x0b, 4	; 11
 1ea:	5b 9a       	sbi	0x0b, 3	; 11
 1ec:	2b b1       	in	r18, 0x0b	; 11
 1ee:	88 0f       	add	r24, r24
 1f0:	91 50       	subi	r25, 0x01	; 1
 1f2:	a9 f7       	brne	.-22     	; 0x1de <shiftdata+0x2>
 1f4:	5b 98       	cbi	0x0b, 3	; 11
 1f6:	5c 98       	cbi	0x0b, 4	; 11
 1f8:	08 95       	ret

000001fa <getOutput>:
 1fa:	27 e0       	ldi	r18, 0x07	; 7
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	5b 98       	cbi	0x0b, 3	; 11
 206:	5b 9a       	sbi	0x0b, 3	; 11
 208:	9b b1       	in	r25, 0x0b	; 11
 20a:	4d 9b       	sbis	0x09, 5	; 9
 20c:	08 c0       	rjmp	.+16     	; 0x21e <getOutput+0x24>
 20e:	ab 01       	movw	r20, r22
 210:	02 2e       	mov	r0, r18
 212:	02 c0       	rjmp	.+4      	; 0x218 <getOutput+0x1e>
 214:	44 0f       	add	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <getOutput+0x1a>
 21c:	84 2b       	or	r24, r20
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	31 09       	sbc	r19, r1
 222:	80 f7       	brcc	.-32     	; 0x204 <getOutput+0xa>
 224:	5b 98       	cbi	0x0b, 3	; 11
 226:	5e 98       	cbi	0x0b, 6	; 11
 228:	08 95       	ret

0000022a <read_EEPROM>:
 22a:	cf 93       	push	r28
 22c:	c8 2f       	mov	r28, r24
 22e:	8f 77       	andi	r24, 0x7F	; 127
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	97 60       	ori	r25, 0x07	; 7
 234:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <shift10bits>
 238:	8c 2f       	mov	r24, r28
 23a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <getOutput>
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <I2C_requested>:
 242:	cf 93       	push	r28
 244:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <command>
 248:	8c 31       	cpi	r24, 0x1C	; 28
 24a:	39 f5       	brne	.+78     	; 0x29a <I2C_requested+0x58>
 24c:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <mean_counter>
 250:	c7 30       	cpi	r28, 0x07	; 7
 252:	b8 f4       	brcc	.+46     	; 0x282 <I2C_requested+0x40>
 254:	83 e6       	ldi	r24, 0x63	; 99
 256:	8c 0f       	add	r24, r28
 258:	0e 94 15 01 	call	0x22a	; 0x22a <read_EEPROM>
 25c:	ec 2f       	mov	r30, r28
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	ec 58       	subi	r30, 0x8C	; 140
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	80 83       	st	Z, r24
 266:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <mean_counter>
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	ec 58       	subi	r30, 0x8C	; 140
 26e:	fe 4f       	sbci	r31, 0xFE	; 254
 270:	80 81       	ld	r24, Z
 272:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 276:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mean_counter>
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mean_counter>
 280:	34 c0       	rjmp	.+104    	; 0x2ea <I2C_requested+0xa8>
 282:	66 e0       	ldi	r22, 0x06	; 6
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	85 e7       	ldi	r24, 0x75	; 117
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 53 00 	call	0xa6	; 0xa6 <crc_calculate>
 28e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mean_counter>
 298:	28 c0       	rjmp	.+80     	; 0x2ea <I2C_requested+0xa8>
 29a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <command>
 29e:	8b 31       	cpi	r24, 0x1B	; 27
 2a0:	21 f5       	brne	.+72     	; 0x2ea <I2C_requested+0xa8>
 2a2:	c0 91 0f 01 	lds	r28, 0x010F	; 0x80010f <data_counter>
 2a6:	c3 36       	cpi	r28, 0x63	; 99
 2a8:	b0 f4       	brcc	.+44     	; 0x2d6 <I2C_requested+0x94>
 2aa:	8c 2f       	mov	r24, r28
 2ac:	0e 94 15 01 	call	0x22a	; 0x22a <read_EEPROM>
 2b0:	ec 2f       	mov	r30, r28
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	e0 5f       	subi	r30, 0xF0	; 240
 2b6:	fe 4f       	sbci	r31, 0xFE	; 254
 2b8:	80 83       	st	Z, r24
 2ba:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <data_counter>
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	e0 5f       	subi	r30, 0xF0	; 240
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	80 81       	ld	r24, Z
 2c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2ca:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_counter>
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <data_counter>
 2d4:	0a c0       	rjmp	.+20     	; 0x2ea <I2C_requested+0xa8>
 2d6:	63 e6       	ldi	r22, 0x63	; 99
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	80 e1       	ldi	r24, 0x10	; 16
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 53 00 	call	0xa6	; 0xa6 <crc_calculate>
 2e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2e6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <data_counter>
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <write_byte>:
 2ee:	cf 93       	push	r28
 2f0:	c6 2f       	mov	r28, r22
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	80 68       	ori	r24, 0x80	; 128
 2f6:	92 60       	ori	r25, 0x02	; 2
 2f8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <shift10bits>
 2fc:	8c 2f       	mov	r24, r28
 2fe:	0e 94 ee 00 	call	0x1dc	; 0x1dc <shiftdata>
 302:	5e 98       	cbi	0x0b, 6	; 11
 304:	5e 9a       	sbi	0x0b, 6	; 11
 306:	4d 9b       	sbis	0x09, 5	; 9
 308:	fe cf       	rjmp	.-4      	; 0x306 <write_byte+0x18>
 30a:	5e 98       	cbi	0x0b, 6	; 11
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <EWEN>:
 310:	80 e6       	ldi	r24, 0x60	; 96
 312:	92 e0       	ldi	r25, 0x02	; 2
 314:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <shift10bits>
 318:	5e 98       	cbi	0x0b, 6	; 11
 31a:	08 95       	ret

0000031c <EWDS>:
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	92 e0       	ldi	r25, 0x02	; 2
 320:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <shift10bits>
 324:	5e 98       	cbi	0x0b, 6	; 11
 326:	08 95       	ret

00000328 <timerInit>:
 328:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 32c:	8d e0       	ldi	r24, 0x0D	; 13
 32e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 332:	ef e6       	ldi	r30, 0x6F	; 111
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	82 60       	ori	r24, 0x02	; 2
 33a:	80 83       	st	Z, r24
 33c:	83 e1       	ldi	r24, 0x13	; 19
 33e:	93 e1       	ldi	r25, 0x13	; 19
 340:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 344:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 348:	08 95       	ret

0000034a <TWI_init>:
 34a:	ec eb       	ldi	r30, 0xBC	; 188
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	8e 7b       	andi	r24, 0xBE	; 190
 352:	80 83       	st	Z, r24
 354:	80 81       	ld	r24, Z
 356:	84 60       	ori	r24, 0x04	; 4
 358:	80 83       	st	Z, r24
 35a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 35e:	8c e0       	ldi	r24, 0x0C	; 12
 360:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 364:	08 95       	ret

00000366 <TWI_Start>:
 366:	84 ee       	ldi	r24, 0xE4	; 228
 368:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 36c:	ec eb       	ldi	r30, 0xBC	; 188
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	88 23       	and	r24, r24
 374:	ec f7       	brge	.-6      	; 0x370 <TWI_Start+0xa>
 376:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 37a:	08 95       	ret

0000037c <TWI_Repeat_Start>:
 37c:	84 ee       	ldi	r24, 0xE4	; 228
 37e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 382:	ec eb       	ldi	r30, 0xBC	; 188
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	88 23       	and	r24, r24
 38a:	ec f7       	brge	.-6      	; 0x386 <TWI_Repeat_Start+0xa>
 38c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 390:	08 95       	ret

00000392 <TWI_RegisterSelect>:
}

void TWI_RegisterSelect(uint8_t addr, uint8_t reg)
{
	TWDR = (addr << 1) | 0x00; // Last bit = 0 (Write)
 392:	88 0f       	add	r24, r24
 394:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1 << TWINT) | (1 << TWEN);
 398:	84 e8       	ldi	r24, 0x84	; 132
 39a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1 << TWINT)))
 39e:	ec eb       	ldi	r30, 0xBC	; 188
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	88 23       	and	r24, r24
 3a6:	ec f7       	brge	.-6      	; 0x3a2 <TWI_RegisterSelect+0x10>
		;
	if ((TWSR & 0xF8) != 0x18)
 3a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 3ac:	88 7f       	andi	r24, 0xF8	; 248
 3ae:	88 31       	cpi	r24, 0x18	; 24
 3b0:	61 f4       	brne	.+24     	; 0x3ca <TWI_RegisterSelect+0x38>
		Error();
	}
	else
	{
		Success();
		TWDR = reg; // Register to Write
 3b2:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
		TWCR = (1 << TWINT) | (1 << TWEN);
 3b6:	84 e8       	ldi	r24, 0x84	; 132
 3b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while (!(TWCR & (1 << TWINT)))
 3bc:	ec eb       	ldi	r30, 0xBC	; 188
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	88 23       	and	r24, r24
 3c4:	ec f7       	brge	.-6      	; 0x3c0 <TWI_RegisterSelect+0x2e>
			;
		if ((TWSR & 0xF8) != 0x28)
 3c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 3ca:	08 95       	ret

000003cc <TWI_Read>:
	}
}

int TWI_Read(uint8_t addr, uint8_t N_ACK)
{
	TWDR = (addr << 1) | 0x01; // Last bit = 1 (Read)
 3cc:	88 0f       	add	r24, r24
 3ce:	81 60       	ori	r24, 0x01	; 1
 3d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1 << TWINT) | (1 << TWEN);
 3d4:	84 e8       	ldi	r24, 0x84	; 132
 3d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1 << TWINT)))
 3da:	ec eb       	ldi	r30, 0xBC	; 188
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	88 23       	and	r24, r24
 3e2:	ec f7       	brge	.-6      	; 0x3de <TWI_Read+0x12>
		;
	if ((TWSR & 0xF8) != 0x40)
 3e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 3e8:	88 7f       	andi	r24, 0xF8	; 248
 3ea:	80 34       	cpi	r24, 0x40	; 64
 3ec:	99 f4       	brne	.+38     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		Error();
	}
	else
	{
		Success();
		TWCR = (1 << TWINT) | (1 << TWEN) | (N_ACK << TWEA);
 3ee:	20 e4       	ldi	r18, 0x40	; 64
 3f0:	62 9f       	mul	r22, r18
 3f2:	c0 01       	movw	r24, r0
 3f4:	11 24       	eor	r1, r1
 3f6:	84 68       	ori	r24, 0x84	; 132
 3f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while (!(TWCR & (1 << TWINT)))
 3fc:	ec eb       	ldi	r30, 0xBC	; 188
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	88 23       	and	r24, r24
 404:	ec f7       	brge	.-6      	; 0x400 <__LOCK_REGION_LENGTH__>
			;

		if (N_ACK == 1) // Read Again
 406:	61 30       	cpi	r22, 0x01	; 1
 408:	19 f4       	brne	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		{
			if ((TWSR & 0xF8) != 0x50)
 40a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
				Success();
			}
		}
		else
		{
			if ((TWSR & 0xF8) != 0x58)
 410:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
				Success();
			}
		}
	}

	return (TWDR);
 414:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	08 95       	ret

0000041c <TWI_Write>:

void TWI_Write(uint8_t data)
{
	TWDR = data; // Write data on previous selected register
 41c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1 << TWINT) | (1 << TWEN);
 420:	84 e8       	ldi	r24, 0x84	; 132
 422:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1 << TWINT)))
 426:	ec eb       	ldi	r30, 0xBC	; 188
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	88 23       	and	r24, r24
 42e:	ec f7       	brge	.-6      	; 0x42a <TWI_Write+0xe>
		;
	if ((TWSR & 0xF8) != 0x28)
 430:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 434:	08 95       	ret

00000436 <DS1621_Init>:
	}
}

void DS1621_Init()
{
	TWI_Start();
 436:	0e 94 b3 01 	call	0x366	; 0x366 <TWI_Start>
	TWI_RegisterSelect(DS1621, ACCESS_CONFIG);
 43a:	6c ea       	ldi	r22, 0xAC	; 172
 43c:	88 e4       	ldi	r24, 0x48	; 72
 43e:	0e 94 c9 01 	call	0x392	; 0x392 <TWI_RegisterSelect>
	TWI_Write(0x03); // LSB (1SHOT) set to 1 = 1-shot mode conversions and POL = 1
 442:	83 e0       	ldi	r24, 0x03	; 3
 444:	0e 94 0e 02 	call	0x41c	; 0x41c <TWI_Write>
	}
}

void TWI_Stop()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 448:	84 e9       	ldi	r24, 0x94	; 148
 44a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 44e:	08 95       	ret

00000450 <readTemperature>:

	TWI_Stop();
}

char readTemperature()
{
 450:	cf 93       	push	r28
	char temperatureMSB;
	char temperatureLSB;

	TWI_Start();
 452:	0e 94 b3 01 	call	0x366	; 0x366 <TWI_Start>
	TWI_RegisterSelect(DS1621, START_CONVERT_T);
 456:	6e ee       	ldi	r22, 0xEE	; 238
 458:	88 e4       	ldi	r24, 0x48	; 72
 45a:	0e 94 c9 01 	call	0x392	; 0x392 <TWI_RegisterSelect>
	// No further data is required

	TWI_Repeat_Start();
 45e:	0e 94 be 01 	call	0x37c	; 0x37c <TWI_Repeat_Start>
	TWI_RegisterSelect(DS1621, READ_TEMPERATURE);
 462:	6a ea       	ldi	r22, 0xAA	; 170
 464:	88 e4       	ldi	r24, 0x48	; 72
 466:	0e 94 c9 01 	call	0x392	; 0x392 <TWI_RegisterSelect>
	TWI_Repeat_Start();
 46a:	0e 94 be 01 	call	0x37c	; 0x37c <TWI_Repeat_Start>
	temperatureMSB = TWI_Read(DS1621, NACK); // ACK not required
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	88 e4       	ldi	r24, 0x48	; 72
 472:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TWI_Read>
 476:	c8 2f       	mov	r28, r24
	temperatureLSB = TWI_Read(DS1621, NACK); // ACK not required
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	88 e4       	ldi	r24, 0x48	; 72
 47c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TWI_Read>
	}
}

void TWI_Stop()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 480:	84 e9       	ldi	r24, 0x94	; 148
 482:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	temperatureLSB = TWI_Read(DS1621, NACK); // ACK not required

	TWI_Stop();

	return temperatureMSB;
}
 486:	8c 2f       	mov	r24, r28
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <__vector_11>:

void readhundredtemp(uint8_t temp);
void readmaxminprom();

ISR(TIMER1_COMPA_vect)
{
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	8f 92       	push	r8
 498:	9f 92       	push	r9
 49a:	af 92       	push	r10
 49c:	bf 92       	push	r11
 49e:	cf 92       	push	r12
 4a0:	df 92       	push	r13
 4a2:	ef 92       	push	r14
 4a4:	ff 92       	push	r15
 4a6:	1f 93       	push	r17
 4a8:	2f 93       	push	r18
 4aa:	3f 93       	push	r19
 4ac:	4f 93       	push	r20
 4ae:	5f 93       	push	r21
 4b0:	6f 93       	push	r22
 4b2:	7f 93       	push	r23
 4b4:	8f 93       	push	r24
 4b6:	9f 93       	push	r25
 4b8:	af 93       	push	r26
 4ba:	bf 93       	push	r27
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
	minuteflag = 0x01;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <minuteflag>
	char temperature;
	uint8_t hundred_count;
	//PORTD ^= (1 << PIND6);
	temperature = readTemperature(); // Leer temperatura
 4ca:	0e 94 28 02 	call	0x450	; 0x450 <readTemperature>
 4ce:	c8 2f       	mov	r28, r24

	uint8_t entero, decimal; // promedio
	float conthist;			 //

	hundred_count = read_EEPROM(MEMORY_SIZE);				  // Contador de cuantas veces se llego a 100 datos guardados
 4d0:	83 e6       	ldi	r24, 0x63	; 99
 4d2:	0e 94 15 01 	call	0x22a	; 0x22a <read_EEPROM>
 4d6:	d8 2f       	mov	r29, r24
	conthist = (((float)hundred_count * 100) + (float)count); // contador historico
 4d8:	10 91 0e 01 	lds	r17, 0x010E	; 0x80010e <count>
 4dc:	68 2f       	mov	r22, r24
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__floatunsisf>
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	48 ec       	ldi	r20, 0xC8	; 200
 4ee:	52 e4       	ldi	r21, 0x42	; 66
 4f0:	0e 94 74 05 	call	0xae8	; 0xae8 <__mulsf3>
 4f4:	6b 01       	movw	r12, r22
 4f6:	7c 01       	movw	r14, r24
 4f8:	61 2f       	mov	r22, r17
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__floatunsisf>
 504:	9b 01       	movw	r18, r22
 506:	ac 01       	movw	r20, r24
 508:	c7 01       	movw	r24, r14
 50a:	b6 01       	movw	r22, r12
 50c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__addsf3>
 510:	6b 01       	movw	r12, r22
 512:	7c 01       	movw	r14, r24

	if (hundred_count == 0 && count == 0)
 514:	d1 11       	cpse	r29, r1
 516:	11 c0       	rjmp	.+34     	; 0x53a <__vector_11+0xae>
 518:	11 11       	cpse	r17, r1
 51a:	0f c0       	rjmp	.+30     	; 0x53a <__vector_11+0xae>
		promedio = (float)temperature;
 51c:	6c 2f       	mov	r22, r28
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__floatunsisf>
 528:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <promedio>
 52c:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <promedio+0x1>
 530:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <promedio+0x2>
 534:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <promedio+0x3>
 538:	32 c0       	rjmp	.+100    	; 0x59e <__vector_11+0x112>
	else
		promedio = ((float)temperature + promedio * conthist) / (conthist + 1);
 53a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <promedio>
 53e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <promedio+0x1>
 542:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <promedio+0x2>
 546:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <promedio+0x3>
 54a:	c7 01       	movw	r24, r14
 54c:	b6 01       	movw	r22, r12
 54e:	0e 94 74 05 	call	0xae8	; 0xae8 <__mulsf3>
 552:	4b 01       	movw	r8, r22
 554:	5c 01       	movw	r10, r24
 556:	6c 2f       	mov	r22, r28
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__floatunsisf>
 562:	9b 01       	movw	r18, r22
 564:	ac 01       	movw	r20, r24
 566:	c5 01       	movw	r24, r10
 568:	b4 01       	movw	r22, r8
 56a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__addsf3>
 56e:	4b 01       	movw	r8, r22
 570:	5c 01       	movw	r10, r24
 572:	20 e0       	ldi	r18, 0x00	; 0
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	40 e8       	ldi	r20, 0x80	; 128
 578:	5f e3       	ldi	r21, 0x3F	; 63
 57a:	c7 01       	movw	r24, r14
 57c:	b6 01       	movw	r22, r12
 57e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__addsf3>
 582:	9b 01       	movw	r18, r22
 584:	ac 01       	movw	r20, r24
 586:	c5 01       	movw	r24, r10
 588:	b4 01       	movw	r22, r8
 58a:	0e 94 45 04 	call	0x88a	; 0x88a <__divsf3>
 58e:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <promedio>
 592:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <promedio+0x1>
 596:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <promedio+0x2>
 59a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <promedio+0x3>

	entero = (uint8_t)promedio; // obtenemos el numero
 59e:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <promedio>
 5a2:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <promedio+0x1>
 5a6:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <promedio+0x2>
 5aa:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <promedio+0x3>
 5ae:	c7 01       	movw	r24, r14
 5b0:	b6 01       	movw	r22, r12
 5b2:	0e 94 b7 04 	call	0x96e	; 0x96e <__fixunssfsi>
 5b6:	16 2f       	mov	r17, r22
	decimal = (promedio - (float)entero) * 100;
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__floatunsisf>
 5c2:	9b 01       	movw	r18, r22
 5c4:	ac 01       	movw	r20, r24
 5c6:	c7 01       	movw	r24, r14
 5c8:	b6 01       	movw	r22, r12
 5ca:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__subsf3>
 5ce:	20 e0       	ldi	r18, 0x00	; 0
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	48 ec       	ldi	r20, 0xC8	; 200
 5d4:	52 e4       	ldi	r21, 0x42	; 66
 5d6:	0e 94 74 05 	call	0xae8	; 0xae8 <__mulsf3>
 5da:	0e 94 b7 04 	call	0x96e	; 0x96e <__fixunssfsi>
 5de:	f6 2e       	mov	r15, r22

	EWEN();
 5e0:	0e 94 88 01 	call	0x310	; 0x310 <EWEN>

	if (temperature > maxTemp)
 5e4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <maxTemp>
 5e8:	8c 17       	cp	r24, r28
 5ea:	50 f4       	brcc	.+20     	; 0x600 <__vector_11+0x174>
	{
		write_byte(MEMORY_SIZE + 1, temperature); // Almacenando temperatura maxima
 5ec:	6c 2f       	mov	r22, r28
 5ee:	84 e6       	ldi	r24, 0x64	; 100
 5f0:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>
		// write_byte(MEMORY_SIZE + 2, conthist);
		write_byte(MEMORY_SIZE + 2, 0x0A);
 5f4:	6a e0       	ldi	r22, 0x0A	; 10
 5f6:	85 e6       	ldi	r24, 0x65	; 101
 5f8:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>
		maxTemp = temperature;
 5fc:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <maxTemp>
	}

	if (temperature < minTemp)
 600:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <minTemp>
 604:	c8 17       	cp	r28, r24
 606:	50 f4       	brcc	.+20     	; 0x61c <__vector_11+0x190>
	{
		write_byte(MEMORY_SIZE + 3, temperature); // Almacenando temperatura minima
 608:	6c 2f       	mov	r22, r28
 60a:	86 e6       	ldi	r24, 0x66	; 102
 60c:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>
		// write_byte(MEMORY_SIZE + 4, conthist);	  // Almacenando tiempo
		write_byte(MEMORY_SIZE + 4, 0xA0); // Almacenando tiempo
 610:	60 ea       	ldi	r22, 0xA0	; 160
 612:	87 e6       	ldi	r24, 0x67	; 103
 614:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>
		minTemp = temperature;
 618:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <minTemp>
	}

	write_byte(MEMORY_SIZE + 5, entero);
 61c:	61 2f       	mov	r22, r17
 61e:	88 e6       	ldi	r24, 0x68	; 104
 620:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>
	write_byte(MEMORY_SIZE + 6, decimal);
 624:	6f 2d       	mov	r22, r15
 626:	89 e6       	ldi	r24, 0x69	; 105
 628:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>

	write_byte(count, temperature); // Almacenar temperatura
 62c:	6c 2f       	mov	r22, r28
 62e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <count>
 632:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>

	count++;
 636:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <count>
 63a:	8f 5f       	subi	r24, 0xFF	; 255
	if (count >= MEMORY_SIZE)
 63c:	83 36       	cpi	r24, 0x63	; 99
 63e:	18 f4       	brcc	.+6      	; 0x646 <__vector_11+0x1ba>
	write_byte(MEMORY_SIZE + 5, entero);
	write_byte(MEMORY_SIZE + 6, decimal);

	write_byte(count, temperature); // Almacenar temperatura

	count++;
 640:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <count>
 644:	07 c0       	rjmp	.+14     	; 0x654 <__vector_11+0x1c8>
	if (count >= MEMORY_SIZE)
	{
		count = 0;
 646:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <count>
		hundred_count++;
		write_byte(MEMORY_SIZE, hundred_count);
 64a:	61 e0       	ldi	r22, 0x01	; 1
 64c:	6d 0f       	add	r22, r29
 64e:	83 e6       	ldi	r24, 0x63	; 99
 650:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>
	}
	EWDS();
 654:	0e 94 8e 01 	call	0x31c	; 0x31c <EWDS>

	// START DEBUG

	uint8_t readed_value;

	if (count > 0)
 658:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <count>
 65c:	88 23       	and	r24, r24
 65e:	19 f0       	breq	.+6      	; 0x666 <__vector_11+0x1da>
		readed_value = read_EEPROM(count - 1);
 660:	81 50       	subi	r24, 0x01	; 1
 662:	0e 94 15 01 	call	0x22a	; 0x22a <read_EEPROM>

	readed_value = read_EEPROM(MEMORY_SIZE + 1);
 666:	84 e6       	ldi	r24, 0x64	; 100
 668:	0e 94 15 01 	call	0x22a	; 0x22a <read_EEPROM>
	readed_value = read_EEPROM(MEMORY_SIZE + 2);
 66c:	85 e6       	ldi	r24, 0x65	; 101
 66e:	0e 94 15 01 	call	0x22a	; 0x22a <read_EEPROM>
	readed_value = read_EEPROM(MEMORY_SIZE + 3);
 672:	86 e6       	ldi	r24, 0x66	; 102
 674:	0e 94 15 01 	call	0x22a	; 0x22a <read_EEPROM>
	readed_value = read_EEPROM(MEMORY_SIZE + 4);
 678:	87 e6       	ldi	r24, 0x67	; 103
 67a:	0e 94 15 01 	call	0x22a	; 0x22a <read_EEPROM>
	readed_value = read_EEPROM(MEMORY_SIZE + 5);
 67e:	88 e6       	ldi	r24, 0x68	; 104
 680:	0e 94 15 01 	call	0x22a	; 0x22a <read_EEPROM>
	readed_value = read_EEPROM(MEMORY_SIZE + 6);
 684:	89 e6       	ldi	r24, 0x69	; 105
 686:	0e 94 15 01 	call	0x22a	; 0x22a <read_EEPROM>
	// readmaxminprom();
	//readhundredtemp(temp);
	// END DEBUG
}
 68a:	ff 91       	pop	r31
 68c:	ef 91       	pop	r30
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	bf 91       	pop	r27
 694:	af 91       	pop	r26
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	7f 91       	pop	r23
 69c:	6f 91       	pop	r22
 69e:	5f 91       	pop	r21
 6a0:	4f 91       	pop	r20
 6a2:	3f 91       	pop	r19
 6a4:	2f 91       	pop	r18
 6a6:	1f 91       	pop	r17
 6a8:	ff 90       	pop	r15
 6aa:	ef 90       	pop	r14
 6ac:	df 90       	pop	r13
 6ae:	cf 90       	pop	r12
 6b0:	bf 90       	pop	r11
 6b2:	af 90       	pop	r10
 6b4:	9f 90       	pop	r9
 6b6:	8f 90       	pop	r8
 6b8:	0f 90       	pop	r0
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	0f 90       	pop	r0
 6be:	1f 90       	pop	r1
 6c0:	18 95       	reti

000006c2 <__vector_1>:
		}
	}
}

ISR(INT0_vect)
{
 6c2:	1f 92       	push	r1
 6c4:	0f 92       	push	r0
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	0f 92       	push	r0
 6ca:	11 24       	eor	r1, r1
 6cc:	2f 93       	push	r18
 6ce:	3f 93       	push	r19
 6d0:	4f 93       	push	r20
 6d2:	5f 93       	push	r21
 6d4:	6f 93       	push	r22
 6d6:	7f 93       	push	r23
 6d8:	8f 93       	push	r24
 6da:	9f 93       	push	r25
 6dc:	af 93       	push	r26
 6de:	bf 93       	push	r27
 6e0:	ef 93       	push	r30
 6e2:	ff 93       	push	r31
	if ((PIND & (1 << SR)) == (1 << SR)) // Changes Atmega to Slave mode
 6e4:	4a 9b       	sbis	0x09, 2	; 9
 6e6:	10 c0       	rjmp	.+32     	; 0x708 <__vector_1+0x46>
	{
		// Turns on pind7
		PORTD |= (1 << PIND7);
 6e8:	5f 9a       	sbi	0x0b, 7	; 11
		// set received/requested callbacks
		I2C_setCallbacks(I2C_received, I2C_requested);
 6ea:	61 e2       	ldi	r22, 0x21	; 33
 6ec:	71 e0       	ldi	r23, 0x01	; 1
 6ee:	84 ed       	ldi	r24, 0xD4	; 212
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <I2C_setCallbacks>

		// init I2C
		I2C_init(I2C_ADDR);
 6f6:	80 e2       	ldi	r24, 0x20	; 32
 6f8:	0e 94 75 00 	call	0xea	; 0xea <I2C_init>
		// Disable timer 1
		TIMSK1 &= ~(1 << OCIE1A);
 6fc:	ef e6       	ldi	r30, 0x6F	; 111
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	8d 7f       	andi	r24, 0xFD	; 253
 704:	80 83       	st	Z, r24
 706:	07 c0       	rjmp	.+14     	; 0x716 <__vector_1+0x54>
	}
	else // Changes Atmega to Master mode
	{
		TWI_init();
 708:	0e 94 a5 01 	call	0x34a	; 0x34a <TWI_init>
		TIMSK1 |= (1 << OCIE1A);
 70c:	ef e6       	ldi	r30, 0x6F	; 111
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	80 81       	ld	r24, Z
 712:	82 60       	ori	r24, 0x02	; 2
 714:	80 83       	st	Z, r24
	}
}
 716:	ff 91       	pop	r31
 718:	ef 91       	pop	r30
 71a:	bf 91       	pop	r27
 71c:	af 91       	pop	r26
 71e:	9f 91       	pop	r25
 720:	8f 91       	pop	r24
 722:	7f 91       	pop	r23
 724:	6f 91       	pop	r22
 726:	5f 91       	pop	r21
 728:	4f 91       	pop	r20
 72a:	3f 91       	pop	r19
 72c:	2f 91       	pop	r18
 72e:	0f 90       	pop	r0
 730:	0f be       	out	0x3f, r0	; 63
 732:	0f 90       	pop	r0
 734:	1f 90       	pop	r1
 736:	18 95       	reti

00000738 <main>:

int main(void)
{
	TWI_init(); // Inicia I2C Master
 738:	0e 94 a5 01 	call	0x34a	; 0x34a <TWI_init>
	DS1621_Init();
 73c:	0e 94 1b 02 	call	0x436	; 0x436 <DS1621_Init>
	SR_Interrupt_init();
 740:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SR_Interrupt_init>

	DDRD |= (1 << MOSI) | (1 << CLK) | (1 << SELECT); // MOSI, CLK, SELECT(CS) SALIDAS
 744:	8a b1       	in	r24, 0x0a	; 10
 746:	88 65       	ori	r24, 0x58	; 88
 748:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << MISO);							  // MISO ENTRADA
 74a:	55 98       	cbi	0x0a, 5	; 10

	// Sets pin d7 as output
	DDRD |= (1 << PIND7);
 74c:	57 9a       	sbi	0x0a, 7	; 10
	// Turns on pind7

	PORTD &= ~(1 << CLK); // clk = 0
 74e:	5b 98       	cbi	0x0b, 3	; 11

	// LEDs
	DDRD |= (1 << 6);
 750:	56 9a       	sbi	0x0a, 6	; 10

	sei();
 752:	78 94       	sei
	timerInit();
 754:	0e 94 94 01 	call	0x328	; 0x328 <timerInit>

	EWEN();
 758:	0e 94 88 01 	call	0x310	; 0x310 <EWEN>

	write_byte(MEMORY_SIZE, 0x00);
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	83 e6       	ldi	r24, 0x63	; 99
 760:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>
	write_byte(MEMORY_SIZE + 1, 0x00);
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	84 e6       	ldi	r24, 0x64	; 100
 768:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>
	write_byte(MEMORY_SIZE + 2, 0x00);
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	85 e6       	ldi	r24, 0x65	; 101
 770:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>
	write_byte(MEMORY_SIZE + 3, 0x00);
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	86 e6       	ldi	r24, 0x66	; 102
 778:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>
	write_byte(MEMORY_SIZE + 4, 0x00);
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	87 e6       	ldi	r24, 0x67	; 103
 780:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>
	write_byte(MEMORY_SIZE + 5, 0x00);
 784:	60 e0       	ldi	r22, 0x00	; 0
 786:	88 e6       	ldi	r24, 0x68	; 104
 788:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>
	write_byte(MEMORY_SIZE + 6, 0x00);
 78c:	60 e0       	ldi	r22, 0x00	; 0
 78e:	89 e6       	ldi	r24, 0x69	; 105
 790:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>
	write_byte(MEMORY_SIZE + 7, 0x00);
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	8a e6       	ldi	r24, 0x6A	; 106
 798:	0e 94 77 01 	call	0x2ee	; 0x2ee <write_byte>

	EWDS();
 79c:	0e 94 8e 01 	call	0x31c	; 0x31c <EWDS>
 7a0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <minuteflag>
	{

		if (minuteflag == 0x01)
		{

			minuteflag = 0x00;
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	01 c0       	rjmp	.+2      	; 0x7aa <main+0x72>
 7a8:	89 2f       	mov	r24, r25
	EWDS();

	while (1)
	{

		if (minuteflag == 0x01)
 7aa:	81 30       	cpi	r24, 0x01	; 1
 7ac:	f1 f7       	brne	.-4      	; 0x7aa <main+0x72>
 7ae:	fc cf       	rjmp	.-8      	; 0x7a8 <main+0x70>

000007b0 <__subsf3>:
 7b0:	50 58       	subi	r21, 0x80	; 128

000007b2 <__addsf3>:
 7b2:	bb 27       	eor	r27, r27
 7b4:	aa 27       	eor	r26, r26
 7b6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__addsf3x>
 7ba:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_round>
 7be:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fp_pscA>
 7c2:	38 f0       	brcs	.+14     	; 0x7d2 <__addsf3+0x20>
 7c4:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_pscB>
 7c8:	20 f0       	brcs	.+8      	; 0x7d2 <__addsf3+0x20>
 7ca:	39 f4       	brne	.+14     	; 0x7da <__addsf3+0x28>
 7cc:	9f 3f       	cpi	r25, 0xFF	; 255
 7ce:	19 f4       	brne	.+6      	; 0x7d6 <__addsf3+0x24>
 7d0:	26 f4       	brtc	.+8      	; 0x7da <__addsf3+0x28>
 7d2:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__fp_nan>
 7d6:	0e f4       	brtc	.+2      	; 0x7da <__addsf3+0x28>
 7d8:	e0 95       	com	r30
 7da:	e7 fb       	bst	r30, 7
 7dc:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_inf>

000007e0 <__addsf3x>:
 7e0:	e9 2f       	mov	r30, r25
 7e2:	0e 94 4b 05 	call	0xa96	; 0xa96 <__fp_split3>
 7e6:	58 f3       	brcs	.-42     	; 0x7be <__addsf3+0xc>
 7e8:	ba 17       	cp	r27, r26
 7ea:	62 07       	cpc	r22, r18
 7ec:	73 07       	cpc	r23, r19
 7ee:	84 07       	cpc	r24, r20
 7f0:	95 07       	cpc	r25, r21
 7f2:	20 f0       	brcs	.+8      	; 0x7fc <__addsf3x+0x1c>
 7f4:	79 f4       	brne	.+30     	; 0x814 <__addsf3x+0x34>
 7f6:	a6 f5       	brtc	.+104    	; 0x860 <__addsf3x+0x80>
 7f8:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_zero>
 7fc:	0e f4       	brtc	.+2      	; 0x800 <__addsf3x+0x20>
 7fe:	e0 95       	com	r30
 800:	0b 2e       	mov	r0, r27
 802:	ba 2f       	mov	r27, r26
 804:	a0 2d       	mov	r26, r0
 806:	0b 01       	movw	r0, r22
 808:	b9 01       	movw	r22, r18
 80a:	90 01       	movw	r18, r0
 80c:	0c 01       	movw	r0, r24
 80e:	ca 01       	movw	r24, r20
 810:	a0 01       	movw	r20, r0
 812:	11 24       	eor	r1, r1
 814:	ff 27       	eor	r31, r31
 816:	59 1b       	sub	r21, r25
 818:	99 f0       	breq	.+38     	; 0x840 <__addsf3x+0x60>
 81a:	59 3f       	cpi	r21, 0xF9	; 249
 81c:	50 f4       	brcc	.+20     	; 0x832 <__addsf3x+0x52>
 81e:	50 3e       	cpi	r21, 0xE0	; 224
 820:	68 f1       	brcs	.+90     	; 0x87c <__addsf3x+0x9c>
 822:	1a 16       	cp	r1, r26
 824:	f0 40       	sbci	r31, 0x00	; 0
 826:	a2 2f       	mov	r26, r18
 828:	23 2f       	mov	r18, r19
 82a:	34 2f       	mov	r19, r20
 82c:	44 27       	eor	r20, r20
 82e:	58 5f       	subi	r21, 0xF8	; 248
 830:	f3 cf       	rjmp	.-26     	; 0x818 <__addsf3x+0x38>
 832:	46 95       	lsr	r20
 834:	37 95       	ror	r19
 836:	27 95       	ror	r18
 838:	a7 95       	ror	r26
 83a:	f0 40       	sbci	r31, 0x00	; 0
 83c:	53 95       	inc	r21
 83e:	c9 f7       	brne	.-14     	; 0x832 <__addsf3x+0x52>
 840:	7e f4       	brtc	.+30     	; 0x860 <__addsf3x+0x80>
 842:	1f 16       	cp	r1, r31
 844:	ba 0b       	sbc	r27, r26
 846:	62 0b       	sbc	r22, r18
 848:	73 0b       	sbc	r23, r19
 84a:	84 0b       	sbc	r24, r20
 84c:	ba f0       	brmi	.+46     	; 0x87c <__addsf3x+0x9c>
 84e:	91 50       	subi	r25, 0x01	; 1
 850:	a1 f0       	breq	.+40     	; 0x87a <__addsf3x+0x9a>
 852:	ff 0f       	add	r31, r31
 854:	bb 1f       	adc	r27, r27
 856:	66 1f       	adc	r22, r22
 858:	77 1f       	adc	r23, r23
 85a:	88 1f       	adc	r24, r24
 85c:	c2 f7       	brpl	.-16     	; 0x84e <__addsf3x+0x6e>
 85e:	0e c0       	rjmp	.+28     	; 0x87c <__addsf3x+0x9c>
 860:	ba 0f       	add	r27, r26
 862:	62 1f       	adc	r22, r18
 864:	73 1f       	adc	r23, r19
 866:	84 1f       	adc	r24, r20
 868:	48 f4       	brcc	.+18     	; 0x87c <__addsf3x+0x9c>
 86a:	87 95       	ror	r24
 86c:	77 95       	ror	r23
 86e:	67 95       	ror	r22
 870:	b7 95       	ror	r27
 872:	f7 95       	ror	r31
 874:	9e 3f       	cpi	r25, 0xFE	; 254
 876:	08 f0       	brcs	.+2      	; 0x87a <__addsf3x+0x9a>
 878:	b0 cf       	rjmp	.-160    	; 0x7da <__addsf3+0x28>
 87a:	93 95       	inc	r25
 87c:	88 0f       	add	r24, r24
 87e:	08 f0       	brcs	.+2      	; 0x882 <__addsf3x+0xa2>
 880:	99 27       	eor	r25, r25
 882:	ee 0f       	add	r30, r30
 884:	97 95       	ror	r25
 886:	87 95       	ror	r24
 888:	08 95       	ret

0000088a <__divsf3>:
 88a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__divsf3x>
 88e:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_round>
 892:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_pscB>
 896:	58 f0       	brcs	.+22     	; 0x8ae <__divsf3+0x24>
 898:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fp_pscA>
 89c:	40 f0       	brcs	.+16     	; 0x8ae <__divsf3+0x24>
 89e:	29 f4       	brne	.+10     	; 0x8aa <__divsf3+0x20>
 8a0:	5f 3f       	cpi	r21, 0xFF	; 255
 8a2:	29 f0       	breq	.+10     	; 0x8ae <__divsf3+0x24>
 8a4:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_inf>
 8a8:	51 11       	cpse	r21, r1
 8aa:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_szero>
 8ae:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__fp_nan>

000008b2 <__divsf3x>:
 8b2:	0e 94 4b 05 	call	0xa96	; 0xa96 <__fp_split3>
 8b6:	68 f3       	brcs	.-38     	; 0x892 <__divsf3+0x8>

000008b8 <__divsf3_pse>:
 8b8:	99 23       	and	r25, r25
 8ba:	b1 f3       	breq	.-20     	; 0x8a8 <__divsf3+0x1e>
 8bc:	55 23       	and	r21, r21
 8be:	91 f3       	breq	.-28     	; 0x8a4 <__divsf3+0x1a>
 8c0:	95 1b       	sub	r25, r21
 8c2:	55 0b       	sbc	r21, r21
 8c4:	bb 27       	eor	r27, r27
 8c6:	aa 27       	eor	r26, r26
 8c8:	62 17       	cp	r22, r18
 8ca:	73 07       	cpc	r23, r19
 8cc:	84 07       	cpc	r24, r20
 8ce:	38 f0       	brcs	.+14     	; 0x8de <__divsf3_pse+0x26>
 8d0:	9f 5f       	subi	r25, 0xFF	; 255
 8d2:	5f 4f       	sbci	r21, 0xFF	; 255
 8d4:	22 0f       	add	r18, r18
 8d6:	33 1f       	adc	r19, r19
 8d8:	44 1f       	adc	r20, r20
 8da:	aa 1f       	adc	r26, r26
 8dc:	a9 f3       	breq	.-22     	; 0x8c8 <__divsf3_pse+0x10>
 8de:	35 d0       	rcall	.+106    	; 0x94a <__stack+0x4b>
 8e0:	0e 2e       	mov	r0, r30
 8e2:	3a f0       	brmi	.+14     	; 0x8f2 <__divsf3_pse+0x3a>
 8e4:	e0 e8       	ldi	r30, 0x80	; 128
 8e6:	32 d0       	rcall	.+100    	; 0x94c <__stack+0x4d>
 8e8:	91 50       	subi	r25, 0x01	; 1
 8ea:	50 40       	sbci	r21, 0x00	; 0
 8ec:	e6 95       	lsr	r30
 8ee:	00 1c       	adc	r0, r0
 8f0:	ca f7       	brpl	.-14     	; 0x8e4 <__divsf3_pse+0x2c>
 8f2:	2b d0       	rcall	.+86     	; 0x94a <__stack+0x4b>
 8f4:	fe 2f       	mov	r31, r30
 8f6:	29 d0       	rcall	.+82     	; 0x94a <__stack+0x4b>
 8f8:	66 0f       	add	r22, r22
 8fa:	77 1f       	adc	r23, r23
 8fc:	88 1f       	adc	r24, r24
 8fe:	bb 1f       	adc	r27, r27
 900:	26 17       	cp	r18, r22
 902:	37 07       	cpc	r19, r23
 904:	48 07       	cpc	r20, r24
 906:	ab 07       	cpc	r26, r27
 908:	b0 e8       	ldi	r27, 0x80	; 128
 90a:	09 f0       	breq	.+2      	; 0x90e <__stack+0xf>
 90c:	bb 0b       	sbc	r27, r27
 90e:	80 2d       	mov	r24, r0
 910:	bf 01       	movw	r22, r30
 912:	ff 27       	eor	r31, r31
 914:	93 58       	subi	r25, 0x83	; 131
 916:	5f 4f       	sbci	r21, 0xFF	; 255
 918:	3a f0       	brmi	.+14     	; 0x928 <__stack+0x29>
 91a:	9e 3f       	cpi	r25, 0xFE	; 254
 91c:	51 05       	cpc	r21, r1
 91e:	78 f0       	brcs	.+30     	; 0x93e <__stack+0x3f>
 920:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_inf>
 924:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_szero>
 928:	5f 3f       	cpi	r21, 0xFF	; 255
 92a:	e4 f3       	brlt	.-8      	; 0x924 <__stack+0x25>
 92c:	98 3e       	cpi	r25, 0xE8	; 232
 92e:	d4 f3       	brlt	.-12     	; 0x924 <__stack+0x25>
 930:	86 95       	lsr	r24
 932:	77 95       	ror	r23
 934:	67 95       	ror	r22
 936:	b7 95       	ror	r27
 938:	f7 95       	ror	r31
 93a:	9f 5f       	subi	r25, 0xFF	; 255
 93c:	c9 f7       	brne	.-14     	; 0x930 <__stack+0x31>
 93e:	88 0f       	add	r24, r24
 940:	91 1d       	adc	r25, r1
 942:	96 95       	lsr	r25
 944:	87 95       	ror	r24
 946:	97 f9       	bld	r25, 7
 948:	08 95       	ret
 94a:	e1 e0       	ldi	r30, 0x01	; 1
 94c:	66 0f       	add	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	88 1f       	adc	r24, r24
 952:	bb 1f       	adc	r27, r27
 954:	62 17       	cp	r22, r18
 956:	73 07       	cpc	r23, r19
 958:	84 07       	cpc	r24, r20
 95a:	ba 07       	cpc	r27, r26
 95c:	20 f0       	brcs	.+8      	; 0x966 <__stack+0x67>
 95e:	62 1b       	sub	r22, r18
 960:	73 0b       	sbc	r23, r19
 962:	84 0b       	sbc	r24, r20
 964:	ba 0b       	sbc	r27, r26
 966:	ee 1f       	adc	r30, r30
 968:	88 f7       	brcc	.-30     	; 0x94c <__stack+0x4d>
 96a:	e0 95       	com	r30
 96c:	08 95       	ret

0000096e <__fixunssfsi>:
 96e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fp_splitA>
 972:	88 f0       	brcs	.+34     	; 0x996 <__fixunssfsi+0x28>
 974:	9f 57       	subi	r25, 0x7F	; 127
 976:	98 f0       	brcs	.+38     	; 0x99e <__fixunssfsi+0x30>
 978:	b9 2f       	mov	r27, r25
 97a:	99 27       	eor	r25, r25
 97c:	b7 51       	subi	r27, 0x17	; 23
 97e:	b0 f0       	brcs	.+44     	; 0x9ac <__fixunssfsi+0x3e>
 980:	e1 f0       	breq	.+56     	; 0x9ba <__fixunssfsi+0x4c>
 982:	66 0f       	add	r22, r22
 984:	77 1f       	adc	r23, r23
 986:	88 1f       	adc	r24, r24
 988:	99 1f       	adc	r25, r25
 98a:	1a f0       	brmi	.+6      	; 0x992 <__fixunssfsi+0x24>
 98c:	ba 95       	dec	r27
 98e:	c9 f7       	brne	.-14     	; 0x982 <__fixunssfsi+0x14>
 990:	14 c0       	rjmp	.+40     	; 0x9ba <__fixunssfsi+0x4c>
 992:	b1 30       	cpi	r27, 0x01	; 1
 994:	91 f0       	breq	.+36     	; 0x9ba <__fixunssfsi+0x4c>
 996:	0e 94 6d 05 	call	0xada	; 0xada <__fp_zero>
 99a:	b1 e0       	ldi	r27, 0x01	; 1
 99c:	08 95       	ret
 99e:	0c 94 6d 05 	jmp	0xada	; 0xada <__fp_zero>
 9a2:	67 2f       	mov	r22, r23
 9a4:	78 2f       	mov	r23, r24
 9a6:	88 27       	eor	r24, r24
 9a8:	b8 5f       	subi	r27, 0xF8	; 248
 9aa:	39 f0       	breq	.+14     	; 0x9ba <__fixunssfsi+0x4c>
 9ac:	b9 3f       	cpi	r27, 0xF9	; 249
 9ae:	cc f3       	brlt	.-14     	; 0x9a2 <__fixunssfsi+0x34>
 9b0:	86 95       	lsr	r24
 9b2:	77 95       	ror	r23
 9b4:	67 95       	ror	r22
 9b6:	b3 95       	inc	r27
 9b8:	d9 f7       	brne	.-10     	; 0x9b0 <__fixunssfsi+0x42>
 9ba:	3e f4       	brtc	.+14     	; 0x9ca <__fixunssfsi+0x5c>
 9bc:	90 95       	com	r25
 9be:	80 95       	com	r24
 9c0:	70 95       	com	r23
 9c2:	61 95       	neg	r22
 9c4:	7f 4f       	sbci	r23, 0xFF	; 255
 9c6:	8f 4f       	sbci	r24, 0xFF	; 255
 9c8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ca:	08 95       	ret

000009cc <__floatunsisf>:
 9cc:	e8 94       	clt
 9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <__floatsisf+0x12>

000009d0 <__floatsisf>:
 9d0:	97 fb       	bst	r25, 7
 9d2:	3e f4       	brtc	.+14     	; 0x9e2 <__floatsisf+0x12>
 9d4:	90 95       	com	r25
 9d6:	80 95       	com	r24
 9d8:	70 95       	com	r23
 9da:	61 95       	neg	r22
 9dc:	7f 4f       	sbci	r23, 0xFF	; 255
 9de:	8f 4f       	sbci	r24, 0xFF	; 255
 9e0:	9f 4f       	sbci	r25, 0xFF	; 255
 9e2:	99 23       	and	r25, r25
 9e4:	a9 f0       	breq	.+42     	; 0xa10 <__floatsisf+0x40>
 9e6:	f9 2f       	mov	r31, r25
 9e8:	96 e9       	ldi	r25, 0x96	; 150
 9ea:	bb 27       	eor	r27, r27
 9ec:	93 95       	inc	r25
 9ee:	f6 95       	lsr	r31
 9f0:	87 95       	ror	r24
 9f2:	77 95       	ror	r23
 9f4:	67 95       	ror	r22
 9f6:	b7 95       	ror	r27
 9f8:	f1 11       	cpse	r31, r1
 9fa:	f8 cf       	rjmp	.-16     	; 0x9ec <__floatsisf+0x1c>
 9fc:	fa f4       	brpl	.+62     	; 0xa3c <__floatsisf+0x6c>
 9fe:	bb 0f       	add	r27, r27
 a00:	11 f4       	brne	.+4      	; 0xa06 <__floatsisf+0x36>
 a02:	60 ff       	sbrs	r22, 0
 a04:	1b c0       	rjmp	.+54     	; 0xa3c <__floatsisf+0x6c>
 a06:	6f 5f       	subi	r22, 0xFF	; 255
 a08:	7f 4f       	sbci	r23, 0xFF	; 255
 a0a:	8f 4f       	sbci	r24, 0xFF	; 255
 a0c:	9f 4f       	sbci	r25, 0xFF	; 255
 a0e:	16 c0       	rjmp	.+44     	; 0xa3c <__floatsisf+0x6c>
 a10:	88 23       	and	r24, r24
 a12:	11 f0       	breq	.+4      	; 0xa18 <__floatsisf+0x48>
 a14:	96 e9       	ldi	r25, 0x96	; 150
 a16:	11 c0       	rjmp	.+34     	; 0xa3a <__floatsisf+0x6a>
 a18:	77 23       	and	r23, r23
 a1a:	21 f0       	breq	.+8      	; 0xa24 <__floatsisf+0x54>
 a1c:	9e e8       	ldi	r25, 0x8E	; 142
 a1e:	87 2f       	mov	r24, r23
 a20:	76 2f       	mov	r23, r22
 a22:	05 c0       	rjmp	.+10     	; 0xa2e <__floatsisf+0x5e>
 a24:	66 23       	and	r22, r22
 a26:	71 f0       	breq	.+28     	; 0xa44 <__floatsisf+0x74>
 a28:	96 e8       	ldi	r25, 0x86	; 134
 a2a:	86 2f       	mov	r24, r22
 a2c:	70 e0       	ldi	r23, 0x00	; 0
 a2e:	60 e0       	ldi	r22, 0x00	; 0
 a30:	2a f0       	brmi	.+10     	; 0xa3c <__floatsisf+0x6c>
 a32:	9a 95       	dec	r25
 a34:	66 0f       	add	r22, r22
 a36:	77 1f       	adc	r23, r23
 a38:	88 1f       	adc	r24, r24
 a3a:	da f7       	brpl	.-10     	; 0xa32 <__floatsisf+0x62>
 a3c:	88 0f       	add	r24, r24
 a3e:	96 95       	lsr	r25
 a40:	87 95       	ror	r24
 a42:	97 f9       	bld	r25, 7
 a44:	08 95       	ret

00000a46 <__fp_inf>:
 a46:	97 f9       	bld	r25, 7
 a48:	9f 67       	ori	r25, 0x7F	; 127
 a4a:	80 e8       	ldi	r24, 0x80	; 128
 a4c:	70 e0       	ldi	r23, 0x00	; 0
 a4e:	60 e0       	ldi	r22, 0x00	; 0
 a50:	08 95       	ret

00000a52 <__fp_nan>:
 a52:	9f ef       	ldi	r25, 0xFF	; 255
 a54:	80 ec       	ldi	r24, 0xC0	; 192
 a56:	08 95       	ret

00000a58 <__fp_pscA>:
 a58:	00 24       	eor	r0, r0
 a5a:	0a 94       	dec	r0
 a5c:	16 16       	cp	r1, r22
 a5e:	17 06       	cpc	r1, r23
 a60:	18 06       	cpc	r1, r24
 a62:	09 06       	cpc	r0, r25
 a64:	08 95       	ret

00000a66 <__fp_pscB>:
 a66:	00 24       	eor	r0, r0
 a68:	0a 94       	dec	r0
 a6a:	12 16       	cp	r1, r18
 a6c:	13 06       	cpc	r1, r19
 a6e:	14 06       	cpc	r1, r20
 a70:	05 06       	cpc	r0, r21
 a72:	08 95       	ret

00000a74 <__fp_round>:
 a74:	09 2e       	mov	r0, r25
 a76:	03 94       	inc	r0
 a78:	00 0c       	add	r0, r0
 a7a:	11 f4       	brne	.+4      	; 0xa80 <__fp_round+0xc>
 a7c:	88 23       	and	r24, r24
 a7e:	52 f0       	brmi	.+20     	; 0xa94 <__fp_round+0x20>
 a80:	bb 0f       	add	r27, r27
 a82:	40 f4       	brcc	.+16     	; 0xa94 <__fp_round+0x20>
 a84:	bf 2b       	or	r27, r31
 a86:	11 f4       	brne	.+4      	; 0xa8c <__fp_round+0x18>
 a88:	60 ff       	sbrs	r22, 0
 a8a:	04 c0       	rjmp	.+8      	; 0xa94 <__fp_round+0x20>
 a8c:	6f 5f       	subi	r22, 0xFF	; 255
 a8e:	7f 4f       	sbci	r23, 0xFF	; 255
 a90:	8f 4f       	sbci	r24, 0xFF	; 255
 a92:	9f 4f       	sbci	r25, 0xFF	; 255
 a94:	08 95       	ret

00000a96 <__fp_split3>:
 a96:	57 fd       	sbrc	r21, 7
 a98:	90 58       	subi	r25, 0x80	; 128
 a9a:	44 0f       	add	r20, r20
 a9c:	55 1f       	adc	r21, r21
 a9e:	59 f0       	breq	.+22     	; 0xab6 <__fp_splitA+0x10>
 aa0:	5f 3f       	cpi	r21, 0xFF	; 255
 aa2:	71 f0       	breq	.+28     	; 0xac0 <__fp_splitA+0x1a>
 aa4:	47 95       	ror	r20

00000aa6 <__fp_splitA>:
 aa6:	88 0f       	add	r24, r24
 aa8:	97 fb       	bst	r25, 7
 aaa:	99 1f       	adc	r25, r25
 aac:	61 f0       	breq	.+24     	; 0xac6 <__fp_splitA+0x20>
 aae:	9f 3f       	cpi	r25, 0xFF	; 255
 ab0:	79 f0       	breq	.+30     	; 0xad0 <__fp_splitA+0x2a>
 ab2:	87 95       	ror	r24
 ab4:	08 95       	ret
 ab6:	12 16       	cp	r1, r18
 ab8:	13 06       	cpc	r1, r19
 aba:	14 06       	cpc	r1, r20
 abc:	55 1f       	adc	r21, r21
 abe:	f2 cf       	rjmp	.-28     	; 0xaa4 <__fp_split3+0xe>
 ac0:	46 95       	lsr	r20
 ac2:	f1 df       	rcall	.-30     	; 0xaa6 <__fp_splitA>
 ac4:	08 c0       	rjmp	.+16     	; 0xad6 <__fp_splitA+0x30>
 ac6:	16 16       	cp	r1, r22
 ac8:	17 06       	cpc	r1, r23
 aca:	18 06       	cpc	r1, r24
 acc:	99 1f       	adc	r25, r25
 ace:	f1 cf       	rjmp	.-30     	; 0xab2 <__fp_splitA+0xc>
 ad0:	86 95       	lsr	r24
 ad2:	71 05       	cpc	r23, r1
 ad4:	61 05       	cpc	r22, r1
 ad6:	08 94       	sec
 ad8:	08 95       	ret

00000ada <__fp_zero>:
 ada:	e8 94       	clt

00000adc <__fp_szero>:
 adc:	bb 27       	eor	r27, r27
 ade:	66 27       	eor	r22, r22
 ae0:	77 27       	eor	r23, r23
 ae2:	cb 01       	movw	r24, r22
 ae4:	97 f9       	bld	r25, 7
 ae6:	08 95       	ret

00000ae8 <__mulsf3>:
 ae8:	0e 94 87 05 	call	0xb0e	; 0xb0e <__mulsf3x>
 aec:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_round>
 af0:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fp_pscA>
 af4:	38 f0       	brcs	.+14     	; 0xb04 <__mulsf3+0x1c>
 af6:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_pscB>
 afa:	20 f0       	brcs	.+8      	; 0xb04 <__mulsf3+0x1c>
 afc:	95 23       	and	r25, r21
 afe:	11 f0       	breq	.+4      	; 0xb04 <__mulsf3+0x1c>
 b00:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_inf>
 b04:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__fp_nan>
 b08:	11 24       	eor	r1, r1
 b0a:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_szero>

00000b0e <__mulsf3x>:
 b0e:	0e 94 4b 05 	call	0xa96	; 0xa96 <__fp_split3>
 b12:	70 f3       	brcs	.-36     	; 0xaf0 <__mulsf3+0x8>

00000b14 <__mulsf3_pse>:
 b14:	95 9f       	mul	r25, r21
 b16:	c1 f3       	breq	.-16     	; 0xb08 <__mulsf3+0x20>
 b18:	95 0f       	add	r25, r21
 b1a:	50 e0       	ldi	r21, 0x00	; 0
 b1c:	55 1f       	adc	r21, r21
 b1e:	62 9f       	mul	r22, r18
 b20:	f0 01       	movw	r30, r0
 b22:	72 9f       	mul	r23, r18
 b24:	bb 27       	eor	r27, r27
 b26:	f0 0d       	add	r31, r0
 b28:	b1 1d       	adc	r27, r1
 b2a:	63 9f       	mul	r22, r19
 b2c:	aa 27       	eor	r26, r26
 b2e:	f0 0d       	add	r31, r0
 b30:	b1 1d       	adc	r27, r1
 b32:	aa 1f       	adc	r26, r26
 b34:	64 9f       	mul	r22, r20
 b36:	66 27       	eor	r22, r22
 b38:	b0 0d       	add	r27, r0
 b3a:	a1 1d       	adc	r26, r1
 b3c:	66 1f       	adc	r22, r22
 b3e:	82 9f       	mul	r24, r18
 b40:	22 27       	eor	r18, r18
 b42:	b0 0d       	add	r27, r0
 b44:	a1 1d       	adc	r26, r1
 b46:	62 1f       	adc	r22, r18
 b48:	73 9f       	mul	r23, r19
 b4a:	b0 0d       	add	r27, r0
 b4c:	a1 1d       	adc	r26, r1
 b4e:	62 1f       	adc	r22, r18
 b50:	83 9f       	mul	r24, r19
 b52:	a0 0d       	add	r26, r0
 b54:	61 1d       	adc	r22, r1
 b56:	22 1f       	adc	r18, r18
 b58:	74 9f       	mul	r23, r20
 b5a:	33 27       	eor	r19, r19
 b5c:	a0 0d       	add	r26, r0
 b5e:	61 1d       	adc	r22, r1
 b60:	23 1f       	adc	r18, r19
 b62:	84 9f       	mul	r24, r20
 b64:	60 0d       	add	r22, r0
 b66:	21 1d       	adc	r18, r1
 b68:	82 2f       	mov	r24, r18
 b6a:	76 2f       	mov	r23, r22
 b6c:	6a 2f       	mov	r22, r26
 b6e:	11 24       	eor	r1, r1
 b70:	9f 57       	subi	r25, 0x7F	; 127
 b72:	50 40       	sbci	r21, 0x00	; 0
 b74:	9a f0       	brmi	.+38     	; 0xb9c <__mulsf3_pse+0x88>
 b76:	f1 f0       	breq	.+60     	; 0xbb4 <__mulsf3_pse+0xa0>
 b78:	88 23       	and	r24, r24
 b7a:	4a f0       	brmi	.+18     	; 0xb8e <__mulsf3_pse+0x7a>
 b7c:	ee 0f       	add	r30, r30
 b7e:	ff 1f       	adc	r31, r31
 b80:	bb 1f       	adc	r27, r27
 b82:	66 1f       	adc	r22, r22
 b84:	77 1f       	adc	r23, r23
 b86:	88 1f       	adc	r24, r24
 b88:	91 50       	subi	r25, 0x01	; 1
 b8a:	50 40       	sbci	r21, 0x00	; 0
 b8c:	a9 f7       	brne	.-22     	; 0xb78 <__mulsf3_pse+0x64>
 b8e:	9e 3f       	cpi	r25, 0xFE	; 254
 b90:	51 05       	cpc	r21, r1
 b92:	80 f0       	brcs	.+32     	; 0xbb4 <__mulsf3_pse+0xa0>
 b94:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_inf>
 b98:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_szero>
 b9c:	5f 3f       	cpi	r21, 0xFF	; 255
 b9e:	e4 f3       	brlt	.-8      	; 0xb98 <__mulsf3_pse+0x84>
 ba0:	98 3e       	cpi	r25, 0xE8	; 232
 ba2:	d4 f3       	brlt	.-12     	; 0xb98 <__mulsf3_pse+0x84>
 ba4:	86 95       	lsr	r24
 ba6:	77 95       	ror	r23
 ba8:	67 95       	ror	r22
 baa:	b7 95       	ror	r27
 bac:	f7 95       	ror	r31
 bae:	e7 95       	ror	r30
 bb0:	9f 5f       	subi	r25, 0xFF	; 255
 bb2:	c1 f7       	brne	.-16     	; 0xba4 <__mulsf3_pse+0x90>
 bb4:	fe 2b       	or	r31, r30
 bb6:	88 0f       	add	r24, r24
 bb8:	91 1d       	adc	r25, r1
 bba:	96 95       	lsr	r25
 bbc:	87 95       	ror	r24
 bbe:	97 f9       	bld	r25, 7
 bc0:	08 95       	ret

00000bc2 <_exit>:
 bc2:	f8 94       	cli

00000bc4 <__stop_program>:
 bc4:	ff cf       	rjmp	.-2      	; 0xbc4 <__stop_program>
