
memTemp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000b9e  00000c32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000077  00800104  00800104  00000c36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000134b  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6b  00000000  00000000  00002143  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b70  00000000  00000000  00002bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  00003720  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ba  00000000  00000000  00003ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae5  00000000  00000000  0000416a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00004c4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 37       	cpi	r26, 0x7B	; 123
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a5 03 	call	0x74a	; 0x74a <main>
  9e:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <crc_calculate>:
  a6:	16 16       	cp	r1, r22
  a8:	17 06       	cpc	r1, r23
  aa:	a4 f4       	brge	.+40     	; 0xd4 <crc_calculate+0x2e>
  ac:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
  b0:	fc 01       	movw	r30, r24
  b2:	68 0f       	add	r22, r24
  b4:	79 1f       	adc	r23, r25
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	21 91       	ld	r18, Z+
  ba:	98 e0       	ldi	r25, 0x08	; 8
  bc:	38 2f       	mov	r19, r24
  be:	32 27       	eor	r19, r18
  c0:	86 95       	lsr	r24
  c2:	30 fd       	sbrc	r19, 0
  c4:	84 27       	eor	r24, r20
  c6:	26 95       	lsr	r18
  c8:	91 50       	subi	r25, 0x01	; 1
  ca:	c1 f7       	brne	.-16     	; 0xbc <crc_calculate+0x16>
  cc:	e6 17       	cp	r30, r22
  ce:	f7 07       	cpc	r31, r23
  d0:	99 f7       	brne	.-26     	; 0xb8 <crc_calculate+0x12>
  d2:	08 95       	ret
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	08 95       	ret

000000d8 <I2C_setCallbacks>:
  d8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <I2C_recv+0x1>
  dc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <I2C_recv>
  e0:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
  e4:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
  e8:	08 95       	ret

000000ea <I2C_init>:
  ea:	f8 94       	cli
  ec:	88 0f       	add	r24, r24
  ee:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
  f2:	85 ec       	ldi	r24, 0xC5	; 197
  f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  f8:	78 94       	sei
  fa:	08 95       	ret

000000fc <__vector_24>:
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	4f 93       	push	r20
 10c:	5f 93       	push	r21
 10e:	6f 93       	push	r22
 110:	7f 93       	push	r23
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
 11e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 122:	88 7f       	andi	r24, 0xF8	; 248
 124:	80 38       	cpi	r24, 0x80	; 128
 126:	49 f0       	breq	.+18     	; 0x13a <__vector_24+0x3e>
 128:	18 f4       	brcc	.+6      	; 0x130 <__vector_24+0x34>
 12a:	88 23       	and	r24, r24
 12c:	19 f1       	breq	.+70     	; 0x174 <__vector_24+0x78>
 12e:	28 c0       	rjmp	.+80     	; 0x180 <__vector_24+0x84>
 130:	88 3a       	cpi	r24, 0xA8	; 168
 132:	71 f0       	breq	.+28     	; 0x150 <__vector_24+0x54>
 134:	88 3b       	cpi	r24, 0xB8	; 184
 136:	a9 f0       	breq	.+42     	; 0x162 <__vector_24+0x66>
 138:	23 c0       	rjmp	.+70     	; 0x180 <__vector_24+0x84>
 13a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 13e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <I2C_recv>
 142:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <I2C_recv+0x1>
 146:	09 95       	icall
 148:	85 ec       	ldi	r24, 0xC5	; 197
 14a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 14e:	1b c0       	rjmp	.+54     	; 0x186 <__vector_24+0x8a>
 150:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 154:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <__data_end+0x1>
 158:	09 95       	icall
 15a:	85 ec       	ldi	r24, 0xC5	; 197
 15c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 160:	12 c0       	rjmp	.+36     	; 0x186 <__vector_24+0x8a>
 162:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 166:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <__data_end+0x1>
 16a:	09 95       	icall
 16c:	85 ec       	ldi	r24, 0xC5	; 197
 16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 172:	09 c0       	rjmp	.+18     	; 0x186 <__vector_24+0x8a>
 174:	ec eb       	ldi	r30, 0xBC	; 188
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	10 82       	st	Z, r1
 17a:	85 ec       	ldi	r24, 0xC5	; 197
 17c:	80 83       	st	Z, r24
 17e:	03 c0       	rjmp	.+6      	; 0x186 <__vector_24+0x8a>
 180:	85 ec       	ldi	r24, 0xC5	; 197
 182:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <I2C_received>:
	}
}

void TWI_Stop()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 1a8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <command>
 1ac:	08 95       	ret

000001ae <SR_Interrupt_init>:
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 1b4:	8d bb       	out	0x1d, r24	; 29
 1b6:	08 95       	ret

000001b8 <shift10bits>:
 1b8:	9c 01       	movw	r18, r24
 1ba:	5e 9a       	sbi	0x0b, 6	; 11
 1bc:	9a e0       	ldi	r25, 0x0A	; 10
 1be:	5b 98       	cbi	0x0b, 3	; 11
 1c0:	31 ff       	sbrs	r19, 1
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <shift10bits+0x10>
 1c4:	5c 9a       	sbi	0x0b, 4	; 11
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <shift10bits+0x12>
 1c8:	5c 98       	cbi	0x0b, 4	; 11
 1ca:	5b 9a       	sbi	0x0b, 3	; 11
 1cc:	5b 99       	sbic	0x0b, 3	; 11
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <shift10bits+0x1e>
 1d0:	5b 9a       	sbi	0x0b, 3	; 11
 1d2:	5b 9b       	sbis	0x0b, 3	; 11
 1d4:	fd cf       	rjmp	.-6      	; 0x1d0 <shift10bits+0x18>
 1d6:	22 0f       	add	r18, r18
 1d8:	33 1f       	adc	r19, r19
 1da:	91 50       	subi	r25, 0x01	; 1
 1dc:	81 f7       	brne	.-32     	; 0x1be <shift10bits+0x6>
 1de:	5b 98       	cbi	0x0b, 3	; 11
 1e0:	5c 98       	cbi	0x0b, 4	; 11
 1e2:	08 95       	ret

000001e4 <shiftdata>:
 1e4:	98 e0       	ldi	r25, 0x08	; 8
 1e6:	5b 98       	cbi	0x0b, 3	; 11
 1e8:	88 23       	and	r24, r24
 1ea:	14 f4       	brge	.+4      	; 0x1f0 <shiftdata+0xc>
 1ec:	5c 9a       	sbi	0x0b, 4	; 11
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <shiftdata+0xe>
 1f0:	5c 98       	cbi	0x0b, 4	; 11
 1f2:	5b 9a       	sbi	0x0b, 3	; 11
 1f4:	5b 99       	sbic	0x0b, 3	; 11
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <shiftdata+0x1a>
 1f8:	5b 9a       	sbi	0x0b, 3	; 11
 1fa:	5b 9b       	sbis	0x0b, 3	; 11
 1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <shiftdata+0x14>
 1fe:	88 0f       	add	r24, r24
 200:	91 50       	subi	r25, 0x01	; 1
 202:	89 f7       	brne	.-30     	; 0x1e6 <shiftdata+0x2>
 204:	5b 98       	cbi	0x0b, 3	; 11
 206:	5c 98       	cbi	0x0b, 4	; 11
 208:	08 95       	ret

0000020a <getOutput>:
 20a:	27 e0       	ldi	r18, 0x07	; 7
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	5b 98       	cbi	0x0b, 3	; 11
 216:	5b 9a       	sbi	0x0b, 3	; 11
 218:	5b 99       	sbic	0x0b, 3	; 11
 21a:	03 c0       	rjmp	.+6      	; 0x222 <getOutput+0x18>
 21c:	5b 9a       	sbi	0x0b, 3	; 11
 21e:	5b 9b       	sbis	0x0b, 3	; 11
 220:	fd cf       	rjmp	.-6      	; 0x21c <getOutput+0x12>
 222:	4d 9b       	sbis	0x09, 5	; 9
 224:	08 c0       	rjmp	.+16     	; 0x236 <getOutput+0x2c>
 226:	ab 01       	movw	r20, r22
 228:	02 2e       	mov	r0, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <getOutput+0x26>
 22c:	44 0f       	add	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <getOutput+0x22>
 234:	84 2b       	or	r24, r20
 236:	21 50       	subi	r18, 0x01	; 1
 238:	31 09       	sbc	r19, r1
 23a:	60 f7       	brcc	.-40     	; 0x214 <getOutput+0xa>
 23c:	5b 98       	cbi	0x0b, 3	; 11
 23e:	5e 98       	cbi	0x0b, 6	; 11
 240:	08 95       	ret

00000242 <read_EEPROM>:
 242:	cf 93       	push	r28
 244:	c8 2f       	mov	r28, r24
 246:	8f 77       	andi	r24, 0x7F	; 127
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	97 60       	ori	r25, 0x07	; 7
 24c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <shift10bits>
 250:	8c 2f       	mov	r24, r28
 252:	0e 94 05 01 	call	0x20a	; 0x20a <getOutput>
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <I2C_requested>:
 25a:	cf 93       	push	r28
 25c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <command>
 260:	8c 31       	cpi	r24, 0x1C	; 28
 262:	39 f5       	brne	.+78     	; 0x2b2 <I2C_requested+0x58>
 264:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <mean_counter>
 268:	c7 30       	cpi	r28, 0x07	; 7
 26a:	b8 f4       	brcc	.+46     	; 0x29a <I2C_requested+0x40>
 26c:	83 e6       	ldi	r24, 0x63	; 99
 26e:	8c 0f       	add	r24, r28
 270:	0e 94 21 01 	call	0x242	; 0x242 <read_EEPROM>
 274:	ec 2f       	mov	r30, r28
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	ec 58       	subi	r30, 0x8C	; 140
 27a:	fe 4f       	sbci	r31, 0xFE	; 254
 27c:	80 83       	st	Z, r24
 27e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <mean_counter>
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	ec 58       	subi	r30, 0x8C	; 140
 286:	fe 4f       	sbci	r31, 0xFE	; 254
 288:	80 81       	ld	r24, Z
 28a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 28e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mean_counter>
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mean_counter>
 298:	34 c0       	rjmp	.+104    	; 0x302 <I2C_requested+0xa8>
 29a:	66 e0       	ldi	r22, 0x06	; 6
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	85 e7       	ldi	r24, 0x75	; 117
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 53 00 	call	0xa6	; 0xa6 <crc_calculate>
 2a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mean_counter>
 2b0:	28 c0       	rjmp	.+80     	; 0x302 <I2C_requested+0xa8>
 2b2:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <command>
 2b6:	8b 31       	cpi	r24, 0x1B	; 27
 2b8:	21 f5       	brne	.+72     	; 0x302 <I2C_requested+0xa8>
 2ba:	c0 91 0f 01 	lds	r28, 0x010F	; 0x80010f <data_counter>
 2be:	c3 36       	cpi	r28, 0x63	; 99
 2c0:	b0 f4       	brcc	.+44     	; 0x2ee <I2C_requested+0x94>
 2c2:	8c 2f       	mov	r24, r28
 2c4:	0e 94 21 01 	call	0x242	; 0x242 <read_EEPROM>
 2c8:	ec 2f       	mov	r30, r28
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	e0 5f       	subi	r30, 0xF0	; 240
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	80 83       	st	Z, r24
 2d2:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <data_counter>
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	e0 5f       	subi	r30, 0xF0	; 240
 2da:	fe 4f       	sbci	r31, 0xFE	; 254
 2dc:	80 81       	ld	r24, Z
 2de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2e2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <data_counter>
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <data_counter>
 2ec:	0a c0       	rjmp	.+20     	; 0x302 <I2C_requested+0xa8>
 2ee:	63 e6       	ldi	r22, 0x63	; 99
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	80 e1       	ldi	r24, 0x10	; 16
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 53 00 	call	0xa6	; 0xa6 <crc_calculate>
 2fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 2fe:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <data_counter>
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <write_byte>:
 306:	cf 93       	push	r28
 308:	c6 2f       	mov	r28, r22
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	80 68       	ori	r24, 0x80	; 128
 30e:	92 60       	ori	r25, 0x02	; 2
 310:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <shift10bits>
 314:	8c 2f       	mov	r24, r28
 316:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <shiftdata>
 31a:	5e 98       	cbi	0x0b, 6	; 11
 31c:	5e 9a       	sbi	0x0b, 6	; 11
 31e:	4d 9b       	sbis	0x09, 5	; 9
 320:	fe cf       	rjmp	.-4      	; 0x31e <write_byte+0x18>
 322:	5e 98       	cbi	0x0b, 6	; 11
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <EWEN>:
 328:	80 e6       	ldi	r24, 0x60	; 96
 32a:	92 e0       	ldi	r25, 0x02	; 2
 32c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <shift10bits>
 330:	5e 98       	cbi	0x0b, 6	; 11
 332:	08 95       	ret

00000334 <EWDS>:
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	92 e0       	ldi	r25, 0x02	; 2
 338:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <shift10bits>
 33c:	5e 98       	cbi	0x0b, 6	; 11
 33e:	08 95       	ret

00000340 <writeAll>:
 340:	cf 93       	push	r28
 342:	c8 2f       	mov	r28, r24
 344:	80 e2       	ldi	r24, 0x20	; 32
 346:	92 e0       	ldi	r25, 0x02	; 2
 348:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <shift10bits>
 34c:	8c 2f       	mov	r24, r28
 34e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <shiftdata>
 352:	5e 98       	cbi	0x0b, 6	; 11
 354:	5e 9a       	sbi	0x0b, 6	; 11
 356:	4d 9b       	sbis	0x09, 5	; 9
 358:	fe cf       	rjmp	.-4      	; 0x356 <writeAll+0x16>
 35a:	5e 98       	cbi	0x0b, 6	; 11
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <timerInit>:
 360:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 364:	8d e0       	ldi	r24, 0x0D	; 13
 366:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 36a:	ef e6       	ldi	r30, 0x6F	; 111
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	82 60       	ori	r24, 0x02	; 2
 372:	80 83       	st	Z, r24
 374:	83 e1       	ldi	r24, 0x13	; 19
 376:	93 e1       	ldi	r25, 0x13	; 19
 378:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 37c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 380:	08 95       	ret

00000382 <TWI_init>:
 382:	ec eb       	ldi	r30, 0xBC	; 188
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	8e 7b       	andi	r24, 0xBE	; 190
 38a:	80 83       	st	Z, r24
 38c:	80 81       	ld	r24, Z
 38e:	84 60       	ori	r24, 0x04	; 4
 390:	80 83       	st	Z, r24
 392:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 396:	8c e0       	ldi	r24, 0x0C	; 12
 398:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 39c:	08 95       	ret

0000039e <TWI_Start>:
 39e:	84 ee       	ldi	r24, 0xE4	; 228
 3a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 3a4:	ec eb       	ldi	r30, 0xBC	; 188
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	88 23       	and	r24, r24
 3ac:	ec f7       	brge	.-6      	; 0x3a8 <TWI_Start+0xa>
 3ae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 3b2:	08 95       	ret

000003b4 <TWI_Repeat_Start>:
 3b4:	84 ee       	ldi	r24, 0xE4	; 228
 3b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 3ba:	ec eb       	ldi	r30, 0xBC	; 188
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	88 23       	and	r24, r24
 3c2:	ec f7       	brge	.-6      	; 0x3be <TWI_Repeat_Start+0xa>
 3c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 3c8:	08 95       	ret

000003ca <TWI_RegisterSelect>:
}

void TWI_RegisterSelect(uint8_t addr, uint8_t reg)
{
	TWDR = (addr << 1) | 0x00; // Last bit = 0 (Write)
 3ca:	88 0f       	add	r24, r24
 3cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1 << TWINT) | (1 << TWEN);
 3d0:	84 e8       	ldi	r24, 0x84	; 132
 3d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1 << TWINT)))
 3d6:	ec eb       	ldi	r30, 0xBC	; 188
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	88 23       	and	r24, r24
 3de:	ec f7       	brge	.-6      	; 0x3da <TWI_RegisterSelect+0x10>
		;
	if ((TWSR & 0xF8) != 0x18)
 3e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 3e4:	88 7f       	andi	r24, 0xF8	; 248
 3e6:	88 31       	cpi	r24, 0x18	; 24
 3e8:	61 f4       	brne	.+24     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		Error();
	}
	else
	{
		Success();
		TWDR = reg; // Register to Write
 3ea:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
		TWCR = (1 << TWINT) | (1 << TWEN);
 3ee:	84 e8       	ldi	r24, 0x84	; 132
 3f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while (!(TWCR & (1 << TWINT)))
 3f4:	ec eb       	ldi	r30, 0xBC	; 188
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	88 23       	and	r24, r24
 3fc:	ec f7       	brge	.-6      	; 0x3f8 <TWI_RegisterSelect+0x2e>
			;
		if ((TWSR & 0xF8) != 0x28)
 3fe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 402:	08 95       	ret

00000404 <TWI_Read>:
	}
}

int TWI_Read(uint8_t addr, uint8_t N_ACK)
{
	TWDR = (addr << 1) | 0x01; // Last bit = 1 (Read)
 404:	88 0f       	add	r24, r24
 406:	81 60       	ori	r24, 0x01	; 1
 408:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1 << TWINT) | (1 << TWEN);
 40c:	84 e8       	ldi	r24, 0x84	; 132
 40e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1 << TWINT)))
 412:	ec eb       	ldi	r30, 0xBC	; 188
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	88 23       	and	r24, r24
 41a:	ec f7       	brge	.-6      	; 0x416 <TWI_Read+0x12>
		;
	if ((TWSR & 0xF8) != 0x40)
 41c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 420:	88 7f       	andi	r24, 0xF8	; 248
 422:	80 34       	cpi	r24, 0x40	; 64
 424:	99 f4       	brne	.+38     	; 0x44c <TWI_Read+0x48>
		Error();
	}
	else
	{
		Success();
		TWCR = (1 << TWINT) | (1 << TWEN) | (N_ACK << TWEA);
 426:	20 e4       	ldi	r18, 0x40	; 64
 428:	62 9f       	mul	r22, r18
 42a:	c0 01       	movw	r24, r0
 42c:	11 24       	eor	r1, r1
 42e:	84 68       	ori	r24, 0x84	; 132
 430:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while (!(TWCR & (1 << TWINT)))
 434:	ec eb       	ldi	r30, 0xBC	; 188
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	88 23       	and	r24, r24
 43c:	ec f7       	brge	.-6      	; 0x438 <TWI_Read+0x34>
			;

		if (N_ACK == 1) // Read Again
 43e:	61 30       	cpi	r22, 0x01	; 1
 440:	19 f4       	brne	.+6      	; 0x448 <TWI_Read+0x44>
		{
			if ((TWSR & 0xF8) != 0x50)
 442:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 446:	02 c0       	rjmp	.+4      	; 0x44c <TWI_Read+0x48>
				Success();
			}
		}
		else
		{
			if ((TWSR & 0xF8) != 0x58)
 448:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
				Success();
			}
		}
	}

	return (TWDR);
 44c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	08 95       	ret

00000454 <TWI_Write>:

void TWI_Write(uint8_t data)
{
	TWDR = data; // Write data on previous selected register
 454:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1 << TWINT) | (1 << TWEN);
 458:	84 e8       	ldi	r24, 0x84	; 132
 45a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1 << TWINT)))
 45e:	ec eb       	ldi	r30, 0xBC	; 188
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	88 23       	and	r24, r24
 466:	ec f7       	brge	.-6      	; 0x462 <TWI_Write+0xe>
		;
	if ((TWSR & 0xF8) != 0x28)
 468:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 46c:	08 95       	ret

0000046e <DS1621_Init>:
	}
}

void DS1621_Init()
{
	TWI_Start();
 46e:	0e 94 cf 01 	call	0x39e	; 0x39e <TWI_Start>
	TWI_RegisterSelect(DS1621, ACCESS_CONFIG);
 472:	6c ea       	ldi	r22, 0xAC	; 172
 474:	88 e4       	ldi	r24, 0x48	; 72
 476:	0e 94 e5 01 	call	0x3ca	; 0x3ca <TWI_RegisterSelect>
	TWI_Write(0x03); // LSB (1SHOT) set to 1 = 1-shot mode conversions and POL = 1
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	0e 94 2a 02 	call	0x454	; 0x454 <TWI_Write>
	}
}

void TWI_Stop()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 480:	84 e9       	ldi	r24, 0x94	; 148
 482:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 486:	08 95       	ret

00000488 <readTemperature>:

	TWI_Stop();
}

char readTemperature()
{
 488:	cf 93       	push	r28
	char temperatureMSB;
	char temperatureLSB;

	TWI_Start();
 48a:	0e 94 cf 01 	call	0x39e	; 0x39e <TWI_Start>
	TWI_RegisterSelect(DS1621, START_CONVERT_T);
 48e:	6e ee       	ldi	r22, 0xEE	; 238
 490:	88 e4       	ldi	r24, 0x48	; 72
 492:	0e 94 e5 01 	call	0x3ca	; 0x3ca <TWI_RegisterSelect>
	// No further data is required

	TWI_Repeat_Start();
 496:	0e 94 da 01 	call	0x3b4	; 0x3b4 <TWI_Repeat_Start>
	TWI_RegisterSelect(DS1621, READ_TEMPERATURE);
 49a:	6a ea       	ldi	r22, 0xAA	; 170
 49c:	88 e4       	ldi	r24, 0x48	; 72
 49e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <TWI_RegisterSelect>
	TWI_Repeat_Start();
 4a2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <TWI_Repeat_Start>
	temperatureMSB = TWI_Read(DS1621, NACK); // ACK not required
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	88 e4       	ldi	r24, 0x48	; 72
 4aa:	0e 94 02 02 	call	0x404	; 0x404 <TWI_Read>
 4ae:	c8 2f       	mov	r28, r24
	temperatureLSB = TWI_Read(DS1621, NACK); // ACK not required
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	88 e4       	ldi	r24, 0x48	; 72
 4b4:	0e 94 02 02 	call	0x404	; 0x404 <TWI_Read>
	}
}

void TWI_Stop()
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 4b8:	84 e9       	ldi	r24, 0x94	; 148
 4ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	temperatureLSB = TWI_Read(DS1621, NACK); // ACK not required

	TWI_Stop();

	return temperatureMSB;
}
 4be:	8c 2f       	mov	r24, r28
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <__vector_11>:

void readhundredtemp(uint8_t temp);
void readmaxminprom();

ISR(TIMER1_COMPA_vect)
{
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	8f 92       	push	r8
 4d0:	9f 92       	push	r9
 4d2:	af 92       	push	r10
 4d4:	bf 92       	push	r11
 4d6:	cf 92       	push	r12
 4d8:	df 92       	push	r13
 4da:	ef 92       	push	r14
 4dc:	ff 92       	push	r15
 4de:	1f 93       	push	r17
 4e0:	2f 93       	push	r18
 4e2:	3f 93       	push	r19
 4e4:	4f 93       	push	r20
 4e6:	5f 93       	push	r21
 4e8:	6f 93       	push	r22
 4ea:	7f 93       	push	r23
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	af 93       	push	r26
 4f2:	bf 93       	push	r27
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	ef 93       	push	r30
 4fa:	ff 93       	push	r31
	minuteflag = 0x01;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <minuteflag>
	char temperature;
	uint8_t hundred_count;
	//PORTD ^= (1 << PIND6);
	temperature = readTemperature(); // Leer temperatura
 502:	0e 94 44 02 	call	0x488	; 0x488 <readTemperature>
 506:	c8 2f       	mov	r28, r24

	uint8_t entero, decimal; // promedio
	float conthist;			 //

	hundred_count = read_EEPROM(MEMORY_SIZE);				  // Contador de cuantas veces se llego a 100 datos guardados
 508:	83 e6       	ldi	r24, 0x63	; 99
 50a:	0e 94 21 01 	call	0x242	; 0x242 <read_EEPROM>
 50e:	d8 2f       	mov	r29, r24
	conthist = (((float)hundred_count * 100) + (float)count); // contador historico
 510:	10 91 0e 01 	lds	r17, 0x010E	; 0x80010e <count>
 514:	68 2f       	mov	r22, r24
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatunsisf>
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	48 ec       	ldi	r20, 0xC8	; 200
 526:	52 e4       	ldi	r21, 0x42	; 66
 528:	0e 94 60 05 	call	0xac0	; 0xac0 <__mulsf3>
 52c:	6b 01       	movw	r12, r22
 52e:	7c 01       	movw	r14, r24
 530:	61 2f       	mov	r22, r17
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatunsisf>
 53c:	9b 01       	movw	r18, r22
 53e:	ac 01       	movw	r20, r24
 540:	c7 01       	movw	r24, r14
 542:	b6 01       	movw	r22, r12
 544:	0e 94 c5 03 	call	0x78a	; 0x78a <__addsf3>
 548:	6b 01       	movw	r12, r22
 54a:	7c 01       	movw	r14, r24

	if (hundred_count == 0 && count == 0)
 54c:	d1 11       	cpse	r29, r1
 54e:	11 c0       	rjmp	.+34     	; 0x572 <__vector_11+0xae>
 550:	11 11       	cpse	r17, r1
 552:	0f c0       	rjmp	.+30     	; 0x572 <__vector_11+0xae>
		promedio = (float)temperature;
 554:	6c 2f       	mov	r22, r28
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatunsisf>
 560:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <promedio>
 564:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <promedio+0x1>
 568:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <promedio+0x2>
 56c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <promedio+0x3>
 570:	32 c0       	rjmp	.+100    	; 0x5d6 <__vector_11+0x112>
	else
		promedio = ((float)temperature + promedio * conthist) / (conthist + 1);
 572:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <promedio>
 576:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <promedio+0x1>
 57a:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <promedio+0x2>
 57e:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <promedio+0x3>
 582:	c7 01       	movw	r24, r14
 584:	b6 01       	movw	r22, r12
 586:	0e 94 60 05 	call	0xac0	; 0xac0 <__mulsf3>
 58a:	4b 01       	movw	r8, r22
 58c:	5c 01       	movw	r10, r24
 58e:	6c 2f       	mov	r22, r28
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatunsisf>
 59a:	9b 01       	movw	r18, r22
 59c:	ac 01       	movw	r20, r24
 59e:	c5 01       	movw	r24, r10
 5a0:	b4 01       	movw	r22, r8
 5a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__addsf3>
 5a6:	4b 01       	movw	r8, r22
 5a8:	5c 01       	movw	r10, r24
 5aa:	20 e0       	ldi	r18, 0x00	; 0
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	40 e8       	ldi	r20, 0x80	; 128
 5b0:	5f e3       	ldi	r21, 0x3F	; 63
 5b2:	c7 01       	movw	r24, r14
 5b4:	b6 01       	movw	r22, r12
 5b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__addsf3>
 5ba:	9b 01       	movw	r18, r22
 5bc:	ac 01       	movw	r20, r24
 5be:	c5 01       	movw	r24, r10
 5c0:	b4 01       	movw	r22, r8
 5c2:	0e 94 31 04 	call	0x862	; 0x862 <__divsf3>
 5c6:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <promedio>
 5ca:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <promedio+0x1>
 5ce:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <promedio+0x2>
 5d2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <promedio+0x3>

	entero = (uint8_t)promedio; // obtenemos el numero
 5d6:	80 90 08 01 	lds	r8, 0x0108	; 0x800108 <promedio>
 5da:	90 90 09 01 	lds	r9, 0x0109	; 0x800109 <promedio+0x1>
 5de:	a0 90 0a 01 	lds	r10, 0x010A	; 0x80010a <promedio+0x2>
 5e2:	b0 90 0b 01 	lds	r11, 0x010B	; 0x80010b <promedio+0x3>
 5e6:	c5 01       	movw	r24, r10
 5e8:	b4 01       	movw	r22, r8
 5ea:	0e 94 a3 04 	call	0x946	; 0x946 <__fixunssfsi>
 5ee:	16 2f       	mov	r17, r22
	decimal = (promedio - (float)entero) * 100;
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatunsisf>
 5fa:	9b 01       	movw	r18, r22
 5fc:	ac 01       	movw	r20, r24
 5fe:	c5 01       	movw	r24, r10
 600:	b4 01       	movw	r22, r8
 602:	0e 94 c4 03 	call	0x788	; 0x788 <__subsf3>
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	48 ec       	ldi	r20, 0xC8	; 200
 60c:	52 e4       	ldi	r21, 0x42	; 66
 60e:	0e 94 60 05 	call	0xac0	; 0xac0 <__mulsf3>
 612:	0e 94 a3 04 	call	0x946	; 0x946 <__fixunssfsi>
 616:	b6 2e       	mov	r11, r22

	EWEN();
 618:	0e 94 94 01 	call	0x328	; 0x328 <EWEN>

	if (temperature > maxTemp)
 61c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <maxTemp>
 620:	8c 17       	cp	r24, r28
 622:	68 f4       	brcc	.+26     	; 0x63e <__vector_11+0x17a>
	{
		write_byte(MEMORY_SIZE + 1, temperature); // Almacenando temperatura maxima
 624:	6c 2f       	mov	r22, r28
 626:	84 e6       	ldi	r24, 0x64	; 100
 628:	0e 94 83 01 	call	0x306	; 0x306 <write_byte>
		// write_byte(MEMORY_SIZE + 2, conthist);
		write_byte(MEMORY_SIZE + 2, (uint8_t)conthist);
 62c:	c7 01       	movw	r24, r14
 62e:	b6 01       	movw	r22, r12
 630:	0e 94 a3 04 	call	0x946	; 0x946 <__fixunssfsi>
 634:	85 e6       	ldi	r24, 0x65	; 101
 636:	0e 94 83 01 	call	0x306	; 0x306 <write_byte>
		maxTemp = temperature;
 63a:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <maxTemp>
	}

	if (temperature < minTemp)
 63e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <minTemp>
 642:	c8 17       	cp	r28, r24
 644:	68 f4       	brcc	.+26     	; 0x660 <__vector_11+0x19c>
	{
		write_byte(MEMORY_SIZE + 3, temperature); // Almacenando temperatura minima
 646:	6c 2f       	mov	r22, r28
 648:	86 e6       	ldi	r24, 0x66	; 102
 64a:	0e 94 83 01 	call	0x306	; 0x306 <write_byte>
		// write_byte(MEMORY_SIZE + 4, conthist);	  // Almacenando tiempo
		write_byte(MEMORY_SIZE + 4, (uint8_t)conthist); // Almacenando tiempo
 64e:	c7 01       	movw	r24, r14
 650:	b6 01       	movw	r22, r12
 652:	0e 94 a3 04 	call	0x946	; 0x946 <__fixunssfsi>
 656:	87 e6       	ldi	r24, 0x67	; 103
 658:	0e 94 83 01 	call	0x306	; 0x306 <write_byte>
		minTemp = temperature;
 65c:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <minTemp>
	}

	write_byte(MEMORY_SIZE + 5, entero);
 660:	61 2f       	mov	r22, r17
 662:	88 e6       	ldi	r24, 0x68	; 104
 664:	0e 94 83 01 	call	0x306	; 0x306 <write_byte>
	write_byte(MEMORY_SIZE + 6, decimal);
 668:	6b 2d       	mov	r22, r11
 66a:	89 e6       	ldi	r24, 0x69	; 105
 66c:	0e 94 83 01 	call	0x306	; 0x306 <write_byte>

	write_byte(count, temperature); // Almacenar temperatura
 670:	6c 2f       	mov	r22, r28
 672:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <count>
 676:	0e 94 83 01 	call	0x306	; 0x306 <write_byte>

	count++;
 67a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <count>
 67e:	8f 5f       	subi	r24, 0xFF	; 255
	if (count >= MEMORY_SIZE)
 680:	83 36       	cpi	r24, 0x63	; 99
 682:	18 f4       	brcc	.+6      	; 0x68a <__vector_11+0x1c6>
	write_byte(MEMORY_SIZE + 5, entero);
	write_byte(MEMORY_SIZE + 6, decimal);

	write_byte(count, temperature); // Almacenar temperatura

	count++;
 684:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <count>
 688:	07 c0       	rjmp	.+14     	; 0x698 <__vector_11+0x1d4>
	if (count >= MEMORY_SIZE)
	{
		count = 0;
 68a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <count>
		hundred_count++;
		write_byte(MEMORY_SIZE, hundred_count);
 68e:	61 e0       	ldi	r22, 0x01	; 1
 690:	6d 0f       	add	r22, r29
 692:	83 e6       	ldi	r24, 0x63	; 99
 694:	0e 94 83 01 	call	0x306	; 0x306 <write_byte>
	}
	EWDS();
 698:	0e 94 9a 01 	call	0x334	; 0x334 <EWDS>
}
 69c:	ff 91       	pop	r31
 69e:	ef 91       	pop	r30
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	bf 91       	pop	r27
 6a6:	af 91       	pop	r26
 6a8:	9f 91       	pop	r25
 6aa:	8f 91       	pop	r24
 6ac:	7f 91       	pop	r23
 6ae:	6f 91       	pop	r22
 6b0:	5f 91       	pop	r21
 6b2:	4f 91       	pop	r20
 6b4:	3f 91       	pop	r19
 6b6:	2f 91       	pop	r18
 6b8:	1f 91       	pop	r17
 6ba:	ff 90       	pop	r15
 6bc:	ef 90       	pop	r14
 6be:	df 90       	pop	r13
 6c0:	cf 90       	pop	r12
 6c2:	bf 90       	pop	r11
 6c4:	af 90       	pop	r10
 6c6:	9f 90       	pop	r9
 6c8:	8f 90       	pop	r8
 6ca:	0f 90       	pop	r0
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	0f 90       	pop	r0
 6d0:	1f 90       	pop	r1
 6d2:	18 95       	reti

000006d4 <__vector_1>:
		}
	}
}

ISR(INT0_vect)
{
 6d4:	1f 92       	push	r1
 6d6:	0f 92       	push	r0
 6d8:	0f b6       	in	r0, 0x3f	; 63
 6da:	0f 92       	push	r0
 6dc:	11 24       	eor	r1, r1
 6de:	2f 93       	push	r18
 6e0:	3f 93       	push	r19
 6e2:	4f 93       	push	r20
 6e4:	5f 93       	push	r21
 6e6:	6f 93       	push	r22
 6e8:	7f 93       	push	r23
 6ea:	8f 93       	push	r24
 6ec:	9f 93       	push	r25
 6ee:	af 93       	push	r26
 6f0:	bf 93       	push	r27
 6f2:	ef 93       	push	r30
 6f4:	ff 93       	push	r31
	if ((PIND & (1 << SR)) == (1 << SR)) // Changes Atmega to Slave mode
 6f6:	4a 9b       	sbis	0x09, 2	; 9
 6f8:	10 c0       	rjmp	.+32     	; 0x71a <__vector_1+0x46>
	{
		// Turns on pind7
		PORTD |= (1 << PIND7);
 6fa:	5f 9a       	sbi	0x0b, 7	; 11
		// set received/requested callbacks
		I2C_setCallbacks(I2C_received, I2C_requested);
 6fc:	6d e2       	ldi	r22, 0x2D	; 45
 6fe:	71 e0       	ldi	r23, 0x01	; 1
 700:	84 ed       	ldi	r24, 0xD4	; 212
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 6c 00 	call	0xd8	; 0xd8 <I2C_setCallbacks>

		// init I2C
		I2C_init(I2C_ADDR);
 708:	80 e2       	ldi	r24, 0x20	; 32
 70a:	0e 94 75 00 	call	0xea	; 0xea <I2C_init>
		// Disable timer 1
		TIMSK1 &= ~(1 << OCIE1A);
 70e:	ef e6       	ldi	r30, 0x6F	; 111
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	8d 7f       	andi	r24, 0xFD	; 253
 716:	80 83       	st	Z, r24
 718:	07 c0       	rjmp	.+14     	; 0x728 <__vector_1+0x54>
	}
	else // Changes Atmega to Master mode
	{
		TWI_init();
 71a:	0e 94 c1 01 	call	0x382	; 0x382 <TWI_init>
		TIMSK1 |= (1 << OCIE1A);
 71e:	ef e6       	ldi	r30, 0x6F	; 111
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	80 81       	ld	r24, Z
 724:	82 60       	ori	r24, 0x02	; 2
 726:	80 83       	st	Z, r24
	}
}
 728:	ff 91       	pop	r31
 72a:	ef 91       	pop	r30
 72c:	bf 91       	pop	r27
 72e:	af 91       	pop	r26
 730:	9f 91       	pop	r25
 732:	8f 91       	pop	r24
 734:	7f 91       	pop	r23
 736:	6f 91       	pop	r22
 738:	5f 91       	pop	r21
 73a:	4f 91       	pop	r20
 73c:	3f 91       	pop	r19
 73e:	2f 91       	pop	r18
 740:	0f 90       	pop	r0
 742:	0f be       	out	0x3f, r0	; 63
 744:	0f 90       	pop	r0
 746:	1f 90       	pop	r1
 748:	18 95       	reti

0000074a <main>:

int main(void)
{
	TWI_init(); // Inicia I2C Master
 74a:	0e 94 c1 01 	call	0x382	; 0x382 <TWI_init>
	DS1621_Init();
 74e:	0e 94 37 02 	call	0x46e	; 0x46e <DS1621_Init>
	SR_Interrupt_init();
 752:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SR_Interrupt_init>

	DDRD |= (1 << MOSI) | (1 << CLK) | (1 << SELECT); // MOSI, CLK, SELECT(CS) SALIDAS
 756:	8a b1       	in	r24, 0x0a	; 10
 758:	88 65       	ori	r24, 0x58	; 88
 75a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << MISO);							  // MISO ENTRADA
 75c:	55 98       	cbi	0x0a, 5	; 10

	// Sets pin d7 as output
	DDRD |= (1 << PIND7);
 75e:	57 9a       	sbi	0x0a, 7	; 10
	// Turns on pind7

	PORTD &= ~(1 << CLK); // clk = 0
 760:	5b 98       	cbi	0x0b, 3	; 11

	// LEDs
	DDRD |= (1 << 6);
 762:	56 9a       	sbi	0x0a, 6	; 10

	sei();
 764:	78 94       	sei
	timerInit();
 766:	0e 94 b0 01 	call	0x360	; 0x360 <timerInit>
	
	EWEN();
 76a:	0e 94 94 01 	call	0x328	; 0x328 <EWEN>
	writeAll(0x00);
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	0e 94 a0 01 	call	0x340	; 0x340 <writeAll>
	EWDS();
 774:	0e 94 9a 01 	call	0x334	; 0x334 <EWDS>
 778:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <minuteflag>
	{

		if (minuteflag == 0x01)
		{

			minuteflag = 0x00;
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	01 c0       	rjmp	.+2      	; 0x782 <main+0x38>
 780:	89 2f       	mov	r24, r25
	EWDS();

	while (1)
	{

		if (minuteflag == 0x01)
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	f1 f7       	brne	.-4      	; 0x782 <main+0x38>
 786:	fc cf       	rjmp	.-8      	; 0x780 <main+0x36>

00000788 <__subsf3>:
 788:	50 58       	subi	r21, 0x80	; 128

0000078a <__addsf3>:
 78a:	bb 27       	eor	r27, r27
 78c:	aa 27       	eor	r26, r26
 78e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__addsf3x>
 792:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__fp_round>
 796:	0e 94 18 05 	call	0xa30	; 0xa30 <__fp_pscA>
 79a:	38 f0       	brcs	.+14     	; 0x7aa <__addsf3+0x20>
 79c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__fp_pscB>
 7a0:	20 f0       	brcs	.+8      	; 0x7aa <__addsf3+0x20>
 7a2:	39 f4       	brne	.+14     	; 0x7b2 <__addsf3+0x28>
 7a4:	9f 3f       	cpi	r25, 0xFF	; 255
 7a6:	19 f4       	brne	.+6      	; 0x7ae <__addsf3+0x24>
 7a8:	26 f4       	brtc	.+8      	; 0x7b2 <__addsf3+0x28>
 7aa:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__fp_nan>
 7ae:	0e f4       	brtc	.+2      	; 0x7b2 <__addsf3+0x28>
 7b0:	e0 95       	com	r30
 7b2:	e7 fb       	bst	r30, 7
 7b4:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_inf>

000007b8 <__addsf3x>:
 7b8:	e9 2f       	mov	r30, r25
 7ba:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fp_split3>
 7be:	58 f3       	brcs	.-42     	; 0x796 <__addsf3+0xc>
 7c0:	ba 17       	cp	r27, r26
 7c2:	62 07       	cpc	r22, r18
 7c4:	73 07       	cpc	r23, r19
 7c6:	84 07       	cpc	r24, r20
 7c8:	95 07       	cpc	r25, r21
 7ca:	20 f0       	brcs	.+8      	; 0x7d4 <__addsf3x+0x1c>
 7cc:	79 f4       	brne	.+30     	; 0x7ec <__addsf3x+0x34>
 7ce:	a6 f5       	brtc	.+104    	; 0x838 <__addsf3x+0x80>
 7d0:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_zero>
 7d4:	0e f4       	brtc	.+2      	; 0x7d8 <__addsf3x+0x20>
 7d6:	e0 95       	com	r30
 7d8:	0b 2e       	mov	r0, r27
 7da:	ba 2f       	mov	r27, r26
 7dc:	a0 2d       	mov	r26, r0
 7de:	0b 01       	movw	r0, r22
 7e0:	b9 01       	movw	r22, r18
 7e2:	90 01       	movw	r18, r0
 7e4:	0c 01       	movw	r0, r24
 7e6:	ca 01       	movw	r24, r20
 7e8:	a0 01       	movw	r20, r0
 7ea:	11 24       	eor	r1, r1
 7ec:	ff 27       	eor	r31, r31
 7ee:	59 1b       	sub	r21, r25
 7f0:	99 f0       	breq	.+38     	; 0x818 <__addsf3x+0x60>
 7f2:	59 3f       	cpi	r21, 0xF9	; 249
 7f4:	50 f4       	brcc	.+20     	; 0x80a <__addsf3x+0x52>
 7f6:	50 3e       	cpi	r21, 0xE0	; 224
 7f8:	68 f1       	brcs	.+90     	; 0x854 <__addsf3x+0x9c>
 7fa:	1a 16       	cp	r1, r26
 7fc:	f0 40       	sbci	r31, 0x00	; 0
 7fe:	a2 2f       	mov	r26, r18
 800:	23 2f       	mov	r18, r19
 802:	34 2f       	mov	r19, r20
 804:	44 27       	eor	r20, r20
 806:	58 5f       	subi	r21, 0xF8	; 248
 808:	f3 cf       	rjmp	.-26     	; 0x7f0 <__addsf3x+0x38>
 80a:	46 95       	lsr	r20
 80c:	37 95       	ror	r19
 80e:	27 95       	ror	r18
 810:	a7 95       	ror	r26
 812:	f0 40       	sbci	r31, 0x00	; 0
 814:	53 95       	inc	r21
 816:	c9 f7       	brne	.-14     	; 0x80a <__addsf3x+0x52>
 818:	7e f4       	brtc	.+30     	; 0x838 <__addsf3x+0x80>
 81a:	1f 16       	cp	r1, r31
 81c:	ba 0b       	sbc	r27, r26
 81e:	62 0b       	sbc	r22, r18
 820:	73 0b       	sbc	r23, r19
 822:	84 0b       	sbc	r24, r20
 824:	ba f0       	brmi	.+46     	; 0x854 <__addsf3x+0x9c>
 826:	91 50       	subi	r25, 0x01	; 1
 828:	a1 f0       	breq	.+40     	; 0x852 <__addsf3x+0x9a>
 82a:	ff 0f       	add	r31, r31
 82c:	bb 1f       	adc	r27, r27
 82e:	66 1f       	adc	r22, r22
 830:	77 1f       	adc	r23, r23
 832:	88 1f       	adc	r24, r24
 834:	c2 f7       	brpl	.-16     	; 0x826 <__addsf3x+0x6e>
 836:	0e c0       	rjmp	.+28     	; 0x854 <__addsf3x+0x9c>
 838:	ba 0f       	add	r27, r26
 83a:	62 1f       	adc	r22, r18
 83c:	73 1f       	adc	r23, r19
 83e:	84 1f       	adc	r24, r20
 840:	48 f4       	brcc	.+18     	; 0x854 <__addsf3x+0x9c>
 842:	87 95       	ror	r24
 844:	77 95       	ror	r23
 846:	67 95       	ror	r22
 848:	b7 95       	ror	r27
 84a:	f7 95       	ror	r31
 84c:	9e 3f       	cpi	r25, 0xFE	; 254
 84e:	08 f0       	brcs	.+2      	; 0x852 <__addsf3x+0x9a>
 850:	b0 cf       	rjmp	.-160    	; 0x7b2 <__addsf3+0x28>
 852:	93 95       	inc	r25
 854:	88 0f       	add	r24, r24
 856:	08 f0       	brcs	.+2      	; 0x85a <__addsf3x+0xa2>
 858:	99 27       	eor	r25, r25
 85a:	ee 0f       	add	r30, r30
 85c:	97 95       	ror	r25
 85e:	87 95       	ror	r24
 860:	08 95       	ret

00000862 <__divsf3>:
 862:	0e 94 45 04 	call	0x88a	; 0x88a <__divsf3x>
 866:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__fp_round>
 86a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__fp_pscB>
 86e:	58 f0       	brcs	.+22     	; 0x886 <__divsf3+0x24>
 870:	0e 94 18 05 	call	0xa30	; 0xa30 <__fp_pscA>
 874:	40 f0       	brcs	.+16     	; 0x886 <__divsf3+0x24>
 876:	29 f4       	brne	.+10     	; 0x882 <__divsf3+0x20>
 878:	5f 3f       	cpi	r21, 0xFF	; 255
 87a:	29 f0       	breq	.+10     	; 0x886 <__divsf3+0x24>
 87c:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_inf>
 880:	51 11       	cpse	r21, r1
 882:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_szero>
 886:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__fp_nan>

0000088a <__divsf3x>:
 88a:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fp_split3>
 88e:	68 f3       	brcs	.-38     	; 0x86a <__divsf3+0x8>

00000890 <__divsf3_pse>:
 890:	99 23       	and	r25, r25
 892:	b1 f3       	breq	.-20     	; 0x880 <__divsf3+0x1e>
 894:	55 23       	and	r21, r21
 896:	91 f3       	breq	.-28     	; 0x87c <__divsf3+0x1a>
 898:	95 1b       	sub	r25, r21
 89a:	55 0b       	sbc	r21, r21
 89c:	bb 27       	eor	r27, r27
 89e:	aa 27       	eor	r26, r26
 8a0:	62 17       	cp	r22, r18
 8a2:	73 07       	cpc	r23, r19
 8a4:	84 07       	cpc	r24, r20
 8a6:	38 f0       	brcs	.+14     	; 0x8b6 <__divsf3_pse+0x26>
 8a8:	9f 5f       	subi	r25, 0xFF	; 255
 8aa:	5f 4f       	sbci	r21, 0xFF	; 255
 8ac:	22 0f       	add	r18, r18
 8ae:	33 1f       	adc	r19, r19
 8b0:	44 1f       	adc	r20, r20
 8b2:	aa 1f       	adc	r26, r26
 8b4:	a9 f3       	breq	.-22     	; 0x8a0 <__divsf3_pse+0x10>
 8b6:	35 d0       	rcall	.+106    	; 0x922 <__stack+0x23>
 8b8:	0e 2e       	mov	r0, r30
 8ba:	3a f0       	brmi	.+14     	; 0x8ca <__divsf3_pse+0x3a>
 8bc:	e0 e8       	ldi	r30, 0x80	; 128
 8be:	32 d0       	rcall	.+100    	; 0x924 <__stack+0x25>
 8c0:	91 50       	subi	r25, 0x01	; 1
 8c2:	50 40       	sbci	r21, 0x00	; 0
 8c4:	e6 95       	lsr	r30
 8c6:	00 1c       	adc	r0, r0
 8c8:	ca f7       	brpl	.-14     	; 0x8bc <__divsf3_pse+0x2c>
 8ca:	2b d0       	rcall	.+86     	; 0x922 <__stack+0x23>
 8cc:	fe 2f       	mov	r31, r30
 8ce:	29 d0       	rcall	.+82     	; 0x922 <__stack+0x23>
 8d0:	66 0f       	add	r22, r22
 8d2:	77 1f       	adc	r23, r23
 8d4:	88 1f       	adc	r24, r24
 8d6:	bb 1f       	adc	r27, r27
 8d8:	26 17       	cp	r18, r22
 8da:	37 07       	cpc	r19, r23
 8dc:	48 07       	cpc	r20, r24
 8de:	ab 07       	cpc	r26, r27
 8e0:	b0 e8       	ldi	r27, 0x80	; 128
 8e2:	09 f0       	breq	.+2      	; 0x8e6 <__divsf3_pse+0x56>
 8e4:	bb 0b       	sbc	r27, r27
 8e6:	80 2d       	mov	r24, r0
 8e8:	bf 01       	movw	r22, r30
 8ea:	ff 27       	eor	r31, r31
 8ec:	93 58       	subi	r25, 0x83	; 131
 8ee:	5f 4f       	sbci	r21, 0xFF	; 255
 8f0:	3a f0       	brmi	.+14     	; 0x900 <__stack+0x1>
 8f2:	9e 3f       	cpi	r25, 0xFE	; 254
 8f4:	51 05       	cpc	r21, r1
 8f6:	78 f0       	brcs	.+30     	; 0x916 <__stack+0x17>
 8f8:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_inf>
 8fc:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_szero>
 900:	5f 3f       	cpi	r21, 0xFF	; 255
 902:	e4 f3       	brlt	.-8      	; 0x8fc <__divsf3_pse+0x6c>
 904:	98 3e       	cpi	r25, 0xE8	; 232
 906:	d4 f3       	brlt	.-12     	; 0x8fc <__divsf3_pse+0x6c>
 908:	86 95       	lsr	r24
 90a:	77 95       	ror	r23
 90c:	67 95       	ror	r22
 90e:	b7 95       	ror	r27
 910:	f7 95       	ror	r31
 912:	9f 5f       	subi	r25, 0xFF	; 255
 914:	c9 f7       	brne	.-14     	; 0x908 <__stack+0x9>
 916:	88 0f       	add	r24, r24
 918:	91 1d       	adc	r25, r1
 91a:	96 95       	lsr	r25
 91c:	87 95       	ror	r24
 91e:	97 f9       	bld	r25, 7
 920:	08 95       	ret
 922:	e1 e0       	ldi	r30, 0x01	; 1
 924:	66 0f       	add	r22, r22
 926:	77 1f       	adc	r23, r23
 928:	88 1f       	adc	r24, r24
 92a:	bb 1f       	adc	r27, r27
 92c:	62 17       	cp	r22, r18
 92e:	73 07       	cpc	r23, r19
 930:	84 07       	cpc	r24, r20
 932:	ba 07       	cpc	r27, r26
 934:	20 f0       	brcs	.+8      	; 0x93e <__stack+0x3f>
 936:	62 1b       	sub	r22, r18
 938:	73 0b       	sbc	r23, r19
 93a:	84 0b       	sbc	r24, r20
 93c:	ba 0b       	sbc	r27, r26
 93e:	ee 1f       	adc	r30, r30
 940:	88 f7       	brcc	.-30     	; 0x924 <__stack+0x25>
 942:	e0 95       	com	r30
 944:	08 95       	ret

00000946 <__fixunssfsi>:
 946:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__fp_splitA>
 94a:	88 f0       	brcs	.+34     	; 0x96e <__fixunssfsi+0x28>
 94c:	9f 57       	subi	r25, 0x7F	; 127
 94e:	98 f0       	brcs	.+38     	; 0x976 <__fixunssfsi+0x30>
 950:	b9 2f       	mov	r27, r25
 952:	99 27       	eor	r25, r25
 954:	b7 51       	subi	r27, 0x17	; 23
 956:	b0 f0       	brcs	.+44     	; 0x984 <__fixunssfsi+0x3e>
 958:	e1 f0       	breq	.+56     	; 0x992 <__fixunssfsi+0x4c>
 95a:	66 0f       	add	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	99 1f       	adc	r25, r25
 962:	1a f0       	brmi	.+6      	; 0x96a <__fixunssfsi+0x24>
 964:	ba 95       	dec	r27
 966:	c9 f7       	brne	.-14     	; 0x95a <__fixunssfsi+0x14>
 968:	14 c0       	rjmp	.+40     	; 0x992 <__fixunssfsi+0x4c>
 96a:	b1 30       	cpi	r27, 0x01	; 1
 96c:	91 f0       	breq	.+36     	; 0x992 <__fixunssfsi+0x4c>
 96e:	0e 94 59 05 	call	0xab2	; 0xab2 <__fp_zero>
 972:	b1 e0       	ldi	r27, 0x01	; 1
 974:	08 95       	ret
 976:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_zero>
 97a:	67 2f       	mov	r22, r23
 97c:	78 2f       	mov	r23, r24
 97e:	88 27       	eor	r24, r24
 980:	b8 5f       	subi	r27, 0xF8	; 248
 982:	39 f0       	breq	.+14     	; 0x992 <__fixunssfsi+0x4c>
 984:	b9 3f       	cpi	r27, 0xF9	; 249
 986:	cc f3       	brlt	.-14     	; 0x97a <__fixunssfsi+0x34>
 988:	86 95       	lsr	r24
 98a:	77 95       	ror	r23
 98c:	67 95       	ror	r22
 98e:	b3 95       	inc	r27
 990:	d9 f7       	brne	.-10     	; 0x988 <__fixunssfsi+0x42>
 992:	3e f4       	brtc	.+14     	; 0x9a2 <__fixunssfsi+0x5c>
 994:	90 95       	com	r25
 996:	80 95       	com	r24
 998:	70 95       	com	r23
 99a:	61 95       	neg	r22
 99c:	7f 4f       	sbci	r23, 0xFF	; 255
 99e:	8f 4f       	sbci	r24, 0xFF	; 255
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
 9a2:	08 95       	ret

000009a4 <__floatunsisf>:
 9a4:	e8 94       	clt
 9a6:	09 c0       	rjmp	.+18     	; 0x9ba <__floatsisf+0x12>

000009a8 <__floatsisf>:
 9a8:	97 fb       	bst	r25, 7
 9aa:	3e f4       	brtc	.+14     	; 0x9ba <__floatsisf+0x12>
 9ac:	90 95       	com	r25
 9ae:	80 95       	com	r24
 9b0:	70 95       	com	r23
 9b2:	61 95       	neg	r22
 9b4:	7f 4f       	sbci	r23, 0xFF	; 255
 9b6:	8f 4f       	sbci	r24, 0xFF	; 255
 9b8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ba:	99 23       	and	r25, r25
 9bc:	a9 f0       	breq	.+42     	; 0x9e8 <__floatsisf+0x40>
 9be:	f9 2f       	mov	r31, r25
 9c0:	96 e9       	ldi	r25, 0x96	; 150
 9c2:	bb 27       	eor	r27, r27
 9c4:	93 95       	inc	r25
 9c6:	f6 95       	lsr	r31
 9c8:	87 95       	ror	r24
 9ca:	77 95       	ror	r23
 9cc:	67 95       	ror	r22
 9ce:	b7 95       	ror	r27
 9d0:	f1 11       	cpse	r31, r1
 9d2:	f8 cf       	rjmp	.-16     	; 0x9c4 <__floatsisf+0x1c>
 9d4:	fa f4       	brpl	.+62     	; 0xa14 <__floatsisf+0x6c>
 9d6:	bb 0f       	add	r27, r27
 9d8:	11 f4       	brne	.+4      	; 0x9de <__floatsisf+0x36>
 9da:	60 ff       	sbrs	r22, 0
 9dc:	1b c0       	rjmp	.+54     	; 0xa14 <__floatsisf+0x6c>
 9de:	6f 5f       	subi	r22, 0xFF	; 255
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	8f 4f       	sbci	r24, 0xFF	; 255
 9e4:	9f 4f       	sbci	r25, 0xFF	; 255
 9e6:	16 c0       	rjmp	.+44     	; 0xa14 <__floatsisf+0x6c>
 9e8:	88 23       	and	r24, r24
 9ea:	11 f0       	breq	.+4      	; 0x9f0 <__floatsisf+0x48>
 9ec:	96 e9       	ldi	r25, 0x96	; 150
 9ee:	11 c0       	rjmp	.+34     	; 0xa12 <__floatsisf+0x6a>
 9f0:	77 23       	and	r23, r23
 9f2:	21 f0       	breq	.+8      	; 0x9fc <__floatsisf+0x54>
 9f4:	9e e8       	ldi	r25, 0x8E	; 142
 9f6:	87 2f       	mov	r24, r23
 9f8:	76 2f       	mov	r23, r22
 9fa:	05 c0       	rjmp	.+10     	; 0xa06 <__floatsisf+0x5e>
 9fc:	66 23       	and	r22, r22
 9fe:	71 f0       	breq	.+28     	; 0xa1c <__floatsisf+0x74>
 a00:	96 e8       	ldi	r25, 0x86	; 134
 a02:	86 2f       	mov	r24, r22
 a04:	70 e0       	ldi	r23, 0x00	; 0
 a06:	60 e0       	ldi	r22, 0x00	; 0
 a08:	2a f0       	brmi	.+10     	; 0xa14 <__floatsisf+0x6c>
 a0a:	9a 95       	dec	r25
 a0c:	66 0f       	add	r22, r22
 a0e:	77 1f       	adc	r23, r23
 a10:	88 1f       	adc	r24, r24
 a12:	da f7       	brpl	.-10     	; 0xa0a <__floatsisf+0x62>
 a14:	88 0f       	add	r24, r24
 a16:	96 95       	lsr	r25
 a18:	87 95       	ror	r24
 a1a:	97 f9       	bld	r25, 7
 a1c:	08 95       	ret

00000a1e <__fp_inf>:
 a1e:	97 f9       	bld	r25, 7
 a20:	9f 67       	ori	r25, 0x7F	; 127
 a22:	80 e8       	ldi	r24, 0x80	; 128
 a24:	70 e0       	ldi	r23, 0x00	; 0
 a26:	60 e0       	ldi	r22, 0x00	; 0
 a28:	08 95       	ret

00000a2a <__fp_nan>:
 a2a:	9f ef       	ldi	r25, 0xFF	; 255
 a2c:	80 ec       	ldi	r24, 0xC0	; 192
 a2e:	08 95       	ret

00000a30 <__fp_pscA>:
 a30:	00 24       	eor	r0, r0
 a32:	0a 94       	dec	r0
 a34:	16 16       	cp	r1, r22
 a36:	17 06       	cpc	r1, r23
 a38:	18 06       	cpc	r1, r24
 a3a:	09 06       	cpc	r0, r25
 a3c:	08 95       	ret

00000a3e <__fp_pscB>:
 a3e:	00 24       	eor	r0, r0
 a40:	0a 94       	dec	r0
 a42:	12 16       	cp	r1, r18
 a44:	13 06       	cpc	r1, r19
 a46:	14 06       	cpc	r1, r20
 a48:	05 06       	cpc	r0, r21
 a4a:	08 95       	ret

00000a4c <__fp_round>:
 a4c:	09 2e       	mov	r0, r25
 a4e:	03 94       	inc	r0
 a50:	00 0c       	add	r0, r0
 a52:	11 f4       	brne	.+4      	; 0xa58 <__fp_round+0xc>
 a54:	88 23       	and	r24, r24
 a56:	52 f0       	brmi	.+20     	; 0xa6c <__fp_round+0x20>
 a58:	bb 0f       	add	r27, r27
 a5a:	40 f4       	brcc	.+16     	; 0xa6c <__fp_round+0x20>
 a5c:	bf 2b       	or	r27, r31
 a5e:	11 f4       	brne	.+4      	; 0xa64 <__fp_round+0x18>
 a60:	60 ff       	sbrs	r22, 0
 a62:	04 c0       	rjmp	.+8      	; 0xa6c <__fp_round+0x20>
 a64:	6f 5f       	subi	r22, 0xFF	; 255
 a66:	7f 4f       	sbci	r23, 0xFF	; 255
 a68:	8f 4f       	sbci	r24, 0xFF	; 255
 a6a:	9f 4f       	sbci	r25, 0xFF	; 255
 a6c:	08 95       	ret

00000a6e <__fp_split3>:
 a6e:	57 fd       	sbrc	r21, 7
 a70:	90 58       	subi	r25, 0x80	; 128
 a72:	44 0f       	add	r20, r20
 a74:	55 1f       	adc	r21, r21
 a76:	59 f0       	breq	.+22     	; 0xa8e <__fp_splitA+0x10>
 a78:	5f 3f       	cpi	r21, 0xFF	; 255
 a7a:	71 f0       	breq	.+28     	; 0xa98 <__fp_splitA+0x1a>
 a7c:	47 95       	ror	r20

00000a7e <__fp_splitA>:
 a7e:	88 0f       	add	r24, r24
 a80:	97 fb       	bst	r25, 7
 a82:	99 1f       	adc	r25, r25
 a84:	61 f0       	breq	.+24     	; 0xa9e <__fp_splitA+0x20>
 a86:	9f 3f       	cpi	r25, 0xFF	; 255
 a88:	79 f0       	breq	.+30     	; 0xaa8 <__fp_splitA+0x2a>
 a8a:	87 95       	ror	r24
 a8c:	08 95       	ret
 a8e:	12 16       	cp	r1, r18
 a90:	13 06       	cpc	r1, r19
 a92:	14 06       	cpc	r1, r20
 a94:	55 1f       	adc	r21, r21
 a96:	f2 cf       	rjmp	.-28     	; 0xa7c <__fp_split3+0xe>
 a98:	46 95       	lsr	r20
 a9a:	f1 df       	rcall	.-30     	; 0xa7e <__fp_splitA>
 a9c:	08 c0       	rjmp	.+16     	; 0xaae <__fp_splitA+0x30>
 a9e:	16 16       	cp	r1, r22
 aa0:	17 06       	cpc	r1, r23
 aa2:	18 06       	cpc	r1, r24
 aa4:	99 1f       	adc	r25, r25
 aa6:	f1 cf       	rjmp	.-30     	; 0xa8a <__fp_splitA+0xc>
 aa8:	86 95       	lsr	r24
 aaa:	71 05       	cpc	r23, r1
 aac:	61 05       	cpc	r22, r1
 aae:	08 94       	sec
 ab0:	08 95       	ret

00000ab2 <__fp_zero>:
 ab2:	e8 94       	clt

00000ab4 <__fp_szero>:
 ab4:	bb 27       	eor	r27, r27
 ab6:	66 27       	eor	r22, r22
 ab8:	77 27       	eor	r23, r23
 aba:	cb 01       	movw	r24, r22
 abc:	97 f9       	bld	r25, 7
 abe:	08 95       	ret

00000ac0 <__mulsf3>:
 ac0:	0e 94 73 05 	call	0xae6	; 0xae6 <__mulsf3x>
 ac4:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__fp_round>
 ac8:	0e 94 18 05 	call	0xa30	; 0xa30 <__fp_pscA>
 acc:	38 f0       	brcs	.+14     	; 0xadc <__mulsf3+0x1c>
 ace:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__fp_pscB>
 ad2:	20 f0       	brcs	.+8      	; 0xadc <__mulsf3+0x1c>
 ad4:	95 23       	and	r25, r21
 ad6:	11 f0       	breq	.+4      	; 0xadc <__mulsf3+0x1c>
 ad8:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_inf>
 adc:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__fp_nan>
 ae0:	11 24       	eor	r1, r1
 ae2:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_szero>

00000ae6 <__mulsf3x>:
 ae6:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fp_split3>
 aea:	70 f3       	brcs	.-36     	; 0xac8 <__mulsf3+0x8>

00000aec <__mulsf3_pse>:
 aec:	95 9f       	mul	r25, r21
 aee:	c1 f3       	breq	.-16     	; 0xae0 <__mulsf3+0x20>
 af0:	95 0f       	add	r25, r21
 af2:	50 e0       	ldi	r21, 0x00	; 0
 af4:	55 1f       	adc	r21, r21
 af6:	62 9f       	mul	r22, r18
 af8:	f0 01       	movw	r30, r0
 afa:	72 9f       	mul	r23, r18
 afc:	bb 27       	eor	r27, r27
 afe:	f0 0d       	add	r31, r0
 b00:	b1 1d       	adc	r27, r1
 b02:	63 9f       	mul	r22, r19
 b04:	aa 27       	eor	r26, r26
 b06:	f0 0d       	add	r31, r0
 b08:	b1 1d       	adc	r27, r1
 b0a:	aa 1f       	adc	r26, r26
 b0c:	64 9f       	mul	r22, r20
 b0e:	66 27       	eor	r22, r22
 b10:	b0 0d       	add	r27, r0
 b12:	a1 1d       	adc	r26, r1
 b14:	66 1f       	adc	r22, r22
 b16:	82 9f       	mul	r24, r18
 b18:	22 27       	eor	r18, r18
 b1a:	b0 0d       	add	r27, r0
 b1c:	a1 1d       	adc	r26, r1
 b1e:	62 1f       	adc	r22, r18
 b20:	73 9f       	mul	r23, r19
 b22:	b0 0d       	add	r27, r0
 b24:	a1 1d       	adc	r26, r1
 b26:	62 1f       	adc	r22, r18
 b28:	83 9f       	mul	r24, r19
 b2a:	a0 0d       	add	r26, r0
 b2c:	61 1d       	adc	r22, r1
 b2e:	22 1f       	adc	r18, r18
 b30:	74 9f       	mul	r23, r20
 b32:	33 27       	eor	r19, r19
 b34:	a0 0d       	add	r26, r0
 b36:	61 1d       	adc	r22, r1
 b38:	23 1f       	adc	r18, r19
 b3a:	84 9f       	mul	r24, r20
 b3c:	60 0d       	add	r22, r0
 b3e:	21 1d       	adc	r18, r1
 b40:	82 2f       	mov	r24, r18
 b42:	76 2f       	mov	r23, r22
 b44:	6a 2f       	mov	r22, r26
 b46:	11 24       	eor	r1, r1
 b48:	9f 57       	subi	r25, 0x7F	; 127
 b4a:	50 40       	sbci	r21, 0x00	; 0
 b4c:	9a f0       	brmi	.+38     	; 0xb74 <__mulsf3_pse+0x88>
 b4e:	f1 f0       	breq	.+60     	; 0xb8c <__mulsf3_pse+0xa0>
 b50:	88 23       	and	r24, r24
 b52:	4a f0       	brmi	.+18     	; 0xb66 <__mulsf3_pse+0x7a>
 b54:	ee 0f       	add	r30, r30
 b56:	ff 1f       	adc	r31, r31
 b58:	bb 1f       	adc	r27, r27
 b5a:	66 1f       	adc	r22, r22
 b5c:	77 1f       	adc	r23, r23
 b5e:	88 1f       	adc	r24, r24
 b60:	91 50       	subi	r25, 0x01	; 1
 b62:	50 40       	sbci	r21, 0x00	; 0
 b64:	a9 f7       	brne	.-22     	; 0xb50 <__mulsf3_pse+0x64>
 b66:	9e 3f       	cpi	r25, 0xFE	; 254
 b68:	51 05       	cpc	r21, r1
 b6a:	80 f0       	brcs	.+32     	; 0xb8c <__mulsf3_pse+0xa0>
 b6c:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_inf>
 b70:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_szero>
 b74:	5f 3f       	cpi	r21, 0xFF	; 255
 b76:	e4 f3       	brlt	.-8      	; 0xb70 <__mulsf3_pse+0x84>
 b78:	98 3e       	cpi	r25, 0xE8	; 232
 b7a:	d4 f3       	brlt	.-12     	; 0xb70 <__mulsf3_pse+0x84>
 b7c:	86 95       	lsr	r24
 b7e:	77 95       	ror	r23
 b80:	67 95       	ror	r22
 b82:	b7 95       	ror	r27
 b84:	f7 95       	ror	r31
 b86:	e7 95       	ror	r30
 b88:	9f 5f       	subi	r25, 0xFF	; 255
 b8a:	c1 f7       	brne	.-16     	; 0xb7c <__mulsf3_pse+0x90>
 b8c:	fe 2b       	or	r31, r30
 b8e:	88 0f       	add	r24, r24
 b90:	91 1d       	adc	r25, r1
 b92:	96 95       	lsr	r25
 b94:	87 95       	ror	r24
 b96:	97 f9       	bld	r25, 7
 b98:	08 95       	ret

00000b9a <_exit>:
 b9a:	f8 94       	cli

00000b9c <__stop_program>:
 b9c:	ff cf       	rjmp	.-2      	; 0xb9c <__stop_program>
