
memTemp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000960  000009f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000960  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  000009f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f87  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000828  00000000  00000000  00001acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000832  00000000  00000000  000022f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00002b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054c  00000000  00000000  00002d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006fa  00000000  00000000  000032c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000039c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
  9e:	0c 94 ae 04 	jmp	0x95c	; 0x95c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <shift10bits>:
	}
}

void TWI_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
  a6:	9c 01       	movw	r18, r24
  a8:	5a 9a       	sbi	0x0b, 2	; 11
  aa:	9a e0       	ldi	r25, 0x0A	; 10
  ac:	5b 98       	cbi	0x0b, 3	; 11
  ae:	31 ff       	sbrs	r19, 1
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <shift10bits+0x10>
  b2:	5c 9a       	sbi	0x0b, 4	; 11
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <shift10bits+0x12>
  b6:	5c 98       	cbi	0x0b, 4	; 11
  b8:	5b 9a       	sbi	0x0b, 3	; 11
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	91 50       	subi	r25, 0x01	; 1
  c0:	a9 f7       	brne	.-22     	; 0xac <shift10bits+0x6>
  c2:	5b 98       	cbi	0x0b, 3	; 11
  c4:	5c 98       	cbi	0x0b, 4	; 11
  c6:	08 95       	ret

000000c8 <shiftdata>:
  c8:	98 e0       	ldi	r25, 0x08	; 8
  ca:	5b 98       	cbi	0x0b, 3	; 11
  cc:	88 23       	and	r24, r24
  ce:	14 f4       	brge	.+4      	; 0xd4 <shiftdata+0xc>
  d0:	5c 9a       	sbi	0x0b, 4	; 11
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <shiftdata+0xe>
  d4:	5c 98       	cbi	0x0b, 4	; 11
  d6:	5b 9a       	sbi	0x0b, 3	; 11
  d8:	88 0f       	add	r24, r24
  da:	91 50       	subi	r25, 0x01	; 1
  dc:	b1 f7       	brne	.-20     	; 0xca <shiftdata+0x2>
  de:	5b 98       	cbi	0x0b, 3	; 11
  e0:	5c 98       	cbi	0x0b, 4	; 11
  e2:	08 95       	ret

000000e4 <getOutput>:
  e4:	27 e0       	ldi	r18, 0x07	; 7
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	5b 98       	cbi	0x0b, 3	; 11
  f0:	5b 9a       	sbi	0x0b, 3	; 11
  f2:	4d 9b       	sbis	0x09, 5	; 9
  f4:	08 c0       	rjmp	.+16     	; 0x106 <getOutput+0x22>
  f6:	ab 01       	movw	r20, r22
  f8:	02 2e       	mov	r0, r18
  fa:	02 c0       	rjmp	.+4      	; 0x100 <getOutput+0x1c>
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <getOutput+0x18>
 104:	84 2b       	or	r24, r20
 106:	21 50       	subi	r18, 0x01	; 1
 108:	31 09       	sbc	r19, r1
 10a:	88 f7       	brcc	.-30     	; 0xee <getOutput+0xa>
 10c:	5b 98       	cbi	0x0b, 3	; 11
 10e:	5a 98       	cbi	0x0b, 2	; 11
 110:	08 95       	ret

00000112 <read_EEPROM>:
 112:	cf 93       	push	r28
 114:	c8 2f       	mov	r28, r24
 116:	8f 77       	andi	r24, 0x7F	; 127
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	97 60       	ori	r25, 0x07	; 7
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <shift10bits>
 120:	8c 2f       	mov	r24, r28
 122:	0e 94 72 00 	call	0xe4	; 0xe4 <getOutput>
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <write_byte>:
 12a:	cf 93       	push	r28
 12c:	c6 2f       	mov	r28, r22
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	80 68       	ori	r24, 0x80	; 128
 132:	92 60       	ori	r25, 0x02	; 2
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <shift10bits>
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 64 00 	call	0xc8	; 0xc8 <shiftdata>
 13e:	5a 98       	cbi	0x0b, 2	; 11
 140:	5a 9a       	sbi	0x0b, 2	; 11
 142:	89 b1       	in	r24, 0x09	; 9
 144:	88 23       	and	r24, r24
 146:	e9 f3       	breq	.-6      	; 0x142 <write_byte+0x18>
 148:	5a 98       	cbi	0x0b, 2	; 11
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <EWEN>:
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	92 e0       	ldi	r25, 0x02	; 2
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <shift10bits>
 156:	5a 98       	cbi	0x0b, 2	; 11
 158:	08 95       	ret

0000015a <EWDS>:
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	92 e0       	ldi	r25, 0x02	; 2
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <shift10bits>
 162:	5a 98       	cbi	0x0b, 2	; 11
 164:	08 95       	ret

00000166 <timerInit>:
 166:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 16a:	8d e0       	ldi	r24, 0x0D	; 13
 16c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 170:	ef e6       	ldi	r30, 0x6F	; 111
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	82 60       	ori	r24, 0x02	; 2
 178:	80 83       	st	Z, r24
 17a:	83 e1       	ldi	r24, 0x13	; 19
 17c:	93 e1       	ldi	r25, 0x13	; 19
 17e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 182:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 186:	08 95       	ret

00000188 <TWI_init>:
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 18e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 198:	08 95       	ret

0000019a <TWI_Start>:
 19a:	84 ee       	ldi	r24, 0xE4	; 228
 19c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1a0:	ec eb       	ldi	r30, 0xBC	; 188
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	88 23       	and	r24, r24
 1a8:	ec f7       	brge	.-6      	; 0x1a4 <TWI_Start+0xa>
 1aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1ae:	08 95       	ret

000001b0 <TWI_Repeat_Start>:
 1b0:	84 ee       	ldi	r24, 0xE4	; 228
 1b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1b6:	ec eb       	ldi	r30, 0xBC	; 188
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	88 23       	and	r24, r24
 1be:	ec f7       	brge	.-6      	; 0x1ba <TWI_Repeat_Start+0xa>
 1c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1c4:	08 95       	ret

000001c6 <TWI_RegisterSelect>:
}

void TWI_RegisterSelect(uint8_t addr, uint8_t reg)
{
	TWDR = (addr<<1) | 0x00; // Last bit = 0 (Write)
 1c6:	88 0f       	add	r24, r24
 1c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 1cc:	84 e8       	ldi	r24, 0x84	; 132
 1ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR&(1<<TWINT)));
 1d2:	ec eb       	ldi	r30, 0xBC	; 188
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	88 23       	and	r24, r24
 1da:	ec f7       	brge	.-6      	; 0x1d6 <TWI_RegisterSelect+0x10>
	if((TWSR & 0xF8) != 0x18)
 1dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1e0:	88 7f       	andi	r24, 0xF8	; 248
 1e2:	88 31       	cpi	r24, 0x18	; 24
 1e4:	61 f4       	brne	.+24     	; 0x1fe <TWI_RegisterSelect+0x38>
		Error();
	}
	else
	{
		Success();
		TWDR = reg; // Register to Write
 1e6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
		TWCR = (1<<TWINT) | (1<<TWEN);
 1ea:	84 e8       	ldi	r24, 0x84	; 132
 1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(!(TWCR&(1<<TWINT)));
 1f0:	ec eb       	ldi	r30, 0xBC	; 188
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	88 23       	and	r24, r24
 1f8:	ec f7       	brge	.-6      	; 0x1f4 <TWI_RegisterSelect+0x2e>
		if((TWSR & 0xF8) != 0x28)
 1fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1fe:	08 95       	ret

00000200 <TWI_Read>:
	}
}

int TWI_Read(uint8_t addr, uint8_t N_ACK)
{
	TWDR = (addr<<1) | 0x01; // Last bit = 1 (Read)
 200:	88 0f       	add	r24, r24
 202:	81 60       	ori	r24, 0x01	; 1
 204:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 208:	84 e8       	ldi	r24, 0x84	; 132
 20a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR&(1<<TWINT)));
 20e:	ec eb       	ldi	r30, 0xBC	; 188
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	88 23       	and	r24, r24
 216:	ec f7       	brge	.-6      	; 0x212 <TWI_Read+0x12>
	if((TWSR & 0xF8) != 0x40)
 218:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 21c:	88 7f       	andi	r24, 0xF8	; 248
 21e:	80 34       	cpi	r24, 0x40	; 64
 220:	99 f4       	brne	.+38     	; 0x248 <TWI_Read+0x48>
		Error();
	}
	else
	{
		Success();
		TWCR = (1<<TWINT) | (1<<TWEN) | (N_ACK<<TWEA);
 222:	20 e4       	ldi	r18, 0x40	; 64
 224:	62 9f       	mul	r22, r18
 226:	c0 01       	movw	r24, r0
 228:	11 24       	eor	r1, r1
 22a:	84 68       	ori	r24, 0x84	; 132
 22c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
		while(!(TWCR&(1<<TWINT)));
 230:	ec eb       	ldi	r30, 0xBC	; 188
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	88 23       	and	r24, r24
 238:	ec f7       	brge	.-6      	; 0x234 <TWI_Read+0x34>

		if(N_ACK == 1) // Read Again
 23a:	61 30       	cpi	r22, 0x01	; 1
 23c:	19 f4       	brne	.+6      	; 0x244 <TWI_Read+0x44>
		{
			if((TWSR & 0xF8) != 0x50)
 23e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 242:	02 c0       	rjmp	.+4      	; 0x248 <TWI_Read+0x48>
			}

		}
		else
		{
			if((TWSR & 0xF8) != 0x58)
 244:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
				Success();
			}
		}
	}

	return(TWDR);
 248:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	08 95       	ret

00000250 <TWI_Write>:

void TWI_Write(uint8_t data)
{
	TWDR = data; // Write data on previous selected register
 250:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
 254:	84 e8       	ldi	r24, 0x84	; 132
 256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR&(1<<TWINT)));
 25a:	ec eb       	ldi	r30, 0xBC	; 188
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	88 23       	and	r24, r24
 262:	ec f7       	brge	.-6      	; 0x25e <TWI_Write+0xe>
	if((TWSR & 0xF8) != 0x28)
 264:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 268:	08 95       	ret

0000026a <DS1621_Init>:

}

void DS1621_Init()
{
	TWI_Start();
 26a:	0e 94 cd 00 	call	0x19a	; 0x19a <TWI_Start>
	TWI_RegisterSelect(DS1621, ACCESS_CONFIG);
 26e:	6c ea       	ldi	r22, 0xAC	; 172
 270:	88 e4       	ldi	r24, 0x48	; 72
 272:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <TWI_RegisterSelect>
	TWI_Write(0x03); // LSB (1SHOT) set to 1 = 1-shot mode conversions and POL = 1
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	0e 94 28 01 	call	0x250	; 0x250 <TWI_Write>
	}
}

void TWI_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
 27c:	84 e9       	ldi	r24, 0x94	; 148
 27e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 282:	08 95       	ret

00000284 <readTemperature>:
	
	TWI_Stop();
}

char readTemperature()
{
 284:	cf 93       	push	r28
	char temperatureMSB;
	char temperatureLSB;
	
	TWI_Start();
 286:	0e 94 cd 00 	call	0x19a	; 0x19a <TWI_Start>
	TWI_RegisterSelect(DS1621, START_CONVERT_T);
 28a:	6e ee       	ldi	r22, 0xEE	; 238
 28c:	88 e4       	ldi	r24, 0x48	; 72
 28e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <TWI_RegisterSelect>
	// No further data is required
	
	TWI_Repeat_Start();
 292:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <TWI_Repeat_Start>
	TWI_RegisterSelect(DS1621, READ_TEMPERATURE);
 296:	6a ea       	ldi	r22, 0xAA	; 170
 298:	88 e4       	ldi	r24, 0x48	; 72
 29a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <TWI_RegisterSelect>
	TWI_Repeat_Start();
 29e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <TWI_Repeat_Start>
	temperatureMSB = TWI_Read(DS1621, NACK); // ACK not required
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	88 e4       	ldi	r24, 0x48	; 72
 2a6:	0e 94 00 01 	call	0x200	; 0x200 <TWI_Read>
 2aa:	c8 2f       	mov	r28, r24
	temperatureLSB = TWI_Read(DS1621, NACK); // ACK not required
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	88 e4       	ldi	r24, 0x48	; 72
 2b0:	0e 94 00 01 	call	0x200	; 0x200 <TWI_Read>
	}
}

void TWI_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
 2b4:	84 e9       	ldi	r24, 0x94	; 148
 2b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	temperatureLSB = TWI_Read(DS1621, NACK); // ACK not required
	
	TWI_Stop();
	
	return temperatureMSB;
}
 2ba:	8c 2f       	mov	r24, r28
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <__vector_11>:
void readhundredtemp(uint8_t temp);
void readmaxminprom();


ISR(TIMER1_COMPA_vect)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	8f 92       	push	r8
 2cc:	9f 92       	push	r9
 2ce:	af 92       	push	r10
 2d0:	bf 92       	push	r11
 2d2:	cf 92       	push	r12
 2d4:	df 92       	push	r13
 2d6:	ef 92       	push	r14
 2d8:	ff 92       	push	r15
 2da:	1f 93       	push	r17
 2dc:	2f 93       	push	r18
 2de:	3f 93       	push	r19
 2e0:	4f 93       	push	r20
 2e2:	5f 93       	push	r21
 2e4:	6f 93       	push	r22
 2e6:	7f 93       	push	r23
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	ef 93       	push	r30
 2f6:	ff 93       	push	r31
	minuteflag = 0x01;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <minuteflag>
	char temperature;
	uint8_t hundred_count;
	PORTD ^= (1<<PIND6);
 2fe:	9b b1       	in	r25, 0x0b	; 11
 300:	80 e4       	ldi	r24, 0x40	; 64
 302:	89 27       	eor	r24, r25
 304:	8b b9       	out	0x0b, r24	; 11
	temperature = readTemperature(); // Leer temperatura
 306:	0e 94 42 01 	call	0x284	; 0x284 <readTemperature>
 30a:	c8 2f       	mov	r28, r24
	
	uint8_t entero, decimal; // promedio
	float conthist; // 
	
	hundred_count = read_EEPROM(MEMORY_SIZE); // Contador de cuantas veces se llego a 100 datos guardados
 30c:	83 e6       	ldi	r24, 0x63	; 99
 30e:	0e 94 89 00 	call	0x112	; 0x112 <read_EEPROM>
 312:	d8 2f       	mov	r29, r24
	conthist =  (((float)hundred_count*100) + (float)count); // contador historico
 314:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <count>
 318:	68 2f       	mov	r22, r24
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 b3 03 	call	0x766	; 0x766 <__floatunsisf>
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	48 ec       	ldi	r20, 0xC8	; 200
 32a:	52 e4       	ldi	r21, 0x42	; 66
 32c:	0e 94 41 04 	call	0x882	; 0x882 <__mulsf3>
 330:	6b 01       	movw	r12, r22
 332:	7c 01       	movw	r14, r24
 334:	61 2f       	mov	r22, r17
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 b3 03 	call	0x766	; 0x766 <__floatunsisf>
 340:	9b 01       	movw	r18, r22
 342:	ac 01       	movw	r20, r24
 344:	c7 01       	movw	r24, r14
 346:	b6 01       	movw	r22, r12
 348:	0e 94 a6 02 	call	0x54c	; 0x54c <__addsf3>
 34c:	6b 01       	movw	r12, r22
 34e:	7c 01       	movw	r14, r24
	
	if (hundred_count == 0 && count == 0)promedio = (float)temperature;
 350:	d1 11       	cpse	r29, r1
 352:	11 c0       	rjmp	.+34     	; 0x376 <__vector_11+0xb6>
 354:	11 11       	cpse	r17, r1
 356:	0f c0       	rjmp	.+30     	; 0x376 <__vector_11+0xb6>
 358:	6c 2f       	mov	r22, r28
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 b3 03 	call	0x766	; 0x766 <__floatunsisf>
 364:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_end>
 368:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__data_end+0x1>
 36c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
 370:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x3>
 374:	32 c0       	rjmp	.+100    	; 0x3da <__vector_11+0x11a>
	else promedio = ((float)temperature + promedio*conthist )/ (conthist+1);	
 376:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 37a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 37e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__data_end+0x2>
 382:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__data_end+0x3>
 386:	c7 01       	movw	r24, r14
 388:	b6 01       	movw	r22, r12
 38a:	0e 94 41 04 	call	0x882	; 0x882 <__mulsf3>
 38e:	4b 01       	movw	r8, r22
 390:	5c 01       	movw	r10, r24
 392:	6c 2f       	mov	r22, r28
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 b3 03 	call	0x766	; 0x766 <__floatunsisf>
 39e:	9b 01       	movw	r18, r22
 3a0:	ac 01       	movw	r20, r24
 3a2:	c5 01       	movw	r24, r10
 3a4:	b4 01       	movw	r22, r8
 3a6:	0e 94 a6 02 	call	0x54c	; 0x54c <__addsf3>
 3aa:	4b 01       	movw	r8, r22
 3ac:	5c 01       	movw	r10, r24
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	40 e8       	ldi	r20, 0x80	; 128
 3b4:	5f e3       	ldi	r21, 0x3F	; 63
 3b6:	c7 01       	movw	r24, r14
 3b8:	b6 01       	movw	r22, r12
 3ba:	0e 94 a6 02 	call	0x54c	; 0x54c <__addsf3>
 3be:	9b 01       	movw	r18, r22
 3c0:	ac 01       	movw	r20, r24
 3c2:	c5 01       	movw	r24, r10
 3c4:	b4 01       	movw	r22, r8
 3c6:	0e 94 12 03 	call	0x624	; 0x624 <__divsf3>
 3ca:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_end>
 3ce:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__data_end+0x1>
 3d2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
 3d6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x3>
	
	entero = (uint8_t)promedio; // obtenemos el numero
 3da:	80 90 02 01 	lds	r8, 0x0102	; 0x800102 <__data_end>
 3de:	90 90 03 01 	lds	r9, 0x0103	; 0x800103 <__data_end+0x1>
 3e2:	a0 90 04 01 	lds	r10, 0x0104	; 0x800104 <__data_end+0x2>
 3e6:	b0 90 05 01 	lds	r11, 0x0105	; 0x800105 <__data_end+0x3>
 3ea:	c5 01       	movw	r24, r10
 3ec:	b4 01       	movw	r22, r8
 3ee:	0e 94 84 03 	call	0x708	; 0x708 <__fixunssfsi>
 3f2:	16 2f       	mov	r17, r22
	decimal = (promedio - (float)entero) * 100;
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 b3 03 	call	0x766	; 0x766 <__floatunsisf>
 3fe:	9b 01       	movw	r18, r22
 400:	ac 01       	movw	r20, r24
 402:	c5 01       	movw	r24, r10
 404:	b4 01       	movw	r22, r8
 406:	0e 94 a5 02 	call	0x54a	; 0x54a <__subsf3>
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	48 ec       	ldi	r20, 0xC8	; 200
 410:	52 e4       	ldi	r21, 0x42	; 66
 412:	0e 94 41 04 	call	0x882	; 0x882 <__mulsf3>
 416:	0e 94 84 03 	call	0x708	; 0x708 <__fixunssfsi>
 41a:	b6 2e       	mov	r11, r22
	
	EWEN();
 41c:	0e 94 a7 00 	call	0x14e	; 0x14e <EWEN>
	
	if (temperature > maxTemp){
 420:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <maxTemp>
 424:	8c 17       	cp	r24, r28
 426:	68 f4       	brcc	.+26     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		write_byte(MEMORY_SIZE+1, temperature); // Almacenando temperatura maxima
 428:	6c 2f       	mov	r22, r28
 42a:	84 e6       	ldi	r24, 0x64	; 100
 42c:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
		write_byte(MEMORY_SIZE+2, conthist);
 430:	c7 01       	movw	r24, r14
 432:	b6 01       	movw	r22, r12
 434:	0e 94 84 03 	call	0x708	; 0x708 <__fixunssfsi>
 438:	85 e6       	ldi	r24, 0x65	; 101
 43a:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
		maxTemp = temperature;
 43e:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <maxTemp>
	}
	
	if (temperature < minTemp){
 442:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 446:	c8 17       	cp	r28, r24
 448:	68 f4       	brcc	.+26     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		write_byte(MEMORY_SIZE+3, temperature); // Almacenando temperatura minima
 44a:	6c 2f       	mov	r22, r28
 44c:	86 e6       	ldi	r24, 0x66	; 102
 44e:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
		write_byte(MEMORY_SIZE+4, conthist);    // Almacenando tiempo
 452:	c7 01       	movw	r24, r14
 454:	b6 01       	movw	r22, r12
 456:	0e 94 84 03 	call	0x708	; 0x708 <__fixunssfsi>
 45a:	87 e6       	ldi	r24, 0x67	; 103
 45c:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
		minTemp = temperature;
 460:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
	}
			
	write_byte(MEMORY_SIZE+5,entero);
 464:	61 2f       	mov	r22, r17
 466:	88 e6       	ldi	r24, 0x68	; 104
 468:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	write_byte(MEMORY_SIZE+6,decimal);
 46c:	6b 2d       	mov	r22, r11
 46e:	89 e6       	ldi	r24, 0x69	; 105
 470:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	
	write_byte(count, temperature); // Almacenar temperatura
 474:	6c 2f       	mov	r22, r28
 476:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
 47a:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	
		
	count++;
 47e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
 482:	8f 5f       	subi	r24, 0xFF	; 255
	if(count >= MEMORY_SIZE){
 484:	83 36       	cpi	r24, 0x63	; 99
 486:	18 f4       	brcc	.+6      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	write_byte(MEMORY_SIZE+6,decimal);
	
	write_byte(count, temperature); // Almacenar temperatura
	
		
	count++;
 488:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count>
 48c:	07 c0       	rjmp	.+14     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
	if(count >= MEMORY_SIZE){
		count = 0;
 48e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <count>
		hundred_count++;
		write_byte(MEMORY_SIZE, hundred_count);
 492:	61 e0       	ldi	r22, 0x01	; 1
 494:	6d 0f       	add	r22, r29
 496:	83 e6       	ldi	r24, 0x63	; 99
 498:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	}
	EWDS();
 49c:	0e 94 ad 00 	call	0x15a	; 0x15a <EWDS>
	
	
	//readhundredtemp(temp);
	
}
 4a0:	ff 91       	pop	r31
 4a2:	ef 91       	pop	r30
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	bf 91       	pop	r27
 4aa:	af 91       	pop	r26
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	7f 91       	pop	r23
 4b2:	6f 91       	pop	r22
 4b4:	5f 91       	pop	r21
 4b6:	4f 91       	pop	r20
 4b8:	3f 91       	pop	r19
 4ba:	2f 91       	pop	r18
 4bc:	1f 91       	pop	r17
 4be:	ff 90       	pop	r15
 4c0:	ef 90       	pop	r14
 4c2:	df 90       	pop	r13
 4c4:	cf 90       	pop	r12
 4c6:	bf 90       	pop	r11
 4c8:	af 90       	pop	r10
 4ca:	9f 90       	pop	r9
 4cc:	8f 90       	pop	r8
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <main>:


int main(void)
{	
	TWI_init();
 4d8:	0e 94 c4 00 	call	0x188	; 0x188 <TWI_init>
	DS1621_Init();
 4dc:	0e 94 35 01 	call	0x26a	; 0x26a <DS1621_Init>
	
	DDRD |= (1 << MOSI) | (1 << CLK) | (1 << SELECT); // MOSI, CLK, SELECT(CS) SALIDAS
 4e0:	8a b1       	in	r24, 0x0a	; 10
 4e2:	8c 61       	ori	r24, 0x1C	; 28
 4e4:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PIND5); // MISO ENTRADA
 4e6:	55 98       	cbi	0x0a, 5	; 10
	
	PORTD &= ~(1 << CLK); // clk = 0
 4e8:	5b 98       	cbi	0x0b, 3	; 11
	
	// LEDs
	DDRD |= (1 << 6);
 4ea:	56 9a       	sbi	0x0a, 6	; 10
		
	sei();
 4ec:	78 94       	sei
	timerInit();
 4ee:	0e 94 b3 00 	call	0x166	; 0x166 <timerInit>
	
	EWEN();
 4f2:	0e 94 a7 00 	call	0x14e	; 0x14e <EWEN>
	
	write_byte(MEMORY_SIZE, 0x00);
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	83 e6       	ldi	r24, 0x63	; 99
 4fa:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	write_byte(MEMORY_SIZE+1, 0x00);
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	84 e6       	ldi	r24, 0x64	; 100
 502:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	write_byte(MEMORY_SIZE+2, 0x00);
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	85 e6       	ldi	r24, 0x65	; 101
 50a:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	write_byte(MEMORY_SIZE+3, 0x00);
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	86 e6       	ldi	r24, 0x66	; 102
 512:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	write_byte(MEMORY_SIZE+4, 0x00);
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	87 e6       	ldi	r24, 0x67	; 103
 51a:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	write_byte(MEMORY_SIZE+5, 0x00);
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	88 e6       	ldi	r24, 0x68	; 104
 522:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	write_byte(MEMORY_SIZE+6, 0x00);
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	89 e6       	ldi	r24, 0x69	; 105
 52a:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	write_byte(MEMORY_SIZE+7, 0x00);
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	8a e6       	ldi	r24, 0x6A	; 106
 532:	0e 94 95 00 	call	0x12a	; 0x12a <write_byte>
	
	EWDS();
 536:	0e 94 ad 00 	call	0x15a	; 0x15a <EWDS>
 53a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <minuteflag>
		
		if(minuteflag == 0x01)
		{
			
			
			minuteflag = 0x00;
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	01 c0       	rjmp	.+2      	; 0x544 <main+0x6c>
 542:	89 2f       	mov	r24, r25
	EWDS();
	
	while (1)
	{
		
		if(minuteflag == 0x01)
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <main+0x6c>
 548:	fc cf       	rjmp	.-8      	; 0x542 <main+0x6a>

0000054a <__subsf3>:
 54a:	50 58       	subi	r21, 0x80	; 128

0000054c <__addsf3>:
 54c:	bb 27       	eor	r27, r27
 54e:	aa 27       	eor	r26, r26
 550:	0e 94 bd 02 	call	0x57a	; 0x57a <__addsf3x>
 554:	0c 94 07 04 	jmp	0x80e	; 0x80e <__fp_round>
 558:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__fp_pscA>
 55c:	38 f0       	brcs	.+14     	; 0x56c <__addsf3+0x20>
 55e:	0e 94 00 04 	call	0x800	; 0x800 <__fp_pscB>
 562:	20 f0       	brcs	.+8      	; 0x56c <__addsf3+0x20>
 564:	39 f4       	brne	.+14     	; 0x574 <__addsf3+0x28>
 566:	9f 3f       	cpi	r25, 0xFF	; 255
 568:	19 f4       	brne	.+6      	; 0x570 <__addsf3+0x24>
 56a:	26 f4       	brtc	.+8      	; 0x574 <__addsf3+0x28>
 56c:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__fp_nan>
 570:	0e f4       	brtc	.+2      	; 0x574 <__addsf3+0x28>
 572:	e0 95       	com	r30
 574:	e7 fb       	bst	r30, 7
 576:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_inf>

0000057a <__addsf3x>:
 57a:	e9 2f       	mov	r30, r25
 57c:	0e 94 18 04 	call	0x830	; 0x830 <__fp_split3>
 580:	58 f3       	brcs	.-42     	; 0x558 <__addsf3+0xc>
 582:	ba 17       	cp	r27, r26
 584:	62 07       	cpc	r22, r18
 586:	73 07       	cpc	r23, r19
 588:	84 07       	cpc	r24, r20
 58a:	95 07       	cpc	r25, r21
 58c:	20 f0       	brcs	.+8      	; 0x596 <__addsf3x+0x1c>
 58e:	79 f4       	brne	.+30     	; 0x5ae <__addsf3x+0x34>
 590:	a6 f5       	brtc	.+104    	; 0x5fa <__addsf3x+0x80>
 592:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_zero>
 596:	0e f4       	brtc	.+2      	; 0x59a <__addsf3x+0x20>
 598:	e0 95       	com	r30
 59a:	0b 2e       	mov	r0, r27
 59c:	ba 2f       	mov	r27, r26
 59e:	a0 2d       	mov	r26, r0
 5a0:	0b 01       	movw	r0, r22
 5a2:	b9 01       	movw	r22, r18
 5a4:	90 01       	movw	r18, r0
 5a6:	0c 01       	movw	r0, r24
 5a8:	ca 01       	movw	r24, r20
 5aa:	a0 01       	movw	r20, r0
 5ac:	11 24       	eor	r1, r1
 5ae:	ff 27       	eor	r31, r31
 5b0:	59 1b       	sub	r21, r25
 5b2:	99 f0       	breq	.+38     	; 0x5da <__addsf3x+0x60>
 5b4:	59 3f       	cpi	r21, 0xF9	; 249
 5b6:	50 f4       	brcc	.+20     	; 0x5cc <__addsf3x+0x52>
 5b8:	50 3e       	cpi	r21, 0xE0	; 224
 5ba:	68 f1       	brcs	.+90     	; 0x616 <__addsf3x+0x9c>
 5bc:	1a 16       	cp	r1, r26
 5be:	f0 40       	sbci	r31, 0x00	; 0
 5c0:	a2 2f       	mov	r26, r18
 5c2:	23 2f       	mov	r18, r19
 5c4:	34 2f       	mov	r19, r20
 5c6:	44 27       	eor	r20, r20
 5c8:	58 5f       	subi	r21, 0xF8	; 248
 5ca:	f3 cf       	rjmp	.-26     	; 0x5b2 <__addsf3x+0x38>
 5cc:	46 95       	lsr	r20
 5ce:	37 95       	ror	r19
 5d0:	27 95       	ror	r18
 5d2:	a7 95       	ror	r26
 5d4:	f0 40       	sbci	r31, 0x00	; 0
 5d6:	53 95       	inc	r21
 5d8:	c9 f7       	brne	.-14     	; 0x5cc <__addsf3x+0x52>
 5da:	7e f4       	brtc	.+30     	; 0x5fa <__addsf3x+0x80>
 5dc:	1f 16       	cp	r1, r31
 5de:	ba 0b       	sbc	r27, r26
 5e0:	62 0b       	sbc	r22, r18
 5e2:	73 0b       	sbc	r23, r19
 5e4:	84 0b       	sbc	r24, r20
 5e6:	ba f0       	brmi	.+46     	; 0x616 <__addsf3x+0x9c>
 5e8:	91 50       	subi	r25, 0x01	; 1
 5ea:	a1 f0       	breq	.+40     	; 0x614 <__addsf3x+0x9a>
 5ec:	ff 0f       	add	r31, r31
 5ee:	bb 1f       	adc	r27, r27
 5f0:	66 1f       	adc	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	88 1f       	adc	r24, r24
 5f6:	c2 f7       	brpl	.-16     	; 0x5e8 <__addsf3x+0x6e>
 5f8:	0e c0       	rjmp	.+28     	; 0x616 <__addsf3x+0x9c>
 5fa:	ba 0f       	add	r27, r26
 5fc:	62 1f       	adc	r22, r18
 5fe:	73 1f       	adc	r23, r19
 600:	84 1f       	adc	r24, r20
 602:	48 f4       	brcc	.+18     	; 0x616 <__addsf3x+0x9c>
 604:	87 95       	ror	r24
 606:	77 95       	ror	r23
 608:	67 95       	ror	r22
 60a:	b7 95       	ror	r27
 60c:	f7 95       	ror	r31
 60e:	9e 3f       	cpi	r25, 0xFE	; 254
 610:	08 f0       	brcs	.+2      	; 0x614 <__addsf3x+0x9a>
 612:	b0 cf       	rjmp	.-160    	; 0x574 <__addsf3+0x28>
 614:	93 95       	inc	r25
 616:	88 0f       	add	r24, r24
 618:	08 f0       	brcs	.+2      	; 0x61c <__addsf3x+0xa2>
 61a:	99 27       	eor	r25, r25
 61c:	ee 0f       	add	r30, r30
 61e:	97 95       	ror	r25
 620:	87 95       	ror	r24
 622:	08 95       	ret

00000624 <__divsf3>:
 624:	0e 94 26 03 	call	0x64c	; 0x64c <__divsf3x>
 628:	0c 94 07 04 	jmp	0x80e	; 0x80e <__fp_round>
 62c:	0e 94 00 04 	call	0x800	; 0x800 <__fp_pscB>
 630:	58 f0       	brcs	.+22     	; 0x648 <__divsf3+0x24>
 632:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__fp_pscA>
 636:	40 f0       	brcs	.+16     	; 0x648 <__divsf3+0x24>
 638:	29 f4       	brne	.+10     	; 0x644 <__divsf3+0x20>
 63a:	5f 3f       	cpi	r21, 0xFF	; 255
 63c:	29 f0       	breq	.+10     	; 0x648 <__divsf3+0x24>
 63e:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_inf>
 642:	51 11       	cpse	r21, r1
 644:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_szero>
 648:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__fp_nan>

0000064c <__divsf3x>:
 64c:	0e 94 18 04 	call	0x830	; 0x830 <__fp_split3>
 650:	68 f3       	brcs	.-38     	; 0x62c <__divsf3+0x8>

00000652 <__divsf3_pse>:
 652:	99 23       	and	r25, r25
 654:	b1 f3       	breq	.-20     	; 0x642 <__divsf3+0x1e>
 656:	55 23       	and	r21, r21
 658:	91 f3       	breq	.-28     	; 0x63e <__divsf3+0x1a>
 65a:	95 1b       	sub	r25, r21
 65c:	55 0b       	sbc	r21, r21
 65e:	bb 27       	eor	r27, r27
 660:	aa 27       	eor	r26, r26
 662:	62 17       	cp	r22, r18
 664:	73 07       	cpc	r23, r19
 666:	84 07       	cpc	r24, r20
 668:	38 f0       	brcs	.+14     	; 0x678 <__divsf3_pse+0x26>
 66a:	9f 5f       	subi	r25, 0xFF	; 255
 66c:	5f 4f       	sbci	r21, 0xFF	; 255
 66e:	22 0f       	add	r18, r18
 670:	33 1f       	adc	r19, r19
 672:	44 1f       	adc	r20, r20
 674:	aa 1f       	adc	r26, r26
 676:	a9 f3       	breq	.-22     	; 0x662 <__divsf3_pse+0x10>
 678:	35 d0       	rcall	.+106    	; 0x6e4 <__divsf3_pse+0x92>
 67a:	0e 2e       	mov	r0, r30
 67c:	3a f0       	brmi	.+14     	; 0x68c <__divsf3_pse+0x3a>
 67e:	e0 e8       	ldi	r30, 0x80	; 128
 680:	32 d0       	rcall	.+100    	; 0x6e6 <__divsf3_pse+0x94>
 682:	91 50       	subi	r25, 0x01	; 1
 684:	50 40       	sbci	r21, 0x00	; 0
 686:	e6 95       	lsr	r30
 688:	00 1c       	adc	r0, r0
 68a:	ca f7       	brpl	.-14     	; 0x67e <__divsf3_pse+0x2c>
 68c:	2b d0       	rcall	.+86     	; 0x6e4 <__divsf3_pse+0x92>
 68e:	fe 2f       	mov	r31, r30
 690:	29 d0       	rcall	.+82     	; 0x6e4 <__divsf3_pse+0x92>
 692:	66 0f       	add	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	bb 1f       	adc	r27, r27
 69a:	26 17       	cp	r18, r22
 69c:	37 07       	cpc	r19, r23
 69e:	48 07       	cpc	r20, r24
 6a0:	ab 07       	cpc	r26, r27
 6a2:	b0 e8       	ldi	r27, 0x80	; 128
 6a4:	09 f0       	breq	.+2      	; 0x6a8 <__divsf3_pse+0x56>
 6a6:	bb 0b       	sbc	r27, r27
 6a8:	80 2d       	mov	r24, r0
 6aa:	bf 01       	movw	r22, r30
 6ac:	ff 27       	eor	r31, r31
 6ae:	93 58       	subi	r25, 0x83	; 131
 6b0:	5f 4f       	sbci	r21, 0xFF	; 255
 6b2:	3a f0       	brmi	.+14     	; 0x6c2 <__divsf3_pse+0x70>
 6b4:	9e 3f       	cpi	r25, 0xFE	; 254
 6b6:	51 05       	cpc	r21, r1
 6b8:	78 f0       	brcs	.+30     	; 0x6d8 <__divsf3_pse+0x86>
 6ba:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_inf>
 6be:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_szero>
 6c2:	5f 3f       	cpi	r21, 0xFF	; 255
 6c4:	e4 f3       	brlt	.-8      	; 0x6be <__divsf3_pse+0x6c>
 6c6:	98 3e       	cpi	r25, 0xE8	; 232
 6c8:	d4 f3       	brlt	.-12     	; 0x6be <__divsf3_pse+0x6c>
 6ca:	86 95       	lsr	r24
 6cc:	77 95       	ror	r23
 6ce:	67 95       	ror	r22
 6d0:	b7 95       	ror	r27
 6d2:	f7 95       	ror	r31
 6d4:	9f 5f       	subi	r25, 0xFF	; 255
 6d6:	c9 f7       	brne	.-14     	; 0x6ca <__divsf3_pse+0x78>
 6d8:	88 0f       	add	r24, r24
 6da:	91 1d       	adc	r25, r1
 6dc:	96 95       	lsr	r25
 6de:	87 95       	ror	r24
 6e0:	97 f9       	bld	r25, 7
 6e2:	08 95       	ret
 6e4:	e1 e0       	ldi	r30, 0x01	; 1
 6e6:	66 0f       	add	r22, r22
 6e8:	77 1f       	adc	r23, r23
 6ea:	88 1f       	adc	r24, r24
 6ec:	bb 1f       	adc	r27, r27
 6ee:	62 17       	cp	r22, r18
 6f0:	73 07       	cpc	r23, r19
 6f2:	84 07       	cpc	r24, r20
 6f4:	ba 07       	cpc	r27, r26
 6f6:	20 f0       	brcs	.+8      	; 0x700 <__divsf3_pse+0xae>
 6f8:	62 1b       	sub	r22, r18
 6fa:	73 0b       	sbc	r23, r19
 6fc:	84 0b       	sbc	r24, r20
 6fe:	ba 0b       	sbc	r27, r26
 700:	ee 1f       	adc	r30, r30
 702:	88 f7       	brcc	.-30     	; 0x6e6 <__divsf3_pse+0x94>
 704:	e0 95       	com	r30
 706:	08 95       	ret

00000708 <__fixunssfsi>:
 708:	0e 94 20 04 	call	0x840	; 0x840 <__fp_splitA>
 70c:	88 f0       	brcs	.+34     	; 0x730 <__fixunssfsi+0x28>
 70e:	9f 57       	subi	r25, 0x7F	; 127
 710:	98 f0       	brcs	.+38     	; 0x738 <__fixunssfsi+0x30>
 712:	b9 2f       	mov	r27, r25
 714:	99 27       	eor	r25, r25
 716:	b7 51       	subi	r27, 0x17	; 23
 718:	b0 f0       	brcs	.+44     	; 0x746 <__fixunssfsi+0x3e>
 71a:	e1 f0       	breq	.+56     	; 0x754 <__fixunssfsi+0x4c>
 71c:	66 0f       	add	r22, r22
 71e:	77 1f       	adc	r23, r23
 720:	88 1f       	adc	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	1a f0       	brmi	.+6      	; 0x72c <__fixunssfsi+0x24>
 726:	ba 95       	dec	r27
 728:	c9 f7       	brne	.-14     	; 0x71c <__fixunssfsi+0x14>
 72a:	14 c0       	rjmp	.+40     	; 0x754 <__fixunssfsi+0x4c>
 72c:	b1 30       	cpi	r27, 0x01	; 1
 72e:	91 f0       	breq	.+36     	; 0x754 <__fixunssfsi+0x4c>
 730:	0e 94 3a 04 	call	0x874	; 0x874 <__fp_zero>
 734:	b1 e0       	ldi	r27, 0x01	; 1
 736:	08 95       	ret
 738:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_zero>
 73c:	67 2f       	mov	r22, r23
 73e:	78 2f       	mov	r23, r24
 740:	88 27       	eor	r24, r24
 742:	b8 5f       	subi	r27, 0xF8	; 248
 744:	39 f0       	breq	.+14     	; 0x754 <__fixunssfsi+0x4c>
 746:	b9 3f       	cpi	r27, 0xF9	; 249
 748:	cc f3       	brlt	.-14     	; 0x73c <__fixunssfsi+0x34>
 74a:	86 95       	lsr	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b3 95       	inc	r27
 752:	d9 f7       	brne	.-10     	; 0x74a <__fixunssfsi+0x42>
 754:	3e f4       	brtc	.+14     	; 0x764 <__fixunssfsi+0x5c>
 756:	90 95       	com	r25
 758:	80 95       	com	r24
 75a:	70 95       	com	r23
 75c:	61 95       	neg	r22
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	08 95       	ret

00000766 <__floatunsisf>:
 766:	e8 94       	clt
 768:	09 c0       	rjmp	.+18     	; 0x77c <__floatsisf+0x12>

0000076a <__floatsisf>:
 76a:	97 fb       	bst	r25, 7
 76c:	3e f4       	brtc	.+14     	; 0x77c <__floatsisf+0x12>
 76e:	90 95       	com	r25
 770:	80 95       	com	r24
 772:	70 95       	com	r23
 774:	61 95       	neg	r22
 776:	7f 4f       	sbci	r23, 0xFF	; 255
 778:	8f 4f       	sbci	r24, 0xFF	; 255
 77a:	9f 4f       	sbci	r25, 0xFF	; 255
 77c:	99 23       	and	r25, r25
 77e:	a9 f0       	breq	.+42     	; 0x7aa <__floatsisf+0x40>
 780:	f9 2f       	mov	r31, r25
 782:	96 e9       	ldi	r25, 0x96	; 150
 784:	bb 27       	eor	r27, r27
 786:	93 95       	inc	r25
 788:	f6 95       	lsr	r31
 78a:	87 95       	ror	r24
 78c:	77 95       	ror	r23
 78e:	67 95       	ror	r22
 790:	b7 95       	ror	r27
 792:	f1 11       	cpse	r31, r1
 794:	f8 cf       	rjmp	.-16     	; 0x786 <__floatsisf+0x1c>
 796:	fa f4       	brpl	.+62     	; 0x7d6 <__floatsisf+0x6c>
 798:	bb 0f       	add	r27, r27
 79a:	11 f4       	brne	.+4      	; 0x7a0 <__floatsisf+0x36>
 79c:	60 ff       	sbrs	r22, 0
 79e:	1b c0       	rjmp	.+54     	; 0x7d6 <__floatsisf+0x6c>
 7a0:	6f 5f       	subi	r22, 0xFF	; 255
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	8f 4f       	sbci	r24, 0xFF	; 255
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	16 c0       	rjmp	.+44     	; 0x7d6 <__floatsisf+0x6c>
 7aa:	88 23       	and	r24, r24
 7ac:	11 f0       	breq	.+4      	; 0x7b2 <__floatsisf+0x48>
 7ae:	96 e9       	ldi	r25, 0x96	; 150
 7b0:	11 c0       	rjmp	.+34     	; 0x7d4 <__floatsisf+0x6a>
 7b2:	77 23       	and	r23, r23
 7b4:	21 f0       	breq	.+8      	; 0x7be <__floatsisf+0x54>
 7b6:	9e e8       	ldi	r25, 0x8E	; 142
 7b8:	87 2f       	mov	r24, r23
 7ba:	76 2f       	mov	r23, r22
 7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <__floatsisf+0x5e>
 7be:	66 23       	and	r22, r22
 7c0:	71 f0       	breq	.+28     	; 0x7de <__floatsisf+0x74>
 7c2:	96 e8       	ldi	r25, 0x86	; 134
 7c4:	86 2f       	mov	r24, r22
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	2a f0       	brmi	.+10     	; 0x7d6 <__floatsisf+0x6c>
 7cc:	9a 95       	dec	r25
 7ce:	66 0f       	add	r22, r22
 7d0:	77 1f       	adc	r23, r23
 7d2:	88 1f       	adc	r24, r24
 7d4:	da f7       	brpl	.-10     	; 0x7cc <__floatsisf+0x62>
 7d6:	88 0f       	add	r24, r24
 7d8:	96 95       	lsr	r25
 7da:	87 95       	ror	r24
 7dc:	97 f9       	bld	r25, 7
 7de:	08 95       	ret

000007e0 <__fp_inf>:
 7e0:	97 f9       	bld	r25, 7
 7e2:	9f 67       	ori	r25, 0x7F	; 127
 7e4:	80 e8       	ldi	r24, 0x80	; 128
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	08 95       	ret

000007ec <__fp_nan>:
 7ec:	9f ef       	ldi	r25, 0xFF	; 255
 7ee:	80 ec       	ldi	r24, 0xC0	; 192
 7f0:	08 95       	ret

000007f2 <__fp_pscA>:
 7f2:	00 24       	eor	r0, r0
 7f4:	0a 94       	dec	r0
 7f6:	16 16       	cp	r1, r22
 7f8:	17 06       	cpc	r1, r23
 7fa:	18 06       	cpc	r1, r24
 7fc:	09 06       	cpc	r0, r25
 7fe:	08 95       	ret

00000800 <__fp_pscB>:
 800:	00 24       	eor	r0, r0
 802:	0a 94       	dec	r0
 804:	12 16       	cp	r1, r18
 806:	13 06       	cpc	r1, r19
 808:	14 06       	cpc	r1, r20
 80a:	05 06       	cpc	r0, r21
 80c:	08 95       	ret

0000080e <__fp_round>:
 80e:	09 2e       	mov	r0, r25
 810:	03 94       	inc	r0
 812:	00 0c       	add	r0, r0
 814:	11 f4       	brne	.+4      	; 0x81a <__fp_round+0xc>
 816:	88 23       	and	r24, r24
 818:	52 f0       	brmi	.+20     	; 0x82e <__fp_round+0x20>
 81a:	bb 0f       	add	r27, r27
 81c:	40 f4       	brcc	.+16     	; 0x82e <__fp_round+0x20>
 81e:	bf 2b       	or	r27, r31
 820:	11 f4       	brne	.+4      	; 0x826 <__fp_round+0x18>
 822:	60 ff       	sbrs	r22, 0
 824:	04 c0       	rjmp	.+8      	; 0x82e <__fp_round+0x20>
 826:	6f 5f       	subi	r22, 0xFF	; 255
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	08 95       	ret

00000830 <__fp_split3>:
 830:	57 fd       	sbrc	r21, 7
 832:	90 58       	subi	r25, 0x80	; 128
 834:	44 0f       	add	r20, r20
 836:	55 1f       	adc	r21, r21
 838:	59 f0       	breq	.+22     	; 0x850 <__fp_splitA+0x10>
 83a:	5f 3f       	cpi	r21, 0xFF	; 255
 83c:	71 f0       	breq	.+28     	; 0x85a <__fp_splitA+0x1a>
 83e:	47 95       	ror	r20

00000840 <__fp_splitA>:
 840:	88 0f       	add	r24, r24
 842:	97 fb       	bst	r25, 7
 844:	99 1f       	adc	r25, r25
 846:	61 f0       	breq	.+24     	; 0x860 <__fp_splitA+0x20>
 848:	9f 3f       	cpi	r25, 0xFF	; 255
 84a:	79 f0       	breq	.+30     	; 0x86a <__fp_splitA+0x2a>
 84c:	87 95       	ror	r24
 84e:	08 95       	ret
 850:	12 16       	cp	r1, r18
 852:	13 06       	cpc	r1, r19
 854:	14 06       	cpc	r1, r20
 856:	55 1f       	adc	r21, r21
 858:	f2 cf       	rjmp	.-28     	; 0x83e <__fp_split3+0xe>
 85a:	46 95       	lsr	r20
 85c:	f1 df       	rcall	.-30     	; 0x840 <__fp_splitA>
 85e:	08 c0       	rjmp	.+16     	; 0x870 <__fp_splitA+0x30>
 860:	16 16       	cp	r1, r22
 862:	17 06       	cpc	r1, r23
 864:	18 06       	cpc	r1, r24
 866:	99 1f       	adc	r25, r25
 868:	f1 cf       	rjmp	.-30     	; 0x84c <__fp_splitA+0xc>
 86a:	86 95       	lsr	r24
 86c:	71 05       	cpc	r23, r1
 86e:	61 05       	cpc	r22, r1
 870:	08 94       	sec
 872:	08 95       	ret

00000874 <__fp_zero>:
 874:	e8 94       	clt

00000876 <__fp_szero>:
 876:	bb 27       	eor	r27, r27
 878:	66 27       	eor	r22, r22
 87a:	77 27       	eor	r23, r23
 87c:	cb 01       	movw	r24, r22
 87e:	97 f9       	bld	r25, 7
 880:	08 95       	ret

00000882 <__mulsf3>:
 882:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__mulsf3x>
 886:	0c 94 07 04 	jmp	0x80e	; 0x80e <__fp_round>
 88a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__fp_pscA>
 88e:	38 f0       	brcs	.+14     	; 0x89e <__mulsf3+0x1c>
 890:	0e 94 00 04 	call	0x800	; 0x800 <__fp_pscB>
 894:	20 f0       	brcs	.+8      	; 0x89e <__mulsf3+0x1c>
 896:	95 23       	and	r25, r21
 898:	11 f0       	breq	.+4      	; 0x89e <__mulsf3+0x1c>
 89a:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_inf>
 89e:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__fp_nan>
 8a2:	11 24       	eor	r1, r1
 8a4:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_szero>

000008a8 <__mulsf3x>:
 8a8:	0e 94 18 04 	call	0x830	; 0x830 <__fp_split3>
 8ac:	70 f3       	brcs	.-36     	; 0x88a <__mulsf3+0x8>

000008ae <__mulsf3_pse>:
 8ae:	95 9f       	mul	r25, r21
 8b0:	c1 f3       	breq	.-16     	; 0x8a2 <__mulsf3+0x20>
 8b2:	95 0f       	add	r25, r21
 8b4:	50 e0       	ldi	r21, 0x00	; 0
 8b6:	55 1f       	adc	r21, r21
 8b8:	62 9f       	mul	r22, r18
 8ba:	f0 01       	movw	r30, r0
 8bc:	72 9f       	mul	r23, r18
 8be:	bb 27       	eor	r27, r27
 8c0:	f0 0d       	add	r31, r0
 8c2:	b1 1d       	adc	r27, r1
 8c4:	63 9f       	mul	r22, r19
 8c6:	aa 27       	eor	r26, r26
 8c8:	f0 0d       	add	r31, r0
 8ca:	b1 1d       	adc	r27, r1
 8cc:	aa 1f       	adc	r26, r26
 8ce:	64 9f       	mul	r22, r20
 8d0:	66 27       	eor	r22, r22
 8d2:	b0 0d       	add	r27, r0
 8d4:	a1 1d       	adc	r26, r1
 8d6:	66 1f       	adc	r22, r22
 8d8:	82 9f       	mul	r24, r18
 8da:	22 27       	eor	r18, r18
 8dc:	b0 0d       	add	r27, r0
 8de:	a1 1d       	adc	r26, r1
 8e0:	62 1f       	adc	r22, r18
 8e2:	73 9f       	mul	r23, r19
 8e4:	b0 0d       	add	r27, r0
 8e6:	a1 1d       	adc	r26, r1
 8e8:	62 1f       	adc	r22, r18
 8ea:	83 9f       	mul	r24, r19
 8ec:	a0 0d       	add	r26, r0
 8ee:	61 1d       	adc	r22, r1
 8f0:	22 1f       	adc	r18, r18
 8f2:	74 9f       	mul	r23, r20
 8f4:	33 27       	eor	r19, r19
 8f6:	a0 0d       	add	r26, r0
 8f8:	61 1d       	adc	r22, r1
 8fa:	23 1f       	adc	r18, r19
 8fc:	84 9f       	mul	r24, r20
 8fe:	60 0d       	add	r22, r0
 900:	21 1d       	adc	r18, r1
 902:	82 2f       	mov	r24, r18
 904:	76 2f       	mov	r23, r22
 906:	6a 2f       	mov	r22, r26
 908:	11 24       	eor	r1, r1
 90a:	9f 57       	subi	r25, 0x7F	; 127
 90c:	50 40       	sbci	r21, 0x00	; 0
 90e:	9a f0       	brmi	.+38     	; 0x936 <__stack+0x37>
 910:	f1 f0       	breq	.+60     	; 0x94e <__stack+0x4f>
 912:	88 23       	and	r24, r24
 914:	4a f0       	brmi	.+18     	; 0x928 <__stack+0x29>
 916:	ee 0f       	add	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	bb 1f       	adc	r27, r27
 91c:	66 1f       	adc	r22, r22
 91e:	77 1f       	adc	r23, r23
 920:	88 1f       	adc	r24, r24
 922:	91 50       	subi	r25, 0x01	; 1
 924:	50 40       	sbci	r21, 0x00	; 0
 926:	a9 f7       	brne	.-22     	; 0x912 <__stack+0x13>
 928:	9e 3f       	cpi	r25, 0xFE	; 254
 92a:	51 05       	cpc	r21, r1
 92c:	80 f0       	brcs	.+32     	; 0x94e <__stack+0x4f>
 92e:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_inf>
 932:	0c 94 3b 04 	jmp	0x876	; 0x876 <__fp_szero>
 936:	5f 3f       	cpi	r21, 0xFF	; 255
 938:	e4 f3       	brlt	.-8      	; 0x932 <__stack+0x33>
 93a:	98 3e       	cpi	r25, 0xE8	; 232
 93c:	d4 f3       	brlt	.-12     	; 0x932 <__stack+0x33>
 93e:	86 95       	lsr	r24
 940:	77 95       	ror	r23
 942:	67 95       	ror	r22
 944:	b7 95       	ror	r27
 946:	f7 95       	ror	r31
 948:	e7 95       	ror	r30
 94a:	9f 5f       	subi	r25, 0xFF	; 255
 94c:	c1 f7       	brne	.-16     	; 0x93e <__stack+0x3f>
 94e:	fe 2b       	or	r31, r30
 950:	88 0f       	add	r24, r24
 952:	91 1d       	adc	r25, r1
 954:	96 95       	lsr	r25
 956:	87 95       	ror	r24
 958:	97 f9       	bld	r25, 7
 95a:	08 95       	ret

0000095c <_exit>:
 95c:	f8 94       	cli

0000095e <__stop_program>:
 95e:	ff cf       	rjmp	.-2      	; 0x95e <__stop_program>
